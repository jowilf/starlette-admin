{"config":{"lang":["en","es"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Starlette-Admin","text":"<p>Fast, beautiful, and extensible administrative interface framework for Starlette &amp; FastApi applications</p> <p></p>"},{"location":"#why-starlette-admin","title":"why starlette-admin?","text":"<p>FastAPI has emerged as a popular web framework for building APIs in Python. However, it lacks a mature admin interface solution like Flask-Admin to quickly manage your data through a user-friendly interface. Although solutions like Sqladmin and Fastapi-Admin exist, they only work with specific ORMs such as SQLAlchemy and Tortoise ORM.</p> <p>Starlette-admin was born from the need for a FastAPI admin interface that works with various data layer. It aims to provide a complete solution for CRUD interfaces regardless of the database backend. Starlette-admin works out of the box with multiple ORM/ODMs and can also be used with a custom data layer.</p>"},{"location":"#getting-started","title":"Getting started","text":"<ul> <li>Check out the documentation.</li> <li>Try the live demo. (Source code)</li> <li>Follow the tutorials</li> <li>Try the several usage examples included in the /examples folder</li> <li>If you find this project helpful or interesting, please consider giving it a star \u2b50\ufe0f</li> </ul>"},{"location":"#features","title":"Features","text":"<ul> <li>CRUD any data with ease</li> <li>Automatic form validation</li> <li>Advanced table widget with Datatables</li> <li>Search and filtering</li> <li>Search highlighting</li> <li>Multi-column ordering</li> <li>Export data to CSV/EXCEL/PDF and Browser Print</li> <li>Authentication</li> <li>Authorization</li> <li>Manage Files</li> <li>Custom views</li> <li>Custom batch actions</li> <li>Supported ORMs<ul> <li>SQLAlchemy</li> <li>SQLModel</li> <li>MongoEngine</li> <li>ODMantic</li> <li>Custom backend (doc, example)</li> </ul> </li> <li>Internationalization</li> </ul>"},{"location":"#installation","title":"Installation","text":""},{"location":"#pip","title":"PIP","text":"<pre><code>$ pip install starlette-admin\n</code></pre>"},{"location":"#poetry","title":"Poetry","text":"<pre><code>$ poetry add starlette-admin\n</code></pre>"},{"location":"#example","title":"Example","text":"<p>This is a simple example with SQLAlchemy model</p> <pre><code>from sqlalchemy import create_engine\nfrom sqlalchemy.ext.declarative import declarative_base\nfrom sqlalchemy.orm import Mapped, mapped_column\nfrom starlette.applications import Starlette\n\nfrom starlette_admin.contrib.sqla import Admin, ModelView\n\nBase = declarative_base()\nengine = create_engine(\"sqlite:///test.db\", connect_args={\"check_same_thread\": False})\n\n\n# Define your model\nclass Post(Base):\n  __tablename__ = \"posts\"\n\n  id: Mapped[int] = mapped_column(primary_key=True)\n  title: Mapped[str]\n\n\nBase.metadata.create_all(engine)\n\napp = Starlette()  # FastAPI()\n\n# Create admin\nadmin = Admin(engine, title=\"Example: SQLAlchemy\")\n\n# Add view\nadmin.add_view(ModelView(Post))\n\n# Mount admin to your app\nadmin.mount_to(app)\n</code></pre> <p>Access your admin interface in your browser at http://localhost:8000/admin</p>"},{"location":"#third-party","title":"Third party","text":"<p>starlette-admin is built with other open source projects:</p> <ul> <li>Tabler</li> <li>Datatables</li> <li>jquery</li> <li>Select2</li> <li>flatpickr</li> <li>moment</li> <li>jsoneditor</li> <li>fontawesome</li> <li>TinyMCE</li> </ul>"},{"location":"#contributing","title":"Contributing","text":"<p>Contributions are welcome and greatly appreciated! Before getting started, please read our contribution guidelines</p>"},{"location":"advanced/base-model-view/","title":"Extending BaseModelView","text":"<p>Starlette-Admin  makes a few assumptions about the database models that it works with. If you want to implement your own database backend, and still have Starlette-Admin\u2019s model views work as expected, then you should take note of the following:</p> <ol> <li>Each model must have one field which acts as a primary key to uniquely identify instances of that model. However,    there are no restriction on the data type or the field name of the primary key field.</li> <li>Models must make their data accessible as python properties.</li> </ol> <p>If that is the case, then you can implement your own database backend by extending the BaseModelView class, and implementing the set of methods listed below.</p> <p>Let's say you've defined your models like this:</p> <pre><code>from dataclasses import dataclass\nfrom typing import List\n\n\n@dataclass\nclass Post:\n    id: int\n    title: str\n    content: str\n    tags: List[str]\n</code></pre> <p>First you need to define a new class, which derives from BaseModelView.</p> <pre><code>from starlette_admin import BaseModelView\n\n\nclass PostView(BaseModelView):\n    pass\n</code></pre>"},{"location":"advanced/base-model-view/#metadata","title":"Metadata","text":"<p>Set the <code>identity</code>, <code>name</code> and <code>label</code> for the new class</p> <pre><code>from starlette_admin import BaseModelView\n\n\nclass PostView(BaseModelView):\n    identity = \"post\"\n    name = \"Post\"\n    label = \"Blog Posts\"\n    icon = \"fa fa-blog\"\n</code></pre> <p>Important</p> <p><code>identity</code> is used to identify the model associated to this view and should be unique.</p>"},{"location":"advanced/base-model-view/#primary-key","title":"Primary key","text":"<p>Set the <code>pk_attr</code> value which is primary key attribute name</p> <pre><code>from starlette_admin import BaseModelView\n\n\nclass PostView(BaseModelView):\n    pk_attr = \"id\"\n</code></pre>"},{"location":"advanced/base-model-view/#fields","title":"Fields","text":"<p>Internally, Starlette-Admin  uses custom fields all inherit from BaseField to represent each attribute. So, you need to choose the right field for each attribute or create a new field if needed. See API Reference for full list of default fields.</p> <pre><code>from starlette_admin import BaseModelView\nfrom starlette_admin import IntegerField, StringField, TagsField, TextAreaField\n\nclass PostView(BaseModelView):\n    fields = [\n        IntegerField(\"id\"),\n        StringField(\"title\"),\n        TextAreaField(\"content\"),\n        TagsField(\"tags\"),\n    ]\n</code></pre>"},{"location":"advanced/base-model-view/#crud-methods","title":"CRUD methods","text":"<p>Finally, you need to implement these CRUD methods:</p> <ul> <li>count()</li> <li>find_all()</li> <li>create()</li> <li>edit()</li> <li>delete()</li> </ul>"},{"location":"advanced/base-model-view/#full-example","title":"Full example","text":"<pre><code>from dataclasses import dataclass\nfrom typing import Any, Dict, Iterable, List, Optional, Union\n\nfrom starlette.requests import Request\nfrom starlette_admin import IntegerField, StringField, TagsField, TextAreaField\nfrom starlette_admin.exceptions import FormValidationError\nfrom starlette_admin.views import BaseModelView\n\n\n@dataclass\nclass Post:\n    id: int\n    title: str\n    content: str\n    tags: List[str]\n\n    def is_valid_for_term(self, term):\n        return (\n            str(term).lower() in self.title.lower()\n            or str(term).lower() in self.content.lower()\n            or any([str(term).lower() in tag.lower() for tag in self.tags])\n        )\n\n    def update(self, data: Dict):\n        for key, value in data.items():\n            if hasattr(self, key):\n                setattr(self, key, value)\n\n\ndb: Dict[int, Post] = dict()\nnext_id = 1\n\n\ndef filter_values(values: Iterable[Post], term):\n    filtered_values = []\n    for value in values:\n        if value.is_valid_for_term(term):\n            filtered_values.append(value)\n    return filtered_values\n\n\nclass PostView(BaseModelView):\n    identity = \"post\"\n    name = \"Post\"\n    label = \"Blog Posts\"\n    icon = \"fa fa-blog\"\n    pk_attr = \"id\"\n    fields = [\n        IntegerField(\"id\"),\n        StringField(\"title\"),\n        TextAreaField(\"content\"),\n        TagsField(\"tags\"),\n    ]\n    sortable_fields = (\"id\", \"title\", \"content\")\n    search_builder = False\n\n    async def count(\n        self,\n        request: Request,\n        where: Union[Dict[str, Any], str, None] = None,\n    ) -&gt; int:\n        values = list(db.values())\n        if where is not None:\n            values = filter_values(values, where)\n        return len(values)\n\n    async def find_all(\n        self,\n        request: Request,\n        skip: int = 0,\n        limit: int = 100,\n        where: Union[Dict[str, Any], str, None] = None,\n        order_by: Optional[List[str]] = None,\n    ) -&gt; List[Any]:\n        values = list(db.values())\n        if order_by is not None:\n            assert len(order_by) &lt; 2, \"Not supported\"\n            if len(order_by) == 1:\n                key, dir = order_by[0].split(maxsplit=1)\n                values.sort(key=lambda v: getattr(v, key), reverse=(dir == \"desc\"))\n\n        if where is not None and isinstance(where, (str, int)):\n            values = filter_values(values, where)\n        if limit &gt; 0:\n            return values[skip : skip + limit]\n        return values[skip:]\n\n    async def find_by_pk(self, request: Request, pk):\n        return db.get(int(pk), None)\n\n    async def find_by_pks(self, request: Request, pks):\n        return [db.get(int(pk)) for pk in pks]\n\n    async def validate_data(self, data: Dict):\n        errors = {}\n        if data[\"title\"] is None or len(data[\"title\"]) &lt; 3:\n            errors[\"title\"] = \"Ensure title has at least 03 characters\"\n        if data[\"tags\"] is None or len(data[\"tags\"]) &lt; 1:\n            errors[\"tags\"] = \"You need at least one tag\"\n        if len(errors) &gt; 0:\n            raise FormValidationError(errors)\n\n    async def create(self, request: Request, data: Dict):\n        await self.validate_data(data)\n        global next_id\n        obj = Post(id=next_id, **data)\n        db[next_id] = obj\n        next_id += 1\n        return obj\n\n    async def edit(self, request: Request, pk, data: Dict):\n        await self.validate_data(data)\n        db[int(pk)].update(data)\n        return db[int(pk)]\n\n    async def delete(self, request: Request, pks: List[Any]) -&gt; Optional[int]:\n        cnt = 0\n        for pk in pks:\n            value = await self.find_by_pk(request, pk)\n            if value is not None:\n                del db[int(pk)]\n                cnt += 1\n        return cnt\n</code></pre>"},{"location":"advanced/custom-field/","title":"Custom Field","text":"<p>Starlette-Admin has a lot of built-in fields available. But you can override or create your own field according to your need.</p> <p>Important</p> <p>Before creating a new field, try first to extend the existing ones. They are flexible enough to fit most use cases.</p> <p>The first step is to define a new class, which derives from BaseField or any others fields to customize it</p> <pre><code>from starlette_admin import BaseField\nfrom dataclasses import dataclass\n\n@dataclass\nclass CustomField(BaseField):\n    pass\n</code></pre>"},{"location":"advanced/custom-field/#list-rendering","title":"List Rendering","text":"<p>Starlette-Admin use Datatables to render list. By default all fields will be render as text field. To customize this behavior you need to write a javascript function to render your column inside datatable instance. For more information on how to write your function read Datatables documentation.</p> <ul> <li>First, you need to provide a link to your custom javascript file in which you add additional render function, by overriding the admin class</li> </ul> <p>Example</p> <p>This is simple example with SQLAlchemy backend</p> <pre><code>from starlette_admin.contrib.sqla import Admin as BaseAdmin\n\nclass Admin(BaseAdmin):\n    def custom_render_js(self, request: Request) -&gt; Optional[str]:\n        return request.url_for(\"statics\", path=\"js/custom_render.js\")\n\nadmin = Admin(engine)\nadmin.add_view(...)\n</code></pre> statics/js/custom_render.js<pre><code>Object.assign(render, {\n  mycustomkey: function render(data, type, full, meta, fieldOptions) {\n        ...\n  },\n});\n</code></pre> <p>Note</p> <p><code>fieldOptions</code> is your field as javascript object. Your field attributes is serialized into javascript object by using dataclass <code>asdict</code> function.</p> <ul> <li>Then, set <code>render_function_key</code> value</li> </ul> <pre><code>from starlette_admin import BaseField\nfrom dataclasses import dataclass\n\n@dataclass\nclass CustomField(BaseField):\n    render_function_key: str = \"mycustomkey\"\n</code></pre>"},{"location":"advanced/custom-field/#form","title":"Form","text":"<p>For form rendering, you should create a new html file under the directory <code>forms</code> in your templates dir.</p> <p>These jinja2 variables are available:</p> <ul> <li><code>field</code>: Your field instance</li> <li><code>error</code>: Error message coming from <code>FormValidationError</code></li> <li><code>data</code>: current value. Will be available if it is edit or when validation error occur</li> <li><code>action</code>: <code>EDIT</code> or <code>CREATE</code></li> </ul> <p>Example</p> forms/custom.html<pre><code>&lt;div class=\"{%if error%}is-invalid{%endif%}\"&gt;\n    &lt;input id=\"{{field.id}}\" name=\"{{field.id}}\" ... /&gt;\n    {% if field.help_text %}\n    &lt;small class=\"form-hint\"&gt;{{field.help_text}}&lt;/small&gt;\n    {%endif%}\n&lt;/div&gt;\n{%if error %}\n&lt;div class=\"invalid-feedback\"&gt;{{error}}&lt;/div&gt;\n{%endif%}\n</code></pre> <pre><code>from starlette_admin import BaseField\nfrom dataclasses import dataclass\n\n@dataclass\nclass CustomField(BaseField):\n    render_function_key: str = \"mycustomkey\"\n    form_template: str = \"forms/custom.html\"\n</code></pre>"},{"location":"advanced/custom-field/#detail-page","title":"Detail Page","text":"<p>To render your field on detail page, you should create a new html file under the directory <code>displays</code> in your template dir.</p> <p>These jinja2 variables are available:</p> <ul> <li><code>field</code>: Your field instance</li> <li><code>data</code>: value to display</li> </ul> <p>Example</p> displays/custom.html<pre><code>&lt;span&gt;Hello {{data}}&lt;/span&gt;\n</code></pre> <pre><code>from starlette_admin import BaseField\nfrom dataclasses import dataclass\n\n@dataclass\nclass CustomField(BaseField):\n    render_function_key: str = \"mycustomkey\"\n    form_template: str = \"forms/custom.html\"\n    display_template: str = \"displays/custom.html\"\n</code></pre>"},{"location":"advanced/custom-field/#data-processing","title":"Data processing","text":"<p>For data processing you will need to override two functions:</p> <ul> <li><code>process_form_data</code>:  Will be call when converting field value into python dict object</li> <li><code>serialize_field_value</code>: Will be call when serializing value to send through the API. This is the same data you will get in your render function</li> </ul> <pre><code>from dataclasses import dataclass\nfrom typing import Any, Dict\n\nfrom requests import Request\nfrom starlette.datastructures import FormData\nfrom starlette_admin import BaseField\n\n\n@dataclass\nclass CustomField(BaseField):\n    render_function_key: str = \"mycustomkey\"\n    form_template: str = \"forms/custom.html\"\n    display_template: str = \"displays/custom.html\"\n\n    async def parse_form_data(self, request: Request, form_data: FormData) -&gt; Any:\n        return form_data.get(self.name)\n\n    async def serialize_value(self, request: Request, value: Any, action: RequestAction) -&gt; Any:\n        return value\n\n    def dict(self) -&gt; Dict[str, Any]:\n        return super().dict()\n</code></pre> <p>Important</p> <p>Override <code>dict</code> function to get control of the options which is available in javascript.</p>"},{"location":"alternatives/","title":"Alternatives, Inspiration and Comparisons","text":"<ul> <li>Flask-Admin: Simple and extensible administrative interface framework for Flask. The main goal of this project is to provide similar tool for Starlette/FastApi.</li> <li>FastApi-Admin: A fast admin dashboard based on FastAPI and TortoiseORM.</li> <li>sqladmin: SQLAlchemy Admin for FastAPI and Starlette</li> </ul>"},{"location":"api/actions/","title":"Actions","text":""},{"location":"api/actions/#starlette_admin.actions","title":"<code>starlette_admin.actions</code>","text":""},{"location":"api/actions/#starlette_admin.actions.action","title":"<code>action(name, text, confirmation=None, submit_btn_class='btn-primary', submit_btn_text=_('Yes, Proceed'), icon_class=None, form=None, custom_response=False)</code>","text":"<p>Decorator to add custom batch actions to your ModelView</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>unique action name for your ModelView</p> required <code>text</code> <code>str</code> <p>Action text</p> required <code>confirmation</code> <code>Optional[str]</code> <p>Confirmation text. If not provided, action will be executed           unconditionally.</p> <code>None</code> <code>submit_btn_text</code> <code>Optional[str]</code> <p>Submit button text</p> <code>lazy_gettext('Yes, Proceed')</code> <code>submit_btn_class</code> <code>Optional[str]</code> <p>Submit button variant (ex. <code>btn-primary</code>, <code>btn-ghost-info</code>,     <code>btn-outline-danger</code>, ...)</p> <code>'btn-primary'</code> <code>icon_class</code> <code>Optional[str]</code> <p>Icon class (ex. <code>fa-lite fa-folder</code>, <code>fa-duotone fa-circle-right</code>, ...)</p> <code>None</code> <code>form</code> <code>Optional[str]</code> <p>Custom form to collect data from user</p> <code>None</code> <code>custom_response</code> <code>Optional[bool]</code> <p>Set to True when you want to return a custom Starlette response from your action instead of a string.</p> <code>False</code> <p>Usage</p> <pre><code>class ArticleView(ModelView):\n    actions = ['make_published', 'redirect']\n\n    @action(\n        name=\"make_published\",\n        text=\"Mark selected articles as published\",\n        confirmation=\"Are you sure you want to mark selected articles as published ?\",\n        submit_btn_text=\"Yes, proceed\",\n        submit_btn_class=\"btn-success\",\n        form='''\n        &lt;form&gt;\n            &lt;div class=\"mt-3\"&gt;\n                &lt;input type=\"text\" class=\"form-control\" name=\"example-text-input\" placeholder=\"Enter value\"&gt;\n            &lt;/div&gt;\n        &lt;/form&gt;\n        '''\n    )\n    async def make_published_action(self, request: Request, pks: List[Any]) -&gt; str:\n        # Write your logic here\n\n        data: FormData =  await request.form()\n        user_input = data.get(\"example-text-input\")\n\n        if ... :\n            # Display meaningfully error\n            raise ActionFailed(\"Sorry, We can't proceed this action now.\")\n        # Display successfully message\n        return \"{} articles were successfully marked as published\".format(len(pks))\n\n    # For custom response\n    @action(\n        name=\"redirect\",\n        text=\"Redirect\",\n        custom_response=True,\n        confirmation=\"Fill the form\",\n        form='''\n        &lt;form&gt;\n            &lt;div class=\"mt-3\"&gt;\n                &lt;input type=\"text\" class=\"form-control\" name=\"value\" placeholder=\"Enter value\"&gt;\n            &lt;/div&gt;\n        &lt;/form&gt;\n        '''\n     )\n    async def redirect_action(self, request: Request, pks: List[Any]) -&gt; Response:\n        data = await request.form()\n        return RedirectResponse(f\"https://example.com/?value={data['value']}\")\n</code></pre> Source code in <code>starlette_admin/actions.py</code> <pre><code>def action(\n    name: str,\n    text: str,\n    confirmation: Optional[str] = None,\n    submit_btn_class: Optional[str] = \"btn-primary\",\n    submit_btn_text: Optional[str] = _(\"Yes, Proceed\"),\n    icon_class: Optional[str] = None,\n    form: Optional[str] = None,\n    custom_response: Optional[bool] = False,\n) -&gt; Callable[[Callable[..., Awaitable[str]]], Any]:\n    \"\"\"\n    Decorator to add custom batch actions to your [ModelView][starlette_admin.views.BaseModelView]\n\n    Args:\n        name: unique action name for your ModelView\n        text: Action text\n        confirmation: Confirmation text. If not provided, action will be executed\n                      unconditionally.\n        submit_btn_text: Submit button text\n        submit_btn_class: Submit button variant (ex. `btn-primary`, `btn-ghost-info`,\n                `btn-outline-danger`, ...)\n        icon_class: Icon class (ex. `fa-lite fa-folder`, `fa-duotone fa-circle-right`, ...)\n        form: Custom form to collect data from user\n        custom_response: Set to True when you want to return a custom Starlette response\n            from your action instead of a string.\n\n\n    !!! usage\n\n        ```python\n        class ArticleView(ModelView):\n            actions = ['make_published', 'redirect']\n\n            @action(\n                name=\"make_published\",\n                text=\"Mark selected articles as published\",\n                confirmation=\"Are you sure you want to mark selected articles as published ?\",\n                submit_btn_text=\"Yes, proceed\",\n                submit_btn_class=\"btn-success\",\n                form='''\n                &lt;form&gt;\n                    &lt;div class=\"mt-3\"&gt;\n                        &lt;input type=\"text\" class=\"form-control\" name=\"example-text-input\" placeholder=\"Enter value\"&gt;\n                    &lt;/div&gt;\n                &lt;/form&gt;\n                '''\n            )\n            async def make_published_action(self, request: Request, pks: List[Any]) -&gt; str:\n                # Write your logic here\n\n                data: FormData =  await request.form()\n                user_input = data.get(\"example-text-input\")\n\n                if ... :\n                    # Display meaningfully error\n                    raise ActionFailed(\"Sorry, We can't proceed this action now.\")\n                # Display successfully message\n                return \"{} articles were successfully marked as published\".format(len(pks))\n\n            # For custom response\n            @action(\n                name=\"redirect\",\n                text=\"Redirect\",\n                custom_response=True,\n                confirmation=\"Fill the form\",\n                form='''\n                &lt;form&gt;\n                    &lt;div class=\"mt-3\"&gt;\n                        &lt;input type=\"text\" class=\"form-control\" name=\"value\" placeholder=\"Enter value\"&gt;\n                    &lt;/div&gt;\n                &lt;/form&gt;\n                '''\n             )\n            async def redirect_action(self, request: Request, pks: List[Any]) -&gt; Response:\n                data = await request.form()\n                return RedirectResponse(f\"https://example.com/?value={data['value']}\")\n        ```\n    \"\"\"\n\n    def wrap(f: Callable[..., Awaitable[str]]) -&gt; Callable[..., Awaitable[str]]:\n        f._action = {  # type: ignore\n            \"name\": name,\n            \"text\": text,\n            \"confirmation\": confirmation,\n            \"submit_btn_text\": submit_btn_text,\n            \"submit_btn_class\": submit_btn_class,\n            \"icon_class\": icon_class,\n            \"form\": form if form is not None else \"\",\n            \"custom_response\": custom_response,\n        }\n        return f\n\n    return wrap\n</code></pre>"},{"location":"api/actions/#starlette_admin.actions.row_action","title":"<code>row_action(name, text, confirmation=None, action_btn_class=None, submit_btn_class='btn-primary', submit_btn_text=_('Yes, Proceed'), icon_class=None, form=None, custom_response=False, exclude_from_list=False, exclude_from_detail=False)</code>","text":"<p>Decorator to add custom row actions to your ModelView</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>Unique row action name for the ModelView.</p> required <code>text</code> <code>str</code> <p>Action text displayed to users.</p> required <code>confirmation</code> <code>Optional[str]</code> <p>Confirmation text; if provided, the action will require confirmation.</p> <code>None</code> <code>action_btn_class</code> <code>Optional[str]</code> <p>Action button variant for detail page (ex. <code>btn-success</code>, <code>btn-outline</code>, ...)</p> <code>None</code> <code>submit_btn_class</code> <code>Optional[str]</code> <p>Submit button variant (ex. <code>btn-primary</code>, <code>btn-ghost-info</code>, <code>btn-outline-danger</code>, ...)</p> <code>'btn-primary'</code> <code>submit_btn_text</code> <code>Optional[str]</code> <p>Text for the submit button.</p> <code>lazy_gettext('Yes, Proceed')</code> <code>icon_class</code> <code>Optional[str]</code> <p>Icon class (ex. <code>fa-lite fa-folder</code>, <code>fa-duotone fa-circle-right</code>, ...)</p> <code>None</code> <code>form</code> <code>Optional[str]</code> <p>Custom HTML to collect data from the user.</p> <code>None</code> <code>custom_response</code> <code>Optional[bool]</code> <p>Set to True when you want to return a custom Starlette response from your action instead of a string.</p> <code>False</code> <code>exclude_from_list</code> <code>bool</code> <p>Set to True to exclude the action from the list view.</p> <code>False</code> <code>exclude_from_detail</code> <code>bool</code> <p>Set to True to exclude the action from the detail view.</p> <code>False</code> <p>Usage</p> <pre><code>@row_action(\n    name=\"make_published\",\n    text=\"Mark as published\",\n    confirmation=\"Are you sure you want to mark this article as published ?\",\n    icon_class=\"fas fa-check-circle\",\n    submit_btn_text=\"Yes, proceed\",\n    submit_btn_class=\"btn-success\",\n    action_btn_class=\"btn-info\",\n)\nasync def make_published_row_action(self, request: Request, pk: Any) -&gt; str:\n    session: Session = request.state.session\n    article = await self.find_by_pk(request, pk)\n    if article.status == Status.Published:\n        raise ActionFailed(\"The article is already marked as published.\")\n    article.status = Status.Published\n    session.add(article)\n    session.commit()\n    return f\"The article was successfully marked as published.\"\n</code></pre> Source code in <code>starlette_admin/actions.py</code> <pre><code>def row_action(\n    name: str,\n    text: str,\n    confirmation: Optional[str] = None,\n    action_btn_class: Optional[str] = None,\n    submit_btn_class: Optional[str] = \"btn-primary\",\n    submit_btn_text: Optional[str] = _(\"Yes, Proceed\"),\n    icon_class: Optional[str] = None,\n    form: Optional[str] = None,\n    custom_response: Optional[bool] = False,\n    exclude_from_list: bool = False,\n    exclude_from_detail: bool = False,\n) -&gt; Callable[[Callable[..., Awaitable[str]]], Any]:\n    \"\"\"\n    Decorator to add custom row actions to your [ModelView][starlette_admin.views.BaseModelView]\n\n    Args:\n        name: Unique row action name for the ModelView.\n        text: Action text displayed to users.\n        confirmation: Confirmation text; if provided, the action will require confirmation.\n        action_btn_class: Action button variant for detail page (ex. `btn-success`, `btn-outline`, ...)\n        submit_btn_class: Submit button variant (ex. `btn-primary`, `btn-ghost-info`, `btn-outline-danger`, ...)\n        submit_btn_text: Text for the submit button.\n        icon_class: Icon class (ex. `fa-lite fa-folder`, `fa-duotone fa-circle-right`, ...)\n        form: Custom HTML to collect data from the user.\n        custom_response: Set to True when you want to return a custom Starlette response\n            from your action instead of a string.\n        exclude_from_list: Set to True to exclude the action from the list view.\n        exclude_from_detail: Set to True to exclude the action from the detail view.\n\n\n    !!! usage\n\n        ```python\n        @row_action(\n            name=\"make_published\",\n            text=\"Mark as published\",\n            confirmation=\"Are you sure you want to mark this article as published ?\",\n            icon_class=\"fas fa-check-circle\",\n            submit_btn_text=\"Yes, proceed\",\n            submit_btn_class=\"btn-success\",\n            action_btn_class=\"btn-info\",\n        )\n        async def make_published_row_action(self, request: Request, pk: Any) -&gt; str:\n            session: Session = request.state.session\n            article = await self.find_by_pk(request, pk)\n            if article.status == Status.Published:\n                raise ActionFailed(\"The article is already marked as published.\")\n            article.status = Status.Published\n            session.add(article)\n            session.commit()\n            return f\"The article was successfully marked as published.\"\n        ```\n    \"\"\"\n\n    def wrap(f: Callable[..., Awaitable[str]]) -&gt; Callable[..., Awaitable[str]]:\n        f._row_action = {  # type: ignore\n            \"name\": name,\n            \"text\": text,\n            \"confirmation\": confirmation,\n            \"action_btn_class\": action_btn_class,\n            \"submit_btn_text\": submit_btn_text,\n            \"submit_btn_class\": submit_btn_class,\n            \"icon_class\": icon_class,\n            \"form\": form if form is not None else \"\",\n            \"custom_response\": custom_response,\n            \"exclude_from_list\": exclude_from_list,\n            \"exclude_from_detail\": exclude_from_detail,\n        }\n        return f\n\n    return wrap\n</code></pre>"},{"location":"api/actions/#starlette_admin.actions.link_row_action","title":"<code>link_row_action(name, text, action_btn_class=None, icon_class=None, exclude_from_list=False, exclude_from_detail=False)</code>","text":"<p>Decorator to add custom row link actions to a ModelView for URL redirection.</p> <p>Note</p> <p>This decorator is designed to create row actions that redirect to a URL, making it ideal for cases where a row action should simply navigate users to a website or internal page.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>Unique row action name for the ModelView.</p> required <code>text</code> <code>str</code> <p>Action text displayed to users.</p> required <code>action_btn_class</code> <code>Optional[str]</code> <p>Action button variant for detail page (ex. <code>btn-success</code>, <code>btn-outline</code>, ...)</p> <code>None</code> <code>icon_class</code> <code>Optional[str]</code> <p>Icon class (ex. <code>fa-lite fa-folder</code>, <code>fa-duotone fa-circle-right</code>, ...)</p> <code>None</code> <code>exclude_from_list</code> <code>bool</code> <p>Set to True to exclude the action from the list view.</p> <code>False</code> <code>exclude_from_detail</code> <code>bool</code> <p>Set to True to exclude the action from the detail view.</p> <code>False</code> <p>Usage</p> <pre><code>@link_row_action(\n    name=\"go_to_example\",\n    text=\"Go to example.com\",\n    icon_class=\"fas fa-arrow-up-right-from-square\",\n)\ndef go_to_example_row_action(self, request: Request, pk: Any) -&gt; str:\n    return f\"https://example.com/?pk={pk}\"\n</code></pre> Source code in <code>starlette_admin/actions.py</code> <pre><code>def link_row_action(\n    name: str,\n    text: str,\n    action_btn_class: Optional[str] = None,\n    icon_class: Optional[str] = None,\n    exclude_from_list: bool = False,\n    exclude_from_detail: bool = False,\n) -&gt; Callable[[Callable[..., str]], Any]:\n    \"\"\"\n    Decorator to add custom row link actions to a ModelView for URL redirection.\n\n    !!! note\n\n        This decorator is designed to create row actions that redirect to a URL, making it ideal for cases where a\n        row action should simply navigate users to a website or internal page.\n\n    Args:\n        name: Unique row action name for the ModelView.\n        text: Action text displayed to users.\n        action_btn_class: Action button variant for detail page (ex. `btn-success`, `btn-outline`, ...)\n        icon_class: Icon class (ex. `fa-lite fa-folder`, `fa-duotone fa-circle-right`, ...)\n        exclude_from_list: Set to True to exclude the action from the list view.\n        exclude_from_detail: Set to True to exclude the action from the detail view.\n\n\n    !!! usage\n\n        ```python\n        @link_row_action(\n            name=\"go_to_example\",\n            text=\"Go to example.com\",\n            icon_class=\"fas fa-arrow-up-right-from-square\",\n        )\n        def go_to_example_row_action(self, request: Request, pk: Any) -&gt; str:\n            return f\"https://example.com/?pk={pk}\"\n        ```\n\n    \"\"\"\n\n    def wrap(f: Callable[..., str]) -&gt; Callable[..., str]:\n        f._row_action = {  # type: ignore\n            \"name\": name,\n            \"text\": text,\n            \"action_btn_class\": action_btn_class,\n            \"icon_class\": icon_class,\n            \"is_link\": True,\n            \"exclude_from_list\": exclude_from_list,\n            \"exclude_from_detail\": exclude_from_detail,\n        }\n        return f\n\n    return wrap\n</code></pre>"},{"location":"api/auth/","title":"Auth","text":""},{"location":"api/auth/#starlette_admin.auth","title":"<code>starlette_admin.auth</code>","text":""},{"location":"api/auth/#starlette_admin.auth.BaseAuthProvider","title":"<code>BaseAuthProvider</code>","text":"<p>               Bases: <code>ABC</code></p> <p>Base class for implementing the Authentication into your admin interface</p> <p>Parameters:</p> Name Type Description Default <code>login_path</code> <code>str</code> <p>The path for the login page.</p> <code>'/login'</code> <code>logout_path</code> <code>str</code> <p>The path for the logout page.</p> <code>'/logout'</code> <code>allow_paths</code> <code>Optional[Sequence[str]]</code> <p>A list of paths that are allowed without authentication.</p> <code>None</code> <code>allow_routes</code> <code>Optional[Sequence[str]]</code> <p>A list of route names that are allowed without authentication.</p> <code>None</code> Warning <ul> <li>The usage of <code>allow_paths</code> is deprecated. It is recommended to use <code>allow_routes</code>   that specifies the route names instead.</li> </ul> Source code in <code>starlette_admin/auth.py</code> <pre><code>class BaseAuthProvider(ABC):\n    \"\"\"\n    Base class for implementing the Authentication into your admin interface\n\n    Args:\n        login_path: The path for the login page.\n        logout_path: The path for the logout page.\n        allow_paths: A list of paths that are allowed without authentication.\n        allow_routes: A list of route names that are allowed without authentication.\n\n    Warning:\n        - The usage of `allow_paths` is deprecated. It is recommended to use `allow_routes`\n          that specifies the route names instead.\n\n    \"\"\"\n\n    def __init__(\n        self,\n        login_path: str = \"/login\",\n        logout_path: str = \"/logout\",\n        allow_paths: Optional[Sequence[str]] = None,\n        allow_routes: Optional[Sequence[str]] = None,\n    ) -&gt; None:\n        self.login_path = login_path\n        self.logout_path = logout_path\n        self.allow_paths = allow_paths\n        self.allow_routes = allow_routes\n\n        if allow_paths:\n            warnings.warn(\n                \"`allow_paths` is deprecated. Use `allow_routes` instead.\",\n                DeprecationWarning,\n                stacklevel=2,\n            )\n\n    @abstractmethod\n    def setup_admin(self, admin: \"BaseAdmin\") -&gt; None:\n        \"\"\"\n        This method is an abstract method that must be implemented in subclasses.\n        It allows custom configuration and setup of the admin interface\n        related to authentication and authorization.\n        \"\"\"\n        raise NotImplementedError()\n\n    def get_middleware(self, admin: \"BaseAdmin\") -&gt; Middleware:\n        \"\"\"\n        This method returns the authentication middleware required for the admin interface\n        to enable authentication\n        \"\"\"\n        return Middleware(AuthMiddleware, provider=self)\n\n    async def is_authenticated(self, request: Request) -&gt; bool:\n        \"\"\"\n        This method will be called to validate each incoming request.\n        You can also save the connected user information into the\n        request state and use it later to restrict access to some part\n        of your admin interface\n\n        Returns:\n            True: to accept the request\n            False: to redirect to login page\n\n        Examples:\n            ```python\n            async def is_authenticated(self, request: Request) -&gt; bool:\n                if request.session.get(\"username\", None) in users:\n                    # Save user object in state\n                    request.state.user = my_users_db.get(request.session[\"username\"])\n                    return True\n                return False\n            ```\n        \"\"\"\n        return False\n\n    def get_admin_config(self, request: Request) -&gt; Optional[AdminConfig]:\n        \"\"\"\n        Override this method to display custom `logo_url` and/or `app_title`\n\n        Returns:\n            AdminConfig: The admin interface config\n\n        Examples:\n            ```python\n            def get_admin_config(self, request: Request) -&gt; AdminConfig:\n                user = request.state.user  # Retrieve current user (previously saved in the request state)\n                return AdminConfig(\n                    logo_url=request.url_for(\"static\", path=user[\"company_logo_url\"]),\n                )\n            ```\n\n            ```python\n            def get_admin_config(self, request: Request) -&gt; AdminConfig:\n                user = request.state.user  # Retrieve current user (previously saved in the request state)\n                return AdminConfig(\n                    app_title=\"Hello, \" + user[\"name\"] + \"!\",\n                )\n            ```\n        \"\"\"\n        return None  # pragma: no cover\n\n    def get_admin_user(self, request: Request) -&gt; Optional[AdminUser]:\n        \"\"\"\n        Override this method to display connected user `name` and/or `profile`\n\n        Returns:\n            AdminUser: The connected user info\n\n        Examples:\n            ```python\n            def get_admin_user(self, request: Request) -&gt; AdminUser:\n                user = request.state.user  # Retrieve current user (previously saved in the request state)\n                return AdminUser(username=user[\"name\"], photo_url=user[\"photo_url\"])\n            ```\n        \"\"\"\n        return None  # pragma: no cover\n</code></pre>"},{"location":"api/auth/#starlette_admin.auth.BaseAuthProvider.get_admin_config","title":"<code>get_admin_config(request)</code>","text":"<p>Override this method to display custom <code>logo_url</code> and/or <code>app_title</code></p> <p>Returns:</p> Name Type Description <code>AdminConfig</code> <code>Optional[AdminConfig]</code> <p>The admin interface config</p> <p>Examples:</p> <pre><code>def get_admin_config(self, request: Request) -&gt; AdminConfig:\n    user = request.state.user  # Retrieve current user (previously saved in the request state)\n    return AdminConfig(\n        logo_url=request.url_for(\"static\", path=user[\"company_logo_url\"]),\n    )\n</code></pre> <pre><code>def get_admin_config(self, request: Request) -&gt; AdminConfig:\n    user = request.state.user  # Retrieve current user (previously saved in the request state)\n    return AdminConfig(\n        app_title=\"Hello, \" + user[\"name\"] + \"!\",\n    )\n</code></pre> Source code in <code>starlette_admin/auth.py</code> <pre><code>def get_admin_config(self, request: Request) -&gt; Optional[AdminConfig]:\n    \"\"\"\n    Override this method to display custom `logo_url` and/or `app_title`\n\n    Returns:\n        AdminConfig: The admin interface config\n\n    Examples:\n        ```python\n        def get_admin_config(self, request: Request) -&gt; AdminConfig:\n            user = request.state.user  # Retrieve current user (previously saved in the request state)\n            return AdminConfig(\n                logo_url=request.url_for(\"static\", path=user[\"company_logo_url\"]),\n            )\n        ```\n\n        ```python\n        def get_admin_config(self, request: Request) -&gt; AdminConfig:\n            user = request.state.user  # Retrieve current user (previously saved in the request state)\n            return AdminConfig(\n                app_title=\"Hello, \" + user[\"name\"] + \"!\",\n            )\n        ```\n    \"\"\"\n    return None  # pragma: no cover\n</code></pre>"},{"location":"api/auth/#starlette_admin.auth.BaseAuthProvider.get_admin_user","title":"<code>get_admin_user(request)</code>","text":"<p>Override this method to display connected user <code>name</code> and/or <code>profile</code></p> <p>Returns:</p> Name Type Description <code>AdminUser</code> <code>Optional[AdminUser]</code> <p>The connected user info</p> <p>Examples:</p> <pre><code>def get_admin_user(self, request: Request) -&gt; AdminUser:\n    user = request.state.user  # Retrieve current user (previously saved in the request state)\n    return AdminUser(username=user[\"name\"], photo_url=user[\"photo_url\"])\n</code></pre> Source code in <code>starlette_admin/auth.py</code> <pre><code>def get_admin_user(self, request: Request) -&gt; Optional[AdminUser]:\n    \"\"\"\n    Override this method to display connected user `name` and/or `profile`\n\n    Returns:\n        AdminUser: The connected user info\n\n    Examples:\n        ```python\n        def get_admin_user(self, request: Request) -&gt; AdminUser:\n            user = request.state.user  # Retrieve current user (previously saved in the request state)\n            return AdminUser(username=user[\"name\"], photo_url=user[\"photo_url\"])\n        ```\n    \"\"\"\n    return None  # pragma: no cover\n</code></pre>"},{"location":"api/auth/#starlette_admin.auth.BaseAuthProvider.get_middleware","title":"<code>get_middleware(admin)</code>","text":"<p>This method returns the authentication middleware required for the admin interface to enable authentication</p> Source code in <code>starlette_admin/auth.py</code> <pre><code>def get_middleware(self, admin: \"BaseAdmin\") -&gt; Middleware:\n    \"\"\"\n    This method returns the authentication middleware required for the admin interface\n    to enable authentication\n    \"\"\"\n    return Middleware(AuthMiddleware, provider=self)\n</code></pre>"},{"location":"api/auth/#starlette_admin.auth.BaseAuthProvider.is_authenticated","title":"<code>is_authenticated(request)</code>  <code>async</code>","text":"<p>This method will be called to validate each incoming request. You can also save the connected user information into the request state and use it later to restrict access to some part of your admin interface</p> <p>Returns:</p> Name Type Description <code>True</code> <code>bool</code> <p>to accept the request</p> <code>False</code> <code>bool</code> <p>to redirect to login page</p> <p>Examples:</p> <pre><code>async def is_authenticated(self, request: Request) -&gt; bool:\n    if request.session.get(\"username\", None) in users:\n        # Save user object in state\n        request.state.user = my_users_db.get(request.session[\"username\"])\n        return True\n    return False\n</code></pre> Source code in <code>starlette_admin/auth.py</code> <pre><code>async def is_authenticated(self, request: Request) -&gt; bool:\n    \"\"\"\n    This method will be called to validate each incoming request.\n    You can also save the connected user information into the\n    request state and use it later to restrict access to some part\n    of your admin interface\n\n    Returns:\n        True: to accept the request\n        False: to redirect to login page\n\n    Examples:\n        ```python\n        async def is_authenticated(self, request: Request) -&gt; bool:\n            if request.session.get(\"username\", None) in users:\n                # Save user object in state\n                request.state.user = my_users_db.get(request.session[\"username\"])\n                return True\n            return False\n        ```\n    \"\"\"\n    return False\n</code></pre>"},{"location":"api/auth/#starlette_admin.auth.BaseAuthProvider.setup_admin","title":"<code>setup_admin(admin)</code>  <code>abstractmethod</code>","text":"<p>This method is an abstract method that must be implemented in subclasses. It allows custom configuration and setup of the admin interface related to authentication and authorization.</p> Source code in <code>starlette_admin/auth.py</code> <pre><code>@abstractmethod\ndef setup_admin(self, admin: \"BaseAdmin\") -&gt; None:\n    \"\"\"\n    This method is an abstract method that must be implemented in subclasses.\n    It allows custom configuration and setup of the admin interface\n    related to authentication and authorization.\n    \"\"\"\n    raise NotImplementedError()\n</code></pre>"},{"location":"api/auth/#starlette_admin.auth.AuthProvider","title":"<code>AuthProvider</code>","text":"<p>               Bases: <code>BaseAuthProvider</code></p> Source code in <code>starlette_admin/auth.py</code> <pre><code>class AuthProvider(BaseAuthProvider):\n    async def login(\n        self,\n        username: str,\n        password: str,\n        remember_me: bool,\n        request: Request,\n        response: Response,\n    ) -&gt; Response:\n        \"\"\"\n        This method will be called to validate user credentials\n\n        Returns:\n            response: return the response back\n\n        Raises:\n            FormValidationError: when form values is not valid\n            LoginFailed: to display general error\n\n        Examples:\n            ```python\n            async def login(\n                self,\n                username: str,\n                password: str,\n                remember_me: bool,\n                request: Request,\n                response: Response,\n            ) -&gt; Response:\n                if len(username) &lt; 3:\n                    # Form data validation\n                    raise FormValidationError(\n                        {\"username\": \"Ensure username has at least 03 characters\"}\n                    )\n\n                if username in my_users_db and password == \"password\":\n                    # Save username in session\n                    request.session.update({\"username\": username})\n                    return response\n\n                raise LoginFailed(\"Invalid username or password\")\n            ```\n        \"\"\"\n        raise LoginFailed(\"Not Implemented\")\n\n    async def logout(self, request: Request, response: Response) -&gt; Response:\n        \"\"\"\n        Implement logout logic (clear sessions, cookies, ...) here\n        and return the response back\n\n        Returns:\n            response: return the response back\n\n        Examples:\n            ```python\n            async def logout(self, request: Request, response: Response) -&gt; Response:\n                request.session.clear()\n                return response\n            ```\n        \"\"\"\n        raise NotImplementedError()\n\n    async def render_login(self, request: Request, admin: \"BaseAdmin\") -&gt; Response:\n        \"\"\"Render the default login page for username &amp; password authentication.\"\"\"\n        if request.method == \"GET\":\n            return admin.templates.TemplateResponse(\n                request=request,\n                name=\"login.html\",\n                context={\"_is_login_path\": True},\n            )\n        form = await request.form()\n        try:\n            return await self.login(\n                form.get(\"username\"),  # type: ignore\n                form.get(\"password\"),  # type: ignore\n                form.get(\"remember_me\") == \"on\",\n                request,\n                RedirectResponse(\n                    request.query_params.get(\"next\")\n                    or request.url_for(admin.route_name + \":index\"),\n                    status_code=HTTP_303_SEE_OTHER,\n                ),\n            )\n        except FormValidationError as errors:\n            return admin.templates.TemplateResponse(\n                request=request,\n                name=\"login.html\",\n                context={\"form_errors\": errors, \"_is_login_path\": True},\n                status_code=HTTP_422_UNPROCESSABLE_ENTITY,\n            )\n        except LoginFailed as error:\n            return admin.templates.TemplateResponse(\n                request=request,\n                name=\"login.html\",\n                context={\"error\": error.msg, \"_is_login_path\": True},\n                status_code=HTTP_400_BAD_REQUEST,\n            )\n\n    async def render_logout(self, request: Request, admin: \"BaseAdmin\") -&gt; Response:\n        \"\"\"Render the default logout page.\"\"\"\n        return await self.logout(\n            request,\n            RedirectResponse(\n                request.url_for(admin.route_name + \":index\"),\n                status_code=HTTP_303_SEE_OTHER,\n            ),\n        )\n\n    def get_login_route(self, admin: \"BaseAdmin\") -&gt; Route:\n        \"\"\"\n        Get the login route for the admin interface.\n        \"\"\"\n        return Route(\n            self.login_path,\n            wrap_endpoint_with_kwargs(self.render_login, admin=admin),\n            methods=[\"GET\", \"POST\"],\n        )\n\n    def get_logout_route(self, admin: \"BaseAdmin\") -&gt; Route:\n        \"\"\"\n        Get the logout route for the admin interface.\n        \"\"\"\n        return Route(\n            self.logout_path,\n            wrap_endpoint_with_kwargs(self.render_logout, admin=admin),\n            methods=[\"GET\"],\n        )\n\n    def setup_admin(self, admin: \"BaseAdmin\") -&gt; None:\n        \"\"\"\n        Set up the admin interface by adding necessary middleware and routes.\n        \"\"\"\n        admin.middlewares.append(self.get_middleware(admin=admin))\n        login_route = self.get_login_route(admin=admin)\n        logout_route = self.get_logout_route(admin=admin)\n        login_route.name = \"login\"\n        logout_route.name = \"logout\"\n        admin.routes.extend([login_route, logout_route])\n</code></pre>"},{"location":"api/auth/#starlette_admin.auth.AuthProvider.get_login_route","title":"<code>get_login_route(admin)</code>","text":"<p>Get the login route for the admin interface.</p> Source code in <code>starlette_admin/auth.py</code> <pre><code>def get_login_route(self, admin: \"BaseAdmin\") -&gt; Route:\n    \"\"\"\n    Get the login route for the admin interface.\n    \"\"\"\n    return Route(\n        self.login_path,\n        wrap_endpoint_with_kwargs(self.render_login, admin=admin),\n        methods=[\"GET\", \"POST\"],\n    )\n</code></pre>"},{"location":"api/auth/#starlette_admin.auth.AuthProvider.get_logout_route","title":"<code>get_logout_route(admin)</code>","text":"<p>Get the logout route for the admin interface.</p> Source code in <code>starlette_admin/auth.py</code> <pre><code>def get_logout_route(self, admin: \"BaseAdmin\") -&gt; Route:\n    \"\"\"\n    Get the logout route for the admin interface.\n    \"\"\"\n    return Route(\n        self.logout_path,\n        wrap_endpoint_with_kwargs(self.render_logout, admin=admin),\n        methods=[\"GET\"],\n    )\n</code></pre>"},{"location":"api/auth/#starlette_admin.auth.AuthProvider.login","title":"<code>login(username, password, remember_me, request, response)</code>  <code>async</code>","text":"<p>This method will be called to validate user credentials</p> <p>Returns:</p> Name Type Description <code>response</code> <code>Response</code> <p>return the response back</p> <p>Raises:</p> Type Description <code>FormValidationError</code> <p>when form values is not valid</p> <code>LoginFailed</code> <p>to display general error</p> <p>Examples:</p> <pre><code>async def login(\n    self,\n    username: str,\n    password: str,\n    remember_me: bool,\n    request: Request,\n    response: Response,\n) -&gt; Response:\n    if len(username) &lt; 3:\n        # Form data validation\n        raise FormValidationError(\n            {\"username\": \"Ensure username has at least 03 characters\"}\n        )\n\n    if username in my_users_db and password == \"password\":\n        # Save username in session\n        request.session.update({\"username\": username})\n        return response\n\n    raise LoginFailed(\"Invalid username or password\")\n</code></pre> Source code in <code>starlette_admin/auth.py</code> <pre><code>async def login(\n    self,\n    username: str,\n    password: str,\n    remember_me: bool,\n    request: Request,\n    response: Response,\n) -&gt; Response:\n    \"\"\"\n    This method will be called to validate user credentials\n\n    Returns:\n        response: return the response back\n\n    Raises:\n        FormValidationError: when form values is not valid\n        LoginFailed: to display general error\n\n    Examples:\n        ```python\n        async def login(\n            self,\n            username: str,\n            password: str,\n            remember_me: bool,\n            request: Request,\n            response: Response,\n        ) -&gt; Response:\n            if len(username) &lt; 3:\n                # Form data validation\n                raise FormValidationError(\n                    {\"username\": \"Ensure username has at least 03 characters\"}\n                )\n\n            if username in my_users_db and password == \"password\":\n                # Save username in session\n                request.session.update({\"username\": username})\n                return response\n\n            raise LoginFailed(\"Invalid username or password\")\n        ```\n    \"\"\"\n    raise LoginFailed(\"Not Implemented\")\n</code></pre>"},{"location":"api/auth/#starlette_admin.auth.AuthProvider.logout","title":"<code>logout(request, response)</code>  <code>async</code>","text":"<p>Implement logout logic (clear sessions, cookies, ...) here and return the response back</p> <p>Returns:</p> Name Type Description <code>response</code> <code>Response</code> <p>return the response back</p> <p>Examples:</p> <pre><code>async def logout(self, request: Request, response: Response) -&gt; Response:\n    request.session.clear()\n    return response\n</code></pre> Source code in <code>starlette_admin/auth.py</code> <pre><code>async def logout(self, request: Request, response: Response) -&gt; Response:\n    \"\"\"\n    Implement logout logic (clear sessions, cookies, ...) here\n    and return the response back\n\n    Returns:\n        response: return the response back\n\n    Examples:\n        ```python\n        async def logout(self, request: Request, response: Response) -&gt; Response:\n            request.session.clear()\n            return response\n        ```\n    \"\"\"\n    raise NotImplementedError()\n</code></pre>"},{"location":"api/auth/#starlette_admin.auth.AuthProvider.render_login","title":"<code>render_login(request, admin)</code>  <code>async</code>","text":"<p>Render the default login page for username &amp; password authentication.</p> Source code in <code>starlette_admin/auth.py</code> <pre><code>async def render_login(self, request: Request, admin: \"BaseAdmin\") -&gt; Response:\n    \"\"\"Render the default login page for username &amp; password authentication.\"\"\"\n    if request.method == \"GET\":\n        return admin.templates.TemplateResponse(\n            request=request,\n            name=\"login.html\",\n            context={\"_is_login_path\": True},\n        )\n    form = await request.form()\n    try:\n        return await self.login(\n            form.get(\"username\"),  # type: ignore\n            form.get(\"password\"),  # type: ignore\n            form.get(\"remember_me\") == \"on\",\n            request,\n            RedirectResponse(\n                request.query_params.get(\"next\")\n                or request.url_for(admin.route_name + \":index\"),\n                status_code=HTTP_303_SEE_OTHER,\n            ),\n        )\n    except FormValidationError as errors:\n        return admin.templates.TemplateResponse(\n            request=request,\n            name=\"login.html\",\n            context={\"form_errors\": errors, \"_is_login_path\": True},\n            status_code=HTTP_422_UNPROCESSABLE_ENTITY,\n        )\n    except LoginFailed as error:\n        return admin.templates.TemplateResponse(\n            request=request,\n            name=\"login.html\",\n            context={\"error\": error.msg, \"_is_login_path\": True},\n            status_code=HTTP_400_BAD_REQUEST,\n        )\n</code></pre>"},{"location":"api/auth/#starlette_admin.auth.AuthProvider.render_logout","title":"<code>render_logout(request, admin)</code>  <code>async</code>","text":"<p>Render the default logout page.</p> Source code in <code>starlette_admin/auth.py</code> <pre><code>async def render_logout(self, request: Request, admin: \"BaseAdmin\") -&gt; Response:\n    \"\"\"Render the default logout page.\"\"\"\n    return await self.logout(\n        request,\n        RedirectResponse(\n            request.url_for(admin.route_name + \":index\"),\n            status_code=HTTP_303_SEE_OTHER,\n        ),\n    )\n</code></pre>"},{"location":"api/auth/#starlette_admin.auth.AuthProvider.setup_admin","title":"<code>setup_admin(admin)</code>","text":"<p>Set up the admin interface by adding necessary middleware and routes.</p> Source code in <code>starlette_admin/auth.py</code> <pre><code>def setup_admin(self, admin: \"BaseAdmin\") -&gt; None:\n    \"\"\"\n    Set up the admin interface by adding necessary middleware and routes.\n    \"\"\"\n    admin.middlewares.append(self.get_middleware(admin=admin))\n    login_route = self.get_login_route(admin=admin)\n    logout_route = self.get_logout_route(admin=admin)\n    login_route.name = \"login\"\n    logout_route.name = \"logout\"\n    admin.routes.extend([login_route, logout_route])\n</code></pre>"},{"location":"api/auth/#starlette_admin.auth.login_not_required","title":"<code>login_not_required(endpoint)</code>","text":"<p>Decorators for endpoints that do not require login.</p> Source code in <code>starlette_admin/auth.py</code> <pre><code>def login_not_required(\n    endpoint: Callable[..., Any],\n) -&gt; Callable[..., Any]:\n    \"\"\"Decorators for endpoints that do not require login.\"\"\"\n\n    endpoint._login_not_required = True  # type: ignore[attr-defined]\n\n    return endpoint\n</code></pre>"},{"location":"api/base-admin/","title":"BaseAdmin","text":"<p>Base class for implementing Admin interface.</p> Source code in <code>starlette_admin/base.py</code> <pre><code>class BaseAdmin:\n    \"\"\"Base class for implementing Admin interface.\"\"\"\n\n    def __init__(\n        self,\n        title: str = _(\"Admin\"),\n        base_url: str = \"/admin\",\n        route_name: str = \"admin\",\n        logo_url: Optional[str] = None,\n        login_logo_url: Optional[str] = None,\n        templates_dir: str = \"templates\",\n        statics_dir: Optional[str] = None,\n        index_view: Optional[CustomView] = None,\n        auth_provider: Optional[BaseAuthProvider] = None,\n        middlewares: Optional[Sequence[Middleware]] = None,\n        debug: bool = False,\n        i18n_config: Optional[I18nConfig] = None,\n        timezone_config: Optional[TimezoneConfig] = None,\n        favicon_url: Optional[str] = None,\n    ):\n        \"\"\"\n        Parameters:\n            title: Admin title.\n            base_url: Base URL for Admin interface.\n            route_name: Mounted Admin name\n            logo_url: URL of logo to be displayed instead of title.\n            login_logo_url: If set, it will be used for login interface instead of logo_url.\n            templates_dir: Templates dir for customisation\n            statics_dir: Statics dir for customisation\n            index_view: CustomView to use for index page.\n            auth_provider: Authentication Provider\n            middlewares: Starlette middlewares\n            i18n_config: i18n configuration\n            timezone_config: timezone configuration\n            favicon_url: URL of favicon.\n        \"\"\"\n        self.title = title\n        self.base_url = base_url\n        self.route_name = route_name\n        self.logo_url = logo_url\n        self.login_logo_url = login_logo_url\n        self.favicon_url = favicon_url\n        self.templates_dir = templates_dir\n        self.statics_dir = statics_dir\n        self.auth_provider = auth_provider\n        self.middlewares = list(middlewares) if middlewares is not None else []\n        self.index_view = (\n            index_view\n            if (index_view is not None)\n            else CustomView(\"\", add_to_menu=False)\n        )\n        self._views: List[BaseView] = []\n        self._models: List[BaseModelView] = []\n        self.routes: List[Union[Route, Mount]] = []\n        self.debug = debug\n        self.i18n_config = i18n_config\n        self.timezone_config = timezone_config\n        self._setup_templates()\n        self.init_locale()\n        self.init_auth()\n        self.init_routes()\n\n    def add_view(self, view: Union[Type[BaseView], BaseView]) -&gt; None:\n        \"\"\"\n        Add View to the Admin interface.\n        \"\"\"\n        view_instance = view if isinstance(view, BaseView) else view()\n        self._views.append(view_instance)\n        self.setup_view(view_instance)\n\n    def custom_render_js(self, request: Request) -&gt; Optional[str]:\n        \"\"\"\n        Override this function to provide a link to custom js to override the\n        global `render` object in javascript which is use to render fields in\n        list page.\n\n        Args:\n            request: Starlette Request\n        \"\"\"\n        return None\n\n    def init_locale(self) -&gt; None:\n        if self.i18n_config is not None:\n            try:\n                import babel  # noqa\n            except ImportError as err:\n                raise ImportError(\n                    \"'babel' package is required to use i18n features.\"\n                    \"Install it with `pip install starlette-admin[i18n]`\"\n                ) from err\n            self.middlewares.insert(\n                0, Middleware(LocaleMiddleware, i18n_config=self.i18n_config)\n            )\n\n        if self.timezone_config is not None:\n            self.middlewares.insert(\n                0, Middleware(TimezoneMiddleware, timezone_config=self.timezone_config)\n            )\n\n    def init_auth(self) -&gt; None:\n        if self.auth_provider is not None:\n            self.auth_provider.setup_admin(self)\n\n    def init_routes(self) -&gt; None:\n        statics = StaticFiles(directory=self.statics_dir, packages=[\"starlette_admin\"])\n        self.routes.extend(\n            [\n                Mount(\"/statics\", app=statics, name=\"statics\"),\n                Route(\n                    self.index_view.path,\n                    self._render_custom_view(self.index_view),\n                    methods=self.index_view.methods,\n                    name=\"index\",\n                ),\n                Route(\n                    \"/api/{identity}\",\n                    self._render_api,\n                    methods=[\"GET\"],\n                    name=\"api\",\n                ),\n                Route(\n                    \"/api/{identity}/action\",\n                    self.handle_action,\n                    methods=[\"GET\", \"POST\"],\n                    name=\"action\",\n                ),\n                Route(\n                    \"/api/{identity}/row-action\",\n                    self.handle_row_action,\n                    methods=[\"GET\", \"POST\"],\n                    name=\"row-action\",\n                ),\n                Route(\n                    \"/{identity}/list\",\n                    self._render_list,\n                    methods=[\"GET\"],\n                    name=\"list\",\n                ),\n                Route(\n                    \"/{identity}/detail/{pk}\",\n                    self._render_detail,\n                    methods=[\"GET\"],\n                    name=\"detail\",\n                ),\n                Route(\n                    \"/{identity}/create\",\n                    self._render_create,\n                    methods=[\"GET\", \"POST\"],\n                    name=\"create\",\n                ),\n                Route(\n                    \"/{identity}/edit/{pk}\",\n                    self._render_edit,\n                    methods=[\"GET\", \"POST\"],\n                    name=\"edit\",\n                ),\n            ]\n        )\n        if self.index_view.add_to_menu:\n            self._views.append(self.index_view)\n\n    def _setup_templates(self) -&gt; None:\n        env = Environment(\n            loader=ChoiceLoader(\n                [\n                    FileSystemLoader(self.templates_dir),\n                    PackageLoader(\"starlette_admin\", \"templates\"),\n                    PrefixLoader(\n                        {\n                            \"@starlette-admin\": PackageLoader(\n                                \"starlette_admin\", \"templates\"\n                            ),\n                        }\n                    ),\n                ]\n            ),\n            extensions=[\"jinja2.ext.i18n\"],\n            autoescape=True,\n        )\n        templates = Jinja2Templates(env=env)\n\n        # globals\n        templates.env.globals[\"views\"] = self._views\n        templates.env.globals[\"app_title\"] = self.title\n        templates.env.globals[\"is_auth_enabled\"] = self.auth_provider is not None\n        templates.env.globals[\"__name__\"] = self.route_name\n        templates.env.globals[\"logo_url\"] = self.logo_url\n        templates.env.globals[\"login_logo_url\"] = self.login_logo_url\n        templates.env.globals[\"favicon_url\"] = self.favicon_url\n        templates.env.globals[\"custom_render_js\"] = lambda r: self.custom_render_js(r)\n        templates.env.globals[\"get_locale\"] = get_locale\n        templates.env.globals[\"get_locale_display_name\"] = get_locale_display_name\n        templates.env.globals[\"i18n_config\"] = self.i18n_config or I18nConfig()\n        templates.env.globals[\"get_timezone\"] = get_timezone\n        templates.env.globals[\"get_timezone_display_name\"] = get_timezone_display_name\n        templates.env.globals[\"timezone_config\"] = self.timezone_config\n        # filters\n        templates.env.filters[\"is_custom_view\"] = lambda r: isinstance(r, CustomView)\n        templates.env.filters[\"is_link\"] = lambda res: isinstance(res, Link)\n        templates.env.filters[\"is_model\"] = lambda res: isinstance(res, BaseModelView)\n        templates.env.filters[\"is_dropdown\"] = lambda res: isinstance(res, DropDown)\n        templates.env.filters[\"get_admin_user\"] = (\n            self.auth_provider.get_admin_user if self.auth_provider else None\n        )\n        templates.env.filters[\"get_admin_config\"] = (\n            self.auth_provider.get_admin_config if self.auth_provider else None\n        )\n        templates.env.filters[\"tojson\"] = lambda data: json.dumps(data, default=str)\n        templates.env.filters[\"file_icon\"] = get_file_icon\n        templates.env.filters[\"to_model\"] = (\n            lambda identity: self._find_model_from_identity(identity)\n        )\n        templates.env.filters[\"is_iter\"] = lambda v: isinstance(v, (list, tuple))\n        templates.env.filters[\"is_str\"] = lambda v: isinstance(v, str)\n        templates.env.filters[\"is_dict\"] = lambda v: isinstance(v, dict)\n        templates.env.filters[\"ra\"] = lambda a: RequestAction(a)\n        # install i18n\n        templates.env.install_gettext_callables(gettext, ngettext, True)  # type: ignore\n        self.templates = templates\n\n    def setup_view(self, view: BaseView) -&gt; None:\n        if isinstance(view, DropDown):\n            for sub_view in view.views:\n                self.setup_view(sub_view)\n        elif isinstance(view, CustomView):\n            self.routes.insert(\n                0,\n                Route(\n                    view.path,\n                    endpoint=self._render_custom_view(view),\n                    methods=view.methods,\n                    name=view.name,\n                ),\n            )\n        elif isinstance(view, BaseModelView):\n            view._find_foreign_model = self._find_model_from_identity\n            self._models.append(view)\n\n    def _find_model_from_identity(self, identity: Optional[str]) -&gt; BaseModelView:\n        if identity is not None:\n            for model in self._models:\n                if model.identity == identity:\n                    return model\n        raise HTTPException(\n            HTTP_404_NOT_FOUND,\n            _(\"Model with identity %(identity)s not found\") % {\"identity\": identity},\n        )\n\n    def _render_custom_view(\n        self, custom_view: CustomView\n    ) -&gt; Callable[[Request], Awaitable[Response]]:\n        async def wrapper(request: Request) -&gt; Response:\n            if not custom_view.is_accessible(request):\n                raise HTTPException(HTTP_403_FORBIDDEN)\n            return await custom_view.render(request, self.templates)\n\n        return wrapper\n\n    async def _render_api(self, request: Request) -&gt; Response:\n        identity = request.path_params.get(\"identity\")\n        model = self._find_model_from_identity(identity)\n        if not model.is_accessible(request):\n            return JSONResponse(None, status_code=HTTP_403_FORBIDDEN)\n        skip = int(request.query_params.get(\"skip\") or \"0\")\n        limit = int(request.query_params.get(\"limit\") or \"100\")\n        order_by = request.query_params.getlist(\"order_by\")\n        where = request.query_params.get(\"where\")\n        pks = request.query_params.getlist(\"pks\")\n        select2 = \"select2\" in request.query_params\n        request.state.action = RequestAction.API if select2 else RequestAction.LIST\n        if len(pks) &gt; 0:\n            items = await model.find_by_pks(request, pks)\n            total = len(items)\n        else:\n            if where is not None:\n                try:\n                    where = json.loads(where)\n                except JSONDecodeError:\n                    where = str(where)\n            items = await model.find_all(\n                request=request,\n                skip=skip,\n                limit=limit,\n                where=where,\n                order_by=order_by,\n            )\n            total = await model.count(request=request, where=where)\n        serialized_items = [\n            (\n                await model.serialize(\n                    item,\n                    request,\n                    RequestAction.API if select2 else RequestAction.LIST,\n                    include_relationships=not select2,\n                    include_select2=select2,\n                )\n            )\n            for item in items\n        ]\n\n        if not select2:\n            # Add row actions for datatables\n            row_actions = await model.get_all_row_actions(request)\n            assert model.pk_attr\n            for serialized_item in serialized_items:\n                serialized_item[\"_meta\"][\"rowActions\"] = self.templates.get_template(\n                    \"row-actions.html\"\n                ).render(\n                    _actions=row_actions,\n                    display_type=model.row_actions_display_type,\n                    pk=serialized_item[model.pk_attr],\n                    request=request,\n                    model=model,\n                )\n\n        return JSONResponse(\n            {\n                \"items\": serialized_items,\n                \"total\": total,\n            }\n        )\n\n    async def handle_action(self, request: Request) -&gt; Response:\n        request.state.action = RequestAction.ACTION\n        try:\n            identity = request.path_params.get(\"identity\")\n            pks = request.query_params.getlist(\"pks\")\n            name = not_none(request.query_params.get(\"name\"))\n            model = self._find_model_from_identity(identity)\n            if not model.is_accessible(request):\n                raise ActionFailed(\"Forbidden\")\n            handler_return = await model.handle_action(request, pks, name)\n            if isinstance(handler_return, Response):\n                return handler_return\n            return JSONResponse({\"msg\": handler_return})\n        except ActionFailed as exc:\n            return JSONResponse({\"msg\": exc.msg}, status_code=HTTP_400_BAD_REQUEST)\n\n    async def handle_row_action(self, request: Request) -&gt; Response:\n        request.state.action = RequestAction.ROW_ACTION\n        try:\n            identity = request.path_params.get(\"identity\")\n            pk = request.query_params.get(\"pk\")\n            name = not_none(request.query_params.get(\"name\"))\n            model = self._find_model_from_identity(identity)\n            if not model.is_accessible(request):\n                raise ActionFailed(\"Forbidden\")\n            handler_return = await model.handle_row_action(request, pk, name)\n            if isinstance(handler_return, Response):\n                return handler_return\n            return JSONResponse({\"msg\": handler_return})\n        except ActionFailed as exc:\n            return JSONResponse({\"msg\": exc.msg}, status_code=HTTP_400_BAD_REQUEST)\n\n    async def _render_list(self, request: Request) -&gt; Response:\n        request.state.action = RequestAction.LIST\n        identity = request.path_params.get(\"identity\")\n        model = self._find_model_from_identity(identity)\n        if not model.is_accessible(request):\n            raise HTTPException(HTTP_403_FORBIDDEN)\n        return self.templates.TemplateResponse(\n            request=request,\n            name=model.list_template,\n            context={\n                \"model\": model,\n                \"title\": model.title(request),\n                \"_actions\": await model.get_all_actions(request),\n                \"__js_model__\": await model._configs(request),\n            },\n        )\n\n    async def _render_detail(self, request: Request) -&gt; Response:\n        request.state.action = RequestAction.DETAIL\n        identity = request.path_params.get(\"identity\")\n        model = self._find_model_from_identity(identity)\n        if not model.is_accessible(request) or not model.can_view_details(request):\n            raise HTTPException(HTTP_403_FORBIDDEN)\n        pk = request.path_params.get(\"pk\")\n        obj = await model.find_by_pk(request, pk)\n        if obj is None:\n            raise HTTPException(HTTP_404_NOT_FOUND)\n        return self.templates.TemplateResponse(\n            request=request,\n            name=model.detail_template,\n            context={\n                \"title\": model.title(request),\n                \"model\": model,\n                \"raw_obj\": obj,\n                \"_actions\": await model.get_all_row_actions(request),\n                \"obj\": await model.serialize(obj, request, RequestAction.DETAIL),\n            },\n        )\n\n    async def _render_create(self, request: Request) -&gt; Response:\n        request.state.action = RequestAction.CREATE\n        identity = request.path_params.get(\"identity\")\n        model = self._find_model_from_identity(identity)\n        config = {\"title\": model.title(request), \"model\": model}\n        if not model.is_accessible(request) or not model.can_create(request):\n            raise HTTPException(HTTP_403_FORBIDDEN)\n        if request.method == \"GET\":\n            return self.templates.TemplateResponse(\n                request=request,\n                name=model.create_template,\n                context=config,\n            )\n        form = await request.form()\n        dict_obj = await self.form_to_dict(request, form, model, RequestAction.CREATE)\n        try:\n            obj = await model.create(request, dict_obj)\n        except FormValidationError as exc:\n            config.update(\n                {\n                    \"errors\": exc.errors,\n                    \"obj\": dict_obj,\n                }\n            )\n            return self.templates.TemplateResponse(\n                request=request,\n                name=model.create_template,\n                context=config,\n                status_code=HTTP_422_UNPROCESSABLE_ENTITY,\n            )\n        pk = await model.get_pk_value(request, obj)\n        url = request.url_for(self.route_name + \":list\", identity=model.identity)\n        if form.get(\"_continue_editing\", None) is not None:\n            url = request.url_for(\n                self.route_name + \":edit\", identity=model.identity, pk=pk\n            )\n        elif form.get(\"_add_another\", None) is not None:\n            url = request.url\n        return RedirectResponse(url, status_code=HTTP_303_SEE_OTHER)\n\n    async def _render_edit(self, request: Request) -&gt; Response:\n        request.state.action = RequestAction.EDIT\n        identity = request.path_params.get(\"identity\")\n        model = self._find_model_from_identity(identity)\n        if not model.is_accessible(request) or not model.can_edit(request):\n            raise HTTPException(HTTP_403_FORBIDDEN)\n        pk = request.path_params.get(\"pk\")\n        obj = await model.find_by_pk(request, pk)\n        if obj is None:\n            raise HTTPException(HTTP_404_NOT_FOUND)\n        config = {\n            \"title\": model.title(request),\n            \"model\": model,\n            \"raw_obj\": obj,\n            \"obj\": await model.serialize(obj, request, RequestAction.EDIT),\n        }\n        if request.method == \"GET\":\n            return self.templates.TemplateResponse(\n                request=request,\n                name=model.edit_template,\n                context=config,\n            )\n        form = await request.form()\n        dict_obj = await self.form_to_dict(request, form, model, RequestAction.EDIT)\n        try:\n            obj = await model.edit(request, pk, dict_obj)\n        except FormValidationError as exc:\n            config.update(\n                {\n                    \"errors\": exc.errors,\n                    \"obj\": dict_obj,\n                }\n            )\n            return self.templates.TemplateResponse(\n                request=request,\n                name=model.edit_template,\n                context=config,\n                status_code=HTTP_422_UNPROCESSABLE_ENTITY,\n            )\n        pk = await model.get_pk_value(request, obj)\n        url = request.url_for(self.route_name + \":list\", identity=model.identity)\n        if form.get(\"_continue_editing\", None) is not None:\n            url = request.url_for(\n                self.route_name + \":edit\", identity=model.identity, pk=pk\n            )\n        elif form.get(\"_add_another\", None) is not None:\n            url = request.url_for(self.route_name + \":create\", identity=model.identity)\n        return RedirectResponse(url, status_code=HTTP_303_SEE_OTHER)\n\n    async def _render_error(\n        self,\n        request: Request,\n        exc: Exception = HTTPException(status_code=HTTP_500_INTERNAL_SERVER_ERROR),\n    ) -&gt; Response:\n        assert isinstance(exc, HTTPException)\n        return self.templates.TemplateResponse(\n            request=request,\n            name=\"error.html\",\n            context={\"exc\": exc},\n            status_code=exc.status_code,\n        )\n\n    async def form_to_dict(\n        self,\n        request: Request,\n        form_data: FormData,\n        model: BaseModelView,\n        action: RequestAction,\n    ) -&gt; Dict[str, Any]:\n        data = {}\n        for field in model.get_fields_list(request, action):\n            data[field.name] = await field.parse_form_data(request, form_data, action)\n        return data\n\n    def mount_to(\n        self,\n        app: Starlette,\n        redirect_slashes: bool = True,\n    ) -&gt; None:\n        admin_app = Starlette(\n            routes=self.routes,\n            middleware=self.middlewares,\n            debug=self.debug,\n            exception_handlers={HTTPException: self._render_error},\n        )\n        admin_app.state.ROUTE_NAME = self.route_name\n        app.mount(\n            self.base_url,\n            app=admin_app,\n            name=self.route_name,\n        )\n        admin_app.router.redirect_slashes = redirect_slashes\n</code></pre>"},{"location":"api/base-admin/#starlette_admin.base.BaseAdmin.__init__","title":"<code>__init__(title=_('Admin'), base_url='/admin', route_name='admin', logo_url=None, login_logo_url=None, templates_dir='templates', statics_dir=None, index_view=None, auth_provider=None, middlewares=None, debug=False, i18n_config=None, timezone_config=None, favicon_url=None)</code>","text":"<p>Parameters:</p> Name Type Description Default <code>title</code> <code>str</code> <p>Admin title.</p> <code>lazy_gettext('Admin')</code> <code>base_url</code> <code>str</code> <p>Base URL for Admin interface.</p> <code>'/admin'</code> <code>route_name</code> <code>str</code> <p>Mounted Admin name</p> <code>'admin'</code> <code>logo_url</code> <code>Optional[str]</code> <p>URL of logo to be displayed instead of title.</p> <code>None</code> <code>login_logo_url</code> <code>Optional[str]</code> <p>If set, it will be used for login interface instead of logo_url.</p> <code>None</code> <code>templates_dir</code> <code>str</code> <p>Templates dir for customisation</p> <code>'templates'</code> <code>statics_dir</code> <code>Optional[str]</code> <p>Statics dir for customisation</p> <code>None</code> <code>index_view</code> <code>Optional[CustomView]</code> <p>CustomView to use for index page.</p> <code>None</code> <code>auth_provider</code> <code>Optional[BaseAuthProvider]</code> <p>Authentication Provider</p> <code>None</code> <code>middlewares</code> <code>Optional[Sequence[Middleware]]</code> <p>Starlette middlewares</p> <code>None</code> <code>i18n_config</code> <code>Optional[I18nConfig]</code> <p>i18n configuration</p> <code>None</code> <code>timezone_config</code> <code>Optional[TimezoneConfig]</code> <p>timezone configuration</p> <code>None</code> <code>favicon_url</code> <code>Optional[str]</code> <p>URL of favicon.</p> <code>None</code> Source code in <code>starlette_admin/base.py</code> <pre><code>def __init__(\n    self,\n    title: str = _(\"Admin\"),\n    base_url: str = \"/admin\",\n    route_name: str = \"admin\",\n    logo_url: Optional[str] = None,\n    login_logo_url: Optional[str] = None,\n    templates_dir: str = \"templates\",\n    statics_dir: Optional[str] = None,\n    index_view: Optional[CustomView] = None,\n    auth_provider: Optional[BaseAuthProvider] = None,\n    middlewares: Optional[Sequence[Middleware]] = None,\n    debug: bool = False,\n    i18n_config: Optional[I18nConfig] = None,\n    timezone_config: Optional[TimezoneConfig] = None,\n    favicon_url: Optional[str] = None,\n):\n    \"\"\"\n    Parameters:\n        title: Admin title.\n        base_url: Base URL for Admin interface.\n        route_name: Mounted Admin name\n        logo_url: URL of logo to be displayed instead of title.\n        login_logo_url: If set, it will be used for login interface instead of logo_url.\n        templates_dir: Templates dir for customisation\n        statics_dir: Statics dir for customisation\n        index_view: CustomView to use for index page.\n        auth_provider: Authentication Provider\n        middlewares: Starlette middlewares\n        i18n_config: i18n configuration\n        timezone_config: timezone configuration\n        favicon_url: URL of favicon.\n    \"\"\"\n    self.title = title\n    self.base_url = base_url\n    self.route_name = route_name\n    self.logo_url = logo_url\n    self.login_logo_url = login_logo_url\n    self.favicon_url = favicon_url\n    self.templates_dir = templates_dir\n    self.statics_dir = statics_dir\n    self.auth_provider = auth_provider\n    self.middlewares = list(middlewares) if middlewares is not None else []\n    self.index_view = (\n        index_view\n        if (index_view is not None)\n        else CustomView(\"\", add_to_menu=False)\n    )\n    self._views: List[BaseView] = []\n    self._models: List[BaseModelView] = []\n    self.routes: List[Union[Route, Mount]] = []\n    self.debug = debug\n    self.i18n_config = i18n_config\n    self.timezone_config = timezone_config\n    self._setup_templates()\n    self.init_locale()\n    self.init_auth()\n    self.init_routes()\n</code></pre>"},{"location":"api/base-admin/#starlette_admin.base.BaseAdmin.add_view","title":"<code>add_view(view)</code>","text":"<p>Add View to the Admin interface.</p> Source code in <code>starlette_admin/base.py</code> <pre><code>def add_view(self, view: Union[Type[BaseView], BaseView]) -&gt; None:\n    \"\"\"\n    Add View to the Admin interface.\n    \"\"\"\n    view_instance = view if isinstance(view, BaseView) else view()\n    self._views.append(view_instance)\n    self.setup_view(view_instance)\n</code></pre>"},{"location":"api/base-admin/#starlette_admin.base.BaseAdmin.custom_render_js","title":"<code>custom_render_js(request)</code>","text":"<p>Override this function to provide a link to custom js to override the global <code>render</code> object in javascript which is use to render fields in list page.</p> <p>Parameters:</p> Name Type Description Default <code>request</code> <code>Request</code> <p>Starlette Request</p> required Source code in <code>starlette_admin/base.py</code> <pre><code>def custom_render_js(self, request: Request) -&gt; Optional[str]:\n    \"\"\"\n    Override this function to provide a link to custom js to override the\n    global `render` object in javascript which is use to render fields in\n    list page.\n\n    Args:\n        request: Starlette Request\n    \"\"\"\n    return None\n</code></pre>"},{"location":"api/contrib/sqlalchemy/modelview/","title":"ModelView","text":"<p>               Bases: <code>BaseModelView</code></p> <p>A view for managing SQLAlchemy models.</p> Source code in <code>starlette_admin/contrib/sqla/view.py</code> <pre><code>class ModelView(BaseModelView):\n    \"\"\"A view for managing SQLAlchemy models.\"\"\"\n\n    sortable_field_mapping: ClassVar[Dict[str, InstrumentedAttribute]] = {}\n    \"\"\"A dictionary for overriding the default model attribute used for sorting.\n\n    Example:\n        ```python\n        class Post(Base):\n            __tablename__ = \"post\"\n\n            id: Mapped[int] = mapped_column(primary_key=True)\n            title: Mapped[str] = mapped_column()\n            user_id: Mapped[int] = mapped_column(ForeignKey(\"user.id\"))\n            user: Mapped[User] = relationship(back_populates=\"posts\")\n\n\n        class PostView(ModelView):\n            sortable_field = [\"id\", \"title\", \"user\"]\n            sortable_field_mapping = {\n                \"user\": User.age,  # Sort by the age of the related user\n            }\n        ```\n    \"\"\"\n\n    def __init__(\n        self,\n        model: Type[Any],\n        icon: Optional[str] = None,\n        name: Optional[str] = None,\n        label: Optional[str] = None,\n        identity: Optional[str] = None,\n        converter: Optional[BaseSQLAModelConverter] = None,\n    ):\n        try:\n            mapper: Mapper = inspect(model)  # type: ignore\n        except NoInspectionAvailable:\n            raise InvalidModelError(  # noqa B904\n                f\"Class {model.__name__} is not a SQLAlchemy model.\"\n            )\n        self.model = model\n        self.identity = (\n            identity or self.identity or slugify_class_name(self.model.__name__)\n        )\n        self.label = (\n            label or self.label or prettify_class_name(self.model.__name__) + \"s\"\n        )\n        self.name = name or self.name or prettify_class_name(self.model.__name__)\n        self.icon = icon\n        if self.fields is None or len(self.fields) == 0:\n            self.fields = [\n                self.model.__dict__[f].key\n                for f in list(self.model.__dict__.keys())\n                if type(self.model.__dict__[f]) is InstrumentedAttribute\n            ]\n        self.fields = (converter or ModelConverter()).convert_fields_list(\n            fields=self.fields, model=self.model, mapper=mapper\n        )\n        self._setup_primary_key()\n        self.exclude_fields_from_list = normalize_list(self.exclude_fields_from_list)  # type: ignore\n        self.exclude_fields_from_detail = normalize_list(self.exclude_fields_from_detail)  # type: ignore\n        self.exclude_fields_from_create = normalize_list(self.exclude_fields_from_create)  # type: ignore\n        self.exclude_fields_from_edit = normalize_list(self.exclude_fields_from_edit)  # type: ignore\n        _default_list = [\n            field.name\n            for field in self.fields\n            if not isinstance(field, (RelationField, FileField))\n        ]\n        self.searchable_fields = normalize_list(\n            self.searchable_fields\n            if (self.searchable_fields is not None)\n            else _default_list\n        )\n        self.sortable_fields = normalize_list(\n            self.sortable_fields\n            if (self.sortable_fields is not None)\n            else _default_list\n        )\n        self.export_fields = normalize_list(self.export_fields)\n        self.fields_default_sort = normalize_list(\n            self.fields_default_sort, is_default_sort_list=True\n        )\n        super().__init__()\n\n    def _setup_primary_key(self) -&gt; None:\n        # Detect the primary key attribute(s) of the model\n        _pk_attrs = []\n        self._pk_column: Union[\n            Tuple[InstrumentedAttribute, ...], InstrumentedAttribute\n        ] = ()\n        self._pk_coerce: Union[Tuple[type, ...], type] = ()\n        for key in list(self.model.__dict__.keys()):\n            attr = getattr(self.model, key)\n            if isinstance(attr, InstrumentedAttribute) and getattr(\n                attr, \"primary_key\", False\n            ):\n                _pk_attrs.append(key)\n        if len(_pk_attrs) &gt; 1:\n            self._pk_column = tuple(getattr(self.model, attr) for attr in _pk_attrs)\n            self._pk_coerce = tuple(\n                extract_column_python_type(c) for c in self._pk_column\n            )\n            self.pk_field: BaseField = MultiplePKField(_pk_attrs)\n        else:\n            assert (\n                len(_pk_attrs) == 1\n            ), f\"No primary key found in model {self.model.__name__}\"\n            self._pk_column = getattr(self.model, _pk_attrs[0])\n            self._pk_coerce = extract_column_python_type(self._pk_column)  # type: ignore[arg-type]\n            try:\n                # Try to find the primary key field among the fields\n                self.pk_field = next(f for f in self.fields if f.name == _pk_attrs[0])\n            except StopIteration:\n                # If the primary key is not among the fields, treat its value as a string\n                self.pk_field = StringField(_pk_attrs[0])\n        self.pk_attr = self.pk_field.name\n\n    async def handle_action(\n        self, request: Request, pks: List[Any], name: str\n    ) -&gt; Union[str, Response]:\n        try:\n            return await super().handle_action(request, pks, name)\n        except SQLAlchemyError as exc:\n            raise ActionFailed(str(exc)) from exc\n\n    async def handle_row_action(\n        self, request: Request, pk: Any, name: str\n    ) -&gt; Union[str, Response]:\n        try:\n            return await super().handle_row_action(request, pk, name)\n        except SQLAlchemyError as exc:\n            raise ActionFailed(str(exc)) from exc\n\n    def get_details_query(self, request: Request) -&gt; Select:\n        \"\"\"\n        Return a Select expression which is used as base statement for\n        [find_by_pk][starlette_admin.views.BaseModelView.find_by_pk] and\n        [find_by_pks][starlette_admin.views.BaseModelView.find_by_pks] methods.\n\n        Examples:\n            ```python  hl_lines=\"3-4\"\n            class PostView(ModelView):\n\n                    def get_details_query(self, request: Request):\n                        return super().get_details_query().options(selectinload(Post.author))\n            ```\n        \"\"\"\n        return select(self.model)\n\n    def get_list_query(self, request: Request) -&gt; Select:\n        \"\"\"\n        Return a Select expression which is used as base statement for\n        [find_all][starlette_admin.views.BaseModelView.find_all] method.\n\n        Examples:\n            ```python  hl_lines=\"3-4\"\n            class PostView(ModelView):\n\n                    def get_list_query(self, request: Request):\n                        return super().get_list_query().where(Post.published == true())\n\n                    def get_count_query(self, request: Request):\n                        return super().get_count_query().where(Post.published == true())\n            ```\n\n        If you override this method, don't forget to also override\n        [get_count_query][starlette_admin.contrib.sqla.ModelView.get_count_query],\n        for displaying the correct item count in the list view.\n        \"\"\"\n        return select(self.model)\n\n    def get_count_query(self, request: Request) -&gt; Select:\n        \"\"\"\n        Return a Select expression which is used as base statement for\n        [count][starlette_admin.views.BaseModelView.count] method.\n\n        Examples:\n            ```python hl_lines=\"6-7\"\n            class PostView(ModelView):\n\n                    def get_list_query(self, request: Request):\n                        return super().get_list_query().where(Post.published == true())\n\n                    def get_count_query(self, request: Request):\n                        return super().get_count_query().where(Post.published == true())\n            ```\n        \"\"\"\n        return select(func.count()).select_from(self.model)\n\n    def get_search_query(self, request: Request, term: str) -&gt; Any:\n        \"\"\"\n        Return SQLAlchemy whereclause to use for full text search\n\n        Args:\n           request: Starlette request\n           term: Filtering term\n\n        Examples:\n           ```python\n           class PostView(ModelView):\n\n                def get_search_query(self, request: Request, term: str):\n                    return Post.title.contains(term)\n           ```\n        \"\"\"\n        clauses = []\n        for field in self.get_fields_list(request):\n            if field.searchable and type(field) in [\n                StringField,\n                TextAreaField,\n                EmailField,\n                URLField,\n                PhoneField,\n                ColorField,\n            ]:\n                attr = getattr(self.model, field.name)\n                clauses.append(cast(attr, String).ilike(f\"%{term}%\"))\n        return or_(*clauses)\n\n    async def count(\n        self,\n        request: Request,\n        where: Union[Dict[str, Any], str, None] = None,\n    ) -&gt; int:\n        session: Union[Session, AsyncSession] = request.state.session\n        stmt = self.get_count_query(request)\n        if where is not None:\n            if isinstance(where, dict):\n                where = build_query(where, self.model)\n            else:\n                where = await self.build_full_text_search_query(\n                    request, where, self.model\n                )\n            stmt = stmt.where(where)  # type: ignore\n        if isinstance(session, AsyncSession):\n            return (await session.execute(stmt)).scalar_one()\n        return (await anyio.to_thread.run_sync(session.execute, stmt)).scalar_one()  # type: ignore[arg-type]\n\n    async def find_all(\n        self,\n        request: Request,\n        skip: int = 0,\n        limit: int = 100,\n        where: Union[Dict[str, Any], str, None] = None,\n        order_by: Optional[List[str]] = None,\n    ) -&gt; Sequence[Any]:\n        session: Union[Session, AsyncSession] = request.state.session\n        stmt = self.get_list_query(request).offset(skip)\n        if limit &gt; 0:\n            stmt = stmt.limit(limit)\n        if where is not None:\n            if isinstance(where, dict):\n                where = build_query(where, self.model)\n            else:\n                where = await self.build_full_text_search_query(\n                    request, where, self.model\n                )\n            stmt = stmt.where(where)  # type: ignore\n        stmt = self.build_order_clauses(request, order_by or [], stmt)\n        for field in self.get_fields_list(request, RequestAction.LIST):\n            if isinstance(field, RelationField):\n                stmt = stmt.options(joinedload(getattr(self.model, field.name)))\n        if isinstance(session, AsyncSession):\n            return (await session.execute(stmt)).scalars().unique().all()\n        return (\n            (await anyio.to_thread.run_sync(session.execute, stmt))  # type: ignore[arg-type]\n            .scalars()\n            .unique()\n            .all()\n        )\n\n    async def find_by_pk(self, request: Request, pk: Any) -&gt; Any:\n        session: Union[Session, AsyncSession] = request.state.session\n        if isinstance(self._pk_column, tuple):\n            \"\"\"\n            For composite primary keys, the pk parameter is a comma-separated string\n            representing the values of each primary key attribute.\n\n            For example, if the model has two primary keys (id1, id2):\n            - the `pk` will be: \"val1,val2\"\n            - the generated query: (id1 == val1 AND id2 == val2)\n            \"\"\"\n            assert isinstance(self._pk_coerce, tuple)\n            clause = and_(\n                (\n                    _pk_col == _coerce(_pk)\n                    if _coerce is not bool\n                    else _pk_col\n                    == (_pk == \"True\")  # to avoid bool(\"False\") which is True\n                )\n                for _pk_col, _coerce, _pk in zip(\n                    self._pk_column, self._pk_coerce, iterdecode(pk)  # type: ignore[type-var,arg-type]\n                )\n            )\n        else:\n            assert isinstance(self._pk_coerce, type)\n            clause = self._pk_column == self._pk_coerce(pk)\n        stmt = self.get_details_query(request).where(clause)\n        for field in self.get_fields_list(request, request.state.action):\n            if isinstance(field, RelationField):\n                stmt = stmt.options(joinedload(getattr(self.model, field.name)))\n        if isinstance(session, AsyncSession):\n            return (await session.execute(stmt)).scalars().unique().one_or_none()\n        return (\n            (await anyio.to_thread.run_sync(session.execute, stmt))  # type: ignore[arg-type]\n            .scalars()\n            .unique()\n            .one_or_none()\n        )\n\n    async def find_by_pks(self, request: Request, pks: List[Any]) -&gt; Sequence[Any]:\n        has_multiple_pks = isinstance(self._pk_column, tuple)\n        try:\n            return await self._exec_find_by_pks(request, pks)\n        except DBAPIError:  # pragma: no cover\n            if has_multiple_pks:\n                # Retry for multiple primary keys in case of an error related to the composite IN construct\n                # This section is intentionally not covered by the test suite because SQLite, MySQL, and\n                # PostgreSQL support composite IN construct.\n                return await self._exec_find_by_pks(request, pks, False)\n            raise\n\n    async def _exec_find_by_pks(\n        self, request: Request, pks: List[Any], use_composite_in: bool = True\n    ) -&gt; Sequence[Any]:\n        session: Union[Session, AsyncSession] = request.state.session\n        has_multiple_pks = isinstance(self._pk_column, tuple)\n\n        if has_multiple_pks:\n            \"\"\"Handle composite primary keys\"\"\"\n            clause = await self._get_multiple_pks_in_clause(pks, use_composite_in)\n        else:\n            clause = self._pk_column.in_(map(self._pk_coerce, pks))  # type: ignore\n        stmt = self.get_details_query(request).where(clause)\n        for field in self.get_fields_list(request, request.state.action):\n            if isinstance(field, RelationField):\n                stmt = stmt.options(joinedload(getattr(self.model, field.name)))\n        if isinstance(session, AsyncSession):\n            return (await session.execute(stmt)).scalars().unique().all()\n        return (\n            (await anyio.to_thread.run_sync(session.execute, stmt))  # type: ignore[arg-type]\n            .scalars()\n            .unique()\n            .all()\n        )\n\n    async def _get_multiple_pks_in_clause(\n        self, pks: List[Any], use_composite_in: bool\n    ) -&gt; Any:\n        \"\"\"\n        Constructs the WHERE clause for models with multiple primary keys.\n\n        Args:\n            pks: A list of comma-separated values\n                Example: [\"val1,val2\", \"val3,val4\"]\n            use_composite_in: A flag indicating whether to use the composite IN construct.\n\n        The generated query depends on the value of `use_composite_in`:\n\n        - When `use_composite_in` is True:\n            WHERE (id1, id2) IN ((val1, val2), (val3, val4))\n\n            Note: The composite IN construct may not be supported by all database backends.\n                Read https://docs.sqlalchemy.org/en/latest/core/sqlelement.html#sqlalchemy.sql.expression.tuple_\n\n        - When `use_composite_in` is False:\n            WHERE (id1 == val1 AND id2 == val2) OR (id1 == val3 AND id2 == val4)\n        \"\"\"\n        assert isinstance(self._pk_coerce, tuple)\n        decoded_pks = tuple(iterdecode(pk) for pk in pks)\n        if use_composite_in:\n            return tuple_(*self._pk_column).in_(\n                tuple(\n                    (_coerce(_pk) if _coerce is not bool else _pk == \"True\")\n                    for _coerce, _pk in zip(\n                        self._pk_coerce, decoded_pk  # type: ignore[type-var,arg-type]\n                    )\n                )\n                for decoded_pk in decoded_pks\n            )\n        else:  # noqa: RET505, pragma: no cover\n            clauses = []\n            for decoded_pk in decoded_pks:\n                clauses.append(\n                    and_(\n                        (\n                            _pk_col == _coerce(_pk)\n                            if _coerce is not bool\n                            else (_pk_col == (_pk == \"True\"))\n                        )  # to avoid bool(\"False\") which is True\n                        for _pk_col, _coerce, _pk in zip(\n                            self._pk_column, self._pk_coerce, decoded_pk  # type: ignore[type-var,arg-type]\n                        )\n                    )\n                )\n            return or_(*clauses)\n\n    async def validate(self, request: Request, data: Dict[str, Any]) -&gt; None:\n        \"\"\"\n        Inherit this method to validate your data.\n\n        Args:\n            request: Starlette request\n            data: Submitted data\n\n        Raises:\n            FormValidationError: to display errors to users\n\n        Examples:\n            ```python\n            from starlette_admin.contrib.sqla import ModelView\n            from starlette_admin.exceptions import FormValidationError\n\n\n            class Post(Base):\n                __tablename__ = \"post\"\n\n                id = Column(Integer, primary_key=True)\n                title = Column(String(100), nullable=False)\n                text = Column(Text, nullable=False)\n                date = Column(Date)\n\n\n            class PostView(ModelView):\n\n                async def validate(self, request: Request, data: Dict[str, Any]) -&gt; None:\n                    errors: Dict[str, str] = dict()\n                    _2day_from_today = date.today() + timedelta(days=2)\n                    if data[\"title\"] is None or len(data[\"title\"]) &lt; 3:\n                        errors[\"title\"] = \"Ensure this value has at least 03 characters\"\n                    if data[\"text\"] is None or len(data[\"text\"]) &lt; 10:\n                        errors[\"text\"] = \"Ensure this value has at least 10 characters\"\n                    if data[\"date\"] is None or data[\"date\"] &lt; _2day_from_today:\n                        errors[\"date\"] = \"We need at least one day to verify your post\"\n                    if len(errors) &gt; 0:\n                        raise FormValidationError(errors)\n                    return await super().validate(request, data)\n            ```\n\n        \"\"\"\n\n    async def create(self, request: Request, data: Dict[str, Any]) -&gt; Any:\n        try:\n            data = await self._arrange_data(request, data)\n            await self.validate(request, data)\n            session: Union[Session, AsyncSession] = request.state.session\n            obj = await self._populate_obj(request, self.model(), data)\n            session.add(obj)\n            await self.before_create(request, data, obj)\n            if isinstance(session, AsyncSession):\n                await session.commit()\n                await session.refresh(obj)\n            else:\n                await anyio.to_thread.run_sync(session.commit)  # type: ignore[arg-type]\n                await anyio.to_thread.run_sync(session.refresh, obj)  # type: ignore[arg-type]\n            await self.after_create(request, obj)\n            return obj\n        except Exception as e:\n            return self.handle_exception(e)\n\n    async def edit(self, request: Request, pk: Any, data: Dict[str, Any]) -&gt; Any:\n        try:\n            data = await self._arrange_data(request, data, True)\n            await self.validate(request, data)\n            session: Union[Session, AsyncSession] = request.state.session\n            obj = await self.find_by_pk(request, pk)\n            await self._populate_obj(request, obj, data, True)\n            session.add(obj)\n            await self.before_edit(request, data, obj)\n            if isinstance(session, AsyncSession):\n                await session.commit()\n                await session.refresh(obj)\n            else:\n                await anyio.to_thread.run_sync(session.commit)  # type: ignore[arg-type]\n                await anyio.to_thread.run_sync(session.refresh, obj)  # type: ignore[arg-type]\n            await self.after_edit(request, obj)\n            return obj\n        except Exception as e:\n            self.handle_exception(e)\n\n    async def _arrange_data(\n        self,\n        request: Request,\n        data: Dict[str, Any],\n        is_edit: bool = False,\n    ) -&gt; Dict[str, Any]:\n        \"\"\"\n        This function will return a new dict with relationships loaded from\n        database.\n        \"\"\"\n        arranged_data: Dict[str, Any] = {}\n        for field in self.get_fields_list(request, request.state.action):\n            if isinstance(field, RelationField) and data[field.name] is not None:\n                foreign_model = self._find_foreign_model(field.identity)  # type: ignore\n                if isinstance(field, HasMany):\n                    arranged_data[field.name] = field.collection_class(await foreign_model.find_by_pks(request, data[field.name]))  # type: ignore[call-arg]\n                else:\n                    arranged_data[field.name] = await foreign_model.find_by_pk(\n                        request, data[field.name]\n                    )\n            else:\n                arranged_data[field.name] = data[field.name]\n        return arranged_data\n\n    async def _populate_obj(\n        self,\n        request: Request,\n        obj: Any,\n        data: Dict[str, Any],\n        is_edit: bool = False,\n    ) -&gt; Any:\n        for field in self.get_fields_list(request, request.state.action):\n            name, value = field.name, data.get(field.name, None)\n            if isinstance(field, FileField):\n                value, should_be_deleted = value\n                if should_be_deleted:\n                    setattr(obj, name, None)\n                elif (not field.multiple and value is not None) or (\n                    field.multiple and isinstance(value, list) and len(value) &gt; 0\n                ):\n                    setattr(obj, name, value)\n            else:\n                setattr(obj, name, value)\n        return obj\n\n    async def delete(self, request: Request, pks: List[Any]) -&gt; Optional[int]:\n        session: Union[Session, AsyncSession] = request.state.session\n        objs = await self.find_by_pks(request, pks)\n        if isinstance(session, AsyncSession):\n            for obj in objs:\n                await self.before_delete(request, obj)\n                await session.delete(obj)\n            await session.commit()\n        else:\n            for obj in objs:\n                await self.before_delete(request, obj)\n                await anyio.to_thread.run_sync(session.delete, obj)  # type: ignore[arg-type]\n            await anyio.to_thread.run_sync(session.commit)  # type: ignore[arg-type]\n        for obj in objs:\n            await self.after_delete(request, obj)\n        return len(objs)\n\n    async def build_full_text_search_query(\n        self, request: Request, term: str, model: Any\n    ) -&gt; Any:\n        return self.get_search_query(request, term)\n\n    def build_order_clauses(\n        self, request: Request, order_list: List[str], stmt: Select\n    ) -&gt; Select:\n        for value in order_list:\n            attr_key, order = value.strip().split(maxsplit=1)\n            model_attr = getattr(self.model, attr_key, None)\n            if model_attr is not None and isinstance(\n                model_attr.property, RelationshipProperty\n            ):\n                stmt = stmt.outerjoin(model_attr)\n            sorting_attr = self.sortable_field_mapping.get(attr_key, model_attr)\n            stmt = stmt.order_by(\n                not_none(sorting_attr).desc()\n                if order.lower() == \"desc\"\n                else sorting_attr\n            )\n        return stmt\n\n    async def get_pk_value(self, request: Request, obj: Any) -&gt; Any:\n        return await self.pk_field.parse_obj(request, obj)\n\n    async def get_serialized_pk_value(self, request: Request, obj: Any) -&gt; Any:\n        value = await self.get_pk_value(request, obj)\n        return await self.pk_field.serialize_value(request, value, request.state.action)\n\n    def handle_exception(self, exc: Exception) -&gt; None:\n        try:\n            \"\"\"Automatically handle sqlalchemy_file error\"\"\"\n            from sqlalchemy_file.exceptions import ValidationError\n\n            if isinstance(exc, ValidationError):\n                raise FormValidationError({exc.key: exc.msg})\n        except ImportError:  # pragma: no cover\n            pass\n        raise exc  # pragma: no cover\n</code></pre>"},{"location":"api/contrib/sqlalchemy/modelview/#starlette_admin.contrib.sqla.ModelView.sortable_field_mapping","title":"<code>sortable_field_mapping = {}</code>  <code>class-attribute</code>","text":"<p>A dictionary for overriding the default model attribute used for sorting.</p> Example <pre><code>class Post(Base):\n    __tablename__ = \"post\"\n\n    id: Mapped[int] = mapped_column(primary_key=True)\n    title: Mapped[str] = mapped_column()\n    user_id: Mapped[int] = mapped_column(ForeignKey(\"user.id\"))\n    user: Mapped[User] = relationship(back_populates=\"posts\")\n\n\nclass PostView(ModelView):\n    sortable_field = [\"id\", \"title\", \"user\"]\n    sortable_field_mapping = {\n        \"user\": User.age,  # Sort by the age of the related user\n    }\n</code></pre>"},{"location":"api/contrib/sqlalchemy/modelview/#starlette_admin.contrib.sqla.ModelView.get_count_query","title":"<code>get_count_query(request)</code>","text":"<p>Return a Select expression which is used as base statement for count method.</p> <p>Examples:</p> <pre><code>class PostView(ModelView):\n\n        def get_list_query(self, request: Request):\n            return super().get_list_query().where(Post.published == true())\n\n        def get_count_query(self, request: Request):\n            return super().get_count_query().where(Post.published == true())\n</code></pre> Source code in <code>starlette_admin/contrib/sqla/view.py</code> <pre><code>def get_count_query(self, request: Request) -&gt; Select:\n    \"\"\"\n    Return a Select expression which is used as base statement for\n    [count][starlette_admin.views.BaseModelView.count] method.\n\n    Examples:\n        ```python hl_lines=\"6-7\"\n        class PostView(ModelView):\n\n                def get_list_query(self, request: Request):\n                    return super().get_list_query().where(Post.published == true())\n\n                def get_count_query(self, request: Request):\n                    return super().get_count_query().where(Post.published == true())\n        ```\n    \"\"\"\n    return select(func.count()).select_from(self.model)\n</code></pre>"},{"location":"api/contrib/sqlalchemy/modelview/#starlette_admin.contrib.sqla.ModelView.get_details_query","title":"<code>get_details_query(request)</code>","text":"<p>Return a Select expression which is used as base statement for find_by_pk and find_by_pks methods.</p> <p>Examples:</p> <pre><code>class PostView(ModelView):\n\n        def get_details_query(self, request: Request):\n            return super().get_details_query().options(selectinload(Post.author))\n</code></pre> Source code in <code>starlette_admin/contrib/sqla/view.py</code> <pre><code>def get_details_query(self, request: Request) -&gt; Select:\n    \"\"\"\n    Return a Select expression which is used as base statement for\n    [find_by_pk][starlette_admin.views.BaseModelView.find_by_pk] and\n    [find_by_pks][starlette_admin.views.BaseModelView.find_by_pks] methods.\n\n    Examples:\n        ```python  hl_lines=\"3-4\"\n        class PostView(ModelView):\n\n                def get_details_query(self, request: Request):\n                    return super().get_details_query().options(selectinload(Post.author))\n        ```\n    \"\"\"\n    return select(self.model)\n</code></pre>"},{"location":"api/contrib/sqlalchemy/modelview/#starlette_admin.contrib.sqla.ModelView.get_list_query","title":"<code>get_list_query(request)</code>","text":"<p>Return a Select expression which is used as base statement for find_all method.</p> <p>Examples:</p> <pre><code>class PostView(ModelView):\n\n        def get_list_query(self, request: Request):\n            return super().get_list_query().where(Post.published == true())\n\n        def get_count_query(self, request: Request):\n            return super().get_count_query().where(Post.published == true())\n</code></pre> <p>If you override this method, don't forget to also override get_count_query, for displaying the correct item count in the list view.</p> Source code in <code>starlette_admin/contrib/sqla/view.py</code> <pre><code>def get_list_query(self, request: Request) -&gt; Select:\n    \"\"\"\n    Return a Select expression which is used as base statement for\n    [find_all][starlette_admin.views.BaseModelView.find_all] method.\n\n    Examples:\n        ```python  hl_lines=\"3-4\"\n        class PostView(ModelView):\n\n                def get_list_query(self, request: Request):\n                    return super().get_list_query().where(Post.published == true())\n\n                def get_count_query(self, request: Request):\n                    return super().get_count_query().where(Post.published == true())\n        ```\n\n    If you override this method, don't forget to also override\n    [get_count_query][starlette_admin.contrib.sqla.ModelView.get_count_query],\n    for displaying the correct item count in the list view.\n    \"\"\"\n    return select(self.model)\n</code></pre>"},{"location":"api/contrib/sqlalchemy/modelview/#starlette_admin.contrib.sqla.ModelView.get_search_query","title":"<code>get_search_query(request, term)</code>","text":"<p>Return SQLAlchemy whereclause to use for full text search</p> <p>Parameters:</p> Name Type Description Default <code>request</code> <code>Request</code> <p>Starlette request</p> required <code>term</code> <code>str</code> <p>Filtering term</p> required <p>Examples:</p> <pre><code>class PostView(ModelView):\n\n     def get_search_query(self, request: Request, term: str):\n         return Post.title.contains(term)\n</code></pre> Source code in <code>starlette_admin/contrib/sqla/view.py</code> <pre><code>def get_search_query(self, request: Request, term: str) -&gt; Any:\n    \"\"\"\n    Return SQLAlchemy whereclause to use for full text search\n\n    Args:\n       request: Starlette request\n       term: Filtering term\n\n    Examples:\n       ```python\n       class PostView(ModelView):\n\n            def get_search_query(self, request: Request, term: str):\n                return Post.title.contains(term)\n       ```\n    \"\"\"\n    clauses = []\n    for field in self.get_fields_list(request):\n        if field.searchable and type(field) in [\n            StringField,\n            TextAreaField,\n            EmailField,\n            URLField,\n            PhoneField,\n            ColorField,\n        ]:\n            attr = getattr(self.model, field.name)\n            clauses.append(cast(attr, String).ilike(f\"%{term}%\"))\n    return or_(*clauses)\n</code></pre>"},{"location":"api/contrib/sqlalchemy/modelview/#starlette_admin.contrib.sqla.ModelView.validate","title":"<code>validate(request, data)</code>  <code>async</code>","text":"<p>Inherit this method to validate your data.</p> <p>Parameters:</p> Name Type Description Default <code>request</code> <code>Request</code> <p>Starlette request</p> required <code>data</code> <code>Dict[str, Any]</code> <p>Submitted data</p> required <p>Raises:</p> Type Description <code>FormValidationError</code> <p>to display errors to users</p> <p>Examples:</p> <pre><code>from starlette_admin.contrib.sqla import ModelView\nfrom starlette_admin.exceptions import FormValidationError\n\n\nclass Post(Base):\n    __tablename__ = \"post\"\n\n    id = Column(Integer, primary_key=True)\n    title = Column(String(100), nullable=False)\n    text = Column(Text, nullable=False)\n    date = Column(Date)\n\n\nclass PostView(ModelView):\n\n    async def validate(self, request: Request, data: Dict[str, Any]) -&gt; None:\n        errors: Dict[str, str] = dict()\n        _2day_from_today = date.today() + timedelta(days=2)\n        if data[\"title\"] is None or len(data[\"title\"]) &lt; 3:\n            errors[\"title\"] = \"Ensure this value has at least 03 characters\"\n        if data[\"text\"] is None or len(data[\"text\"]) &lt; 10:\n            errors[\"text\"] = \"Ensure this value has at least 10 characters\"\n        if data[\"date\"] is None or data[\"date\"] &lt; _2day_from_today:\n            errors[\"date\"] = \"We need at least one day to verify your post\"\n        if len(errors) &gt; 0:\n            raise FormValidationError(errors)\n        return await super().validate(request, data)\n</code></pre> Source code in <code>starlette_admin/contrib/sqla/view.py</code> <pre><code>async def validate(self, request: Request, data: Dict[str, Any]) -&gt; None:\n    \"\"\"\n    Inherit this method to validate your data.\n\n    Args:\n        request: Starlette request\n        data: Submitted data\n\n    Raises:\n        FormValidationError: to display errors to users\n\n    Examples:\n        ```python\n        from starlette_admin.contrib.sqla import ModelView\n        from starlette_admin.exceptions import FormValidationError\n\n\n        class Post(Base):\n            __tablename__ = \"post\"\n\n            id = Column(Integer, primary_key=True)\n            title = Column(String(100), nullable=False)\n            text = Column(Text, nullable=False)\n            date = Column(Date)\n\n\n        class PostView(ModelView):\n\n            async def validate(self, request: Request, data: Dict[str, Any]) -&gt; None:\n                errors: Dict[str, str] = dict()\n                _2day_from_today = date.today() + timedelta(days=2)\n                if data[\"title\"] is None or len(data[\"title\"]) &lt; 3:\n                    errors[\"title\"] = \"Ensure this value has at least 03 characters\"\n                if data[\"text\"] is None or len(data[\"text\"]) &lt; 10:\n                    errors[\"text\"] = \"Ensure this value has at least 10 characters\"\n                if data[\"date\"] is None or data[\"date\"] &lt; _2day_from_today:\n                    errors[\"date\"] = \"We need at least one day to verify your post\"\n                if len(errors) &gt; 0:\n                    raise FormValidationError(errors)\n                return await super().validate(request, data)\n        ```\n\n    \"\"\"\n</code></pre>"},{"location":"api/fields/","title":"Fields","text":""},{"location":"api/fields/#starlette_admin.fields","title":"<code>starlette_admin.fields</code>","text":""},{"location":"api/fields/#starlette_admin.fields.BaseField","title":"<code>BaseField</code>  <code>dataclass</code>","text":"<p>Base class for fields</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>Field name, same as attribute name in your model</p> required <code>label</code> <code>Optional[str]</code> <p>Field label</p> <code>None</code> <code>help_text</code> <code>Optional[str]</code> <p>Hint message to display in forms</p> <code>None</code> <code>type</code> <code>Optional[str]</code> <p>Field type, unique key used to define the field</p> <code>None</code> <code>disabled</code> <code>Optional[bool]</code> <p>Disabled in forms</p> <code>False</code> <code>read_only</code> <code>Optional[bool]</code> <p>Read only in forms</p> <code>False</code> <code>id</code> <code>str</code> <p>Unique id, used to represent field instance</p> <code>''</code> <code>search_builder_type</code> <code>Optional[str]</code> <p>datatable columns.searchBuilderType, For more information click here</p> <code>'default'</code> <code>required</code> <code>Optional[bool]</code> <p>Indicate if the fields is required</p> <code>False</code> <code>exclude_from_list</code> <code>Optional[bool]</code> <p>Control field visibility in list page</p> <code>False</code> <code>exclude_from_detail</code> <code>Optional[bool]</code> <p>Control field visibility in detail page</p> <code>False</code> <code>exclude_from_create</code> <code>Optional[bool]</code> <p>Control field visibility in create page</p> <code>False</code> <code>exclude_from_edit</code> <code>Optional[bool]</code> <p>Control field visibility in edit page</p> <code>False</code> <code>searchable</code> <code>Optional[bool]</code> <p>Indicate if the fields is searchable</p> <code>True</code> <code>orderable</code> <code>Optional[bool]</code> <p>Indicate if the fields is orderable</p> <code>True</code> <code>render_function_key</code> <code>str</code> <p>Render function key inside the global <code>render</code> variable in javascript</p> <code>'text'</code> <code>form_template</code> <code>str</code> <p>template for rendering this field in creation and edit page</p> <code>'forms/input.html'</code> <code>display_template</code> <code>str</code> <p>template for displaying this field in detail page</p> <code>'displays/text.html'</code> Source code in <code>starlette_admin/fields.py</code> <pre><code>@dataclass\nclass BaseField:\n    \"\"\"\n    Base class for fields\n\n    Parameters:\n        name: Field name, same as attribute name in your model\n        label: Field label\n        help_text: Hint message to display in forms\n        type: Field type, unique key used to define the field\n        disabled: Disabled in forms\n        read_only: Read only in forms\n        id: Unique id, used to represent field instance\n        search_builder_type: datatable columns.searchBuilderType, For more information\n            [click here](https://datatables.net/reference/option/columns.searchBuilderType)\n        required: Indicate if the fields is required\n        exclude_from_list: Control field visibility in list page\n        exclude_from_detail: Control field visibility in detail page\n        exclude_from_create: Control field visibility in create page\n        exclude_from_edit: Control field visibility in edit page\n        searchable: Indicate if the fields is searchable\n        orderable: Indicate if the fields is orderable\n        render_function_key: Render function key inside the global `render` variable in javascript\n        form_template: template for rendering this field in creation and edit page\n        display_template: template for displaying this field in detail page\n    \"\"\"\n\n    name: str\n    label: Optional[str] = None\n    type: Optional[str] = None\n    help_text: Optional[str] = None\n    disabled: Optional[bool] = False\n    read_only: Optional[bool] = False\n    id: str = \"\"\n    search_builder_type: Optional[str] = \"default\"\n    required: Optional[bool] = False\n    exclude_from_list: Optional[bool] = False\n    exclude_from_detail: Optional[bool] = False\n    exclude_from_create: Optional[bool] = False\n    exclude_from_edit: Optional[bool] = False\n    searchable: Optional[bool] = True\n    orderable: Optional[bool] = True\n    render_function_key: str = \"text\"\n    form_template: str = \"forms/input.html\"\n    label_template: str = \"forms/_label.html\"\n    display_template: str = \"displays/text.html\"\n    error_class = \"is-invalid\"\n\n    def __post_init__(self) -&gt; None:\n        if self.label is None:\n            self.label = self.name.replace(\"_\", \" \").capitalize()\n        if self.type is None:\n            self.type = type(self).__name__\n        self.id = self.name\n\n    async def parse_form_data(\n        self, request: Request, form_data: FormData, action: RequestAction\n    ) -&gt; Any:\n        \"\"\"\n        Extracts the value of this field from submitted form data.\n        \"\"\"\n        return form_data.get(self.id)\n\n    async def parse_obj(self, request: Request, obj: Any) -&gt; Any:\n        \"\"\"Extracts the value of this field from a model instance.\n\n        By default, this function returns the value of the attribute with the name `self.name` from `obj`.\n        However, this function can be overridden to provide custom logic for computing the value of a field.\n\n        ??? Example\n\n            ```py\n            # Suppose we have a `User` model with `id`, `first_name`, and `last_name` fields.\n            # We define a custom field called `MyCustomField` to compute the full name of the user:\n\n            class MyCustomField(StringField):\n                async def parse_obj(self, request: Request, obj: Any) -&gt; Any:\n                    return f\"{obj.first_name} {obj.last_name}\"  # Returns the full name of the user\n\n\n            # Then, We can define our view as follows\n\n            class UserView(ModelView):\n                fields = [\"id\", MyCustomField(\"full_name\")]\n            ```\n        \"\"\"\n        return getattr(obj, self.name, None)\n\n    async def serialize_none_value(\n        self, request: Request, action: RequestAction\n    ) -&gt; Any:\n        \"\"\"Formats a None value for sending to the frontend.\n\n        Args:\n            request: The current request object.\n            action: The current request action.\n\n        Returns:\n            Any: The formatted None value.\n        \"\"\"\n        return None\n\n    async def serialize_value(\n        self, request: Request, value: Any, action: RequestAction\n    ) -&gt; Any:\n        \"\"\"Formats a value for sending to the frontend based on the current request action.\n\n        !!! important\n\n            Make sure this value is JSON Serializable for RequestAction.LIST and RequestAction.API\n\n        Args:\n            request: The current request object.\n            value: The value to format.\n            action: The current request action.\n\n        Returns:\n            Any: The formatted value.\n        \"\"\"\n        return value\n\n    def additional_css_links(\n        self, request: Request, action: RequestAction\n    ) -&gt; List[str]:\n        \"\"\"Returns a list of CSS file URLs to include for the current request action.\"\"\"\n        return []\n\n    def additional_js_links(self, request: Request, action: RequestAction) -&gt; List[str]:\n        \"\"\"Returns a list of JavaScript file URLs to include for the current request action.\"\"\"\n        return []\n\n    def dict(self) -&gt; Dict[str, Any]:\n        \"\"\"Return the dataclass instance as a dictionary.\"\"\"\n        return asdict(self)\n\n    def input_params(self) -&gt; str:\n        \"\"\"Return HTML input parameters as a string.\"\"\"\n        return html_params(\n            {\n                \"disabled\": self.disabled,\n                \"readonly\": self.read_only,\n            }\n        )\n</code></pre>"},{"location":"api/fields/#starlette_admin.fields.BaseField.additional_css_links","title":"<code>additional_css_links(request, action)</code>","text":"<p>Returns a list of CSS file URLs to include for the current request action.</p> Source code in <code>starlette_admin/fields.py</code> <pre><code>def additional_css_links(\n    self, request: Request, action: RequestAction\n) -&gt; List[str]:\n    \"\"\"Returns a list of CSS file URLs to include for the current request action.\"\"\"\n    return []\n</code></pre>"},{"location":"api/fields/#starlette_admin.fields.BaseField.additional_js_links","title":"<code>additional_js_links(request, action)</code>","text":"<p>Returns a list of JavaScript file URLs to include for the current request action.</p> Source code in <code>starlette_admin/fields.py</code> <pre><code>def additional_js_links(self, request: Request, action: RequestAction) -&gt; List[str]:\n    \"\"\"Returns a list of JavaScript file URLs to include for the current request action.\"\"\"\n    return []\n</code></pre>"},{"location":"api/fields/#starlette_admin.fields.BaseField.dict","title":"<code>dict()</code>","text":"<p>Return the dataclass instance as a dictionary.</p> Source code in <code>starlette_admin/fields.py</code> <pre><code>def dict(self) -&gt; Dict[str, Any]:\n    \"\"\"Return the dataclass instance as a dictionary.\"\"\"\n    return asdict(self)\n</code></pre>"},{"location":"api/fields/#starlette_admin.fields.BaseField.input_params","title":"<code>input_params()</code>","text":"<p>Return HTML input parameters as a string.</p> Source code in <code>starlette_admin/fields.py</code> <pre><code>def input_params(self) -&gt; str:\n    \"\"\"Return HTML input parameters as a string.\"\"\"\n    return html_params(\n        {\n            \"disabled\": self.disabled,\n            \"readonly\": self.read_only,\n        }\n    )\n</code></pre>"},{"location":"api/fields/#starlette_admin.fields.BaseField.parse_form_data","title":"<code>parse_form_data(request, form_data, action)</code>  <code>async</code>","text":"<p>Extracts the value of this field from submitted form data.</p> Source code in <code>starlette_admin/fields.py</code> <pre><code>async def parse_form_data(\n    self, request: Request, form_data: FormData, action: RequestAction\n) -&gt; Any:\n    \"\"\"\n    Extracts the value of this field from submitted form data.\n    \"\"\"\n    return form_data.get(self.id)\n</code></pre>"},{"location":"api/fields/#starlette_admin.fields.BaseField.parse_obj","title":"<code>parse_obj(request, obj)</code>  <code>async</code>","text":"<p>Extracts the value of this field from a model instance.</p> <p>By default, this function returns the value of the attribute with the name <code>self.name</code> from <code>obj</code>. However, this function can be overridden to provide custom logic for computing the value of a field.</p> Example <pre><code># Suppose we have a `User` model with `id`, `first_name`, and `last_name` fields.\n# We define a custom field called `MyCustomField` to compute the full name of the user:\n\nclass MyCustomField(StringField):\n    async def parse_obj(self, request: Request, obj: Any) -&gt; Any:\n        return f\"{obj.first_name} {obj.last_name}\"  # Returns the full name of the user\n\n\n# Then, We can define our view as follows\n\nclass UserView(ModelView):\n    fields = [\"id\", MyCustomField(\"full_name\")]\n</code></pre> Source code in <code>starlette_admin/fields.py</code> <pre><code>async def parse_obj(self, request: Request, obj: Any) -&gt; Any:\n    \"\"\"Extracts the value of this field from a model instance.\n\n    By default, this function returns the value of the attribute with the name `self.name` from `obj`.\n    However, this function can be overridden to provide custom logic for computing the value of a field.\n\n    ??? Example\n\n        ```py\n        # Suppose we have a `User` model with `id`, `first_name`, and `last_name` fields.\n        # We define a custom field called `MyCustomField` to compute the full name of the user:\n\n        class MyCustomField(StringField):\n            async def parse_obj(self, request: Request, obj: Any) -&gt; Any:\n                return f\"{obj.first_name} {obj.last_name}\"  # Returns the full name of the user\n\n\n        # Then, We can define our view as follows\n\n        class UserView(ModelView):\n            fields = [\"id\", MyCustomField(\"full_name\")]\n        ```\n    \"\"\"\n    return getattr(obj, self.name, None)\n</code></pre>"},{"location":"api/fields/#starlette_admin.fields.BaseField.serialize_none_value","title":"<code>serialize_none_value(request, action)</code>  <code>async</code>","text":"<p>Formats a None value for sending to the frontend.</p> <p>Parameters:</p> Name Type Description Default <code>request</code> <code>Request</code> <p>The current request object.</p> required <code>action</code> <code>RequestAction</code> <p>The current request action.</p> required <p>Returns:</p> Name Type Description <code>Any</code> <code>Any</code> <p>The formatted None value.</p> Source code in <code>starlette_admin/fields.py</code> <pre><code>async def serialize_none_value(\n    self, request: Request, action: RequestAction\n) -&gt; Any:\n    \"\"\"Formats a None value for sending to the frontend.\n\n    Args:\n        request: The current request object.\n        action: The current request action.\n\n    Returns:\n        Any: The formatted None value.\n    \"\"\"\n    return None\n</code></pre>"},{"location":"api/fields/#starlette_admin.fields.BaseField.serialize_value","title":"<code>serialize_value(request, value, action)</code>  <code>async</code>","text":"<p>Formats a value for sending to the frontend based on the current request action.</p> <p>Important</p> <p>Make sure this value is JSON Serializable for RequestAction.LIST and RequestAction.API</p> <p>Parameters:</p> Name Type Description Default <code>request</code> <code>Request</code> <p>The current request object.</p> required <code>value</code> <code>Any</code> <p>The value to format.</p> required <code>action</code> <code>RequestAction</code> <p>The current request action.</p> required <p>Returns:</p> Name Type Description <code>Any</code> <code>Any</code> <p>The formatted value.</p> Source code in <code>starlette_admin/fields.py</code> <pre><code>async def serialize_value(\n    self, request: Request, value: Any, action: RequestAction\n) -&gt; Any:\n    \"\"\"Formats a value for sending to the frontend based on the current request action.\n\n    !!! important\n\n        Make sure this value is JSON Serializable for RequestAction.LIST and RequestAction.API\n\n    Args:\n        request: The current request object.\n        value: The value to format.\n        action: The current request action.\n\n    Returns:\n        Any: The formatted value.\n    \"\"\"\n    return value\n</code></pre>"},{"location":"api/fields/#starlette_admin.fields.BooleanField","title":"<code>BooleanField</code>  <code>dataclass</code>","text":"<p>               Bases: <code>BaseField</code></p> <p>This field displays the <code>true/false</code> value of a boolean property.</p> Source code in <code>starlette_admin/fields.py</code> <pre><code>@dataclass\nclass BooleanField(BaseField):\n    \"\"\"This field displays the `true/false` value of a boolean property.\"\"\"\n\n    search_builder_type: Optional[str] = \"bool\"\n    render_function_key: str = \"boolean\"\n    form_template: str = \"forms/boolean.html\"\n    display_template: str = \"displays/boolean.html\"\n\n    async def parse_form_data(\n        self, request: Request, form_data: FormData, action: RequestAction\n    ) -&gt; bool:\n        return form_data.get(self.id) == \"on\"\n\n    async def serialize_value(\n        self, request: Request, value: Any, action: RequestAction\n    ) -&gt; bool:\n        return bool(value)\n</code></pre>"},{"location":"api/fields/#starlette_admin.fields.IntegerField","title":"<code>IntegerField</code>  <code>dataclass</code>","text":"<p>               Bases: <code>NumberField</code></p> <p>This field is used to represent the value of properties that store integer numbers. Erroneous input is ignored and will not be accepted as a value.</p> Source code in <code>starlette_admin/fields.py</code> <pre><code>@dataclass\nclass IntegerField(NumberField):\n    \"\"\"\n    This field is used to represent the value of properties that store integer numbers.\n    Erroneous input is ignored and will not be accepted as a value.\"\"\"\n\n    class_: str = \"field-integer form-control\"\n\n    async def parse_form_data(\n        self, request: Request, form_data: FormData, action: RequestAction\n    ) -&gt; Optional[int]:\n        try:\n            return int(form_data.get(self.id))  # type: ignore\n        except (ValueError, TypeError):\n            return None\n\n    async def serialize_value(\n        self, request: Request, value: Any, action: RequestAction\n    ) -&gt; Any:\n        return int(value)\n</code></pre>"},{"location":"api/fields/#starlette_admin.fields.DecimalField","title":"<code>DecimalField</code>  <code>dataclass</code>","text":"<p>               Bases: <code>NumberField</code></p> <p>This field is used to represent the value of properties that store decimal numbers. Erroneous input is ignored and will not be accepted as a value.</p> Source code in <code>starlette_admin/fields.py</code> <pre><code>@dataclass\nclass DecimalField(NumberField):\n    \"\"\"\n    This field is used to represent the value of properties that store decimal numbers.\n    Erroneous input is ignored and will not be accepted as a value.\n    \"\"\"\n\n    step: str = \"any\"\n    class_: str = \"field-decimal form-control\"\n\n    async def parse_form_data(\n        self, request: Request, form_data: FormData, action: RequestAction\n    ) -&gt; Optional[decimal.Decimal]:\n        try:\n            return decimal.Decimal(form_data.get(self.id))  # type: ignore\n        except (decimal.InvalidOperation, ValueError):\n            return None\n\n    async def serialize_value(\n        self, request: Request, value: Any, action: RequestAction\n    ) -&gt; str:\n        return str(value)\n</code></pre>"},{"location":"api/fields/#starlette_admin.fields.FloatField","title":"<code>FloatField</code>  <code>dataclass</code>","text":"<p>               Bases: <code>StringField</code></p> <p>A text field, except all input is coerced to an float.  Erroneous input is ignored and will not be accepted as a value.</p> Source code in <code>starlette_admin/fields.py</code> <pre><code>@dataclass\nclass FloatField(StringField):\n    \"\"\"\n    A text field, except all input is coerced to an float.\n     Erroneous input is ignored and will not be accepted as a value.\n    \"\"\"\n\n    class_: str = \"field-float form-control\"\n\n    async def parse_form_data(\n        self, request: Request, form_data: FormData, action: RequestAction\n    ) -&gt; Optional[float]:\n        try:\n            return float(form_data.get(self.id))  # type: ignore\n        except ValueError:\n            return None\n\n    async def serialize_value(\n        self, request: Request, value: Any, action: RequestAction\n    ) -&gt; float:\n        return float(value)\n</code></pre>"},{"location":"api/fields/#starlette_admin.fields.StringField","title":"<code>StringField</code>  <code>dataclass</code>","text":"<p>               Bases: <code>BaseField</code></p> <p>This field is used to represent any kind of short text content.</p> Source code in <code>starlette_admin/fields.py</code> <pre><code>@dataclass\nclass StringField(BaseField):\n    \"\"\"This field is used to represent any kind of short text content.\"\"\"\n\n    maxlength: Optional[int] = None\n    minlength: Optional[int] = None\n    search_builder_type: Optional[str] = \"string\"\n    input_type: str = \"text\"\n    class_: str = \"field-string form-control\"\n    placeholder: Optional[str] = None\n\n    def input_params(self) -&gt; str:\n        return html_params(\n            {\n                \"type\": self.input_type,\n                \"minlength\": self.minlength,\n                \"maxlength\": self.maxlength,\n                \"placeholder\": self.placeholder,\n                \"required\": self.required,\n                \"disabled\": self.disabled,\n                \"readonly\": self.read_only,\n            }\n        )\n\n    async def serialize_value(\n        self, request: Request, value: Any, action: RequestAction\n    ) -&gt; Any:\n        return str(value)\n</code></pre>"},{"location":"api/fields/#starlette_admin.fields.TextAreaField","title":"<code>TextAreaField</code>  <code>dataclass</code>","text":"<p>               Bases: <code>StringField</code></p> <p>This field is used to represent any kind of long text content. For short text contents, use StringField</p> Source code in <code>starlette_admin/fields.py</code> <pre><code>@dataclass\nclass TextAreaField(StringField):\n    \"\"\"This field is used to represent any kind of long text content.\n    For short text contents, use [StringField][starlette_admin.fields.StringField]\"\"\"\n\n    rows: int = 6\n    class_: str = \"field-textarea form-control\"\n    form_template: str = \"forms/textarea.html\"\n    display_template: str = \"displays/textarea.html\"\n\n    def input_params(self) -&gt; str:\n        return html_params(\n            {\n                \"rows\": self.rows,\n                \"minlength\": self.minlength,\n                \"maxlength\": self.maxlength,\n                \"placeholder\": self.placeholder,\n                \"required\": self.required,\n                \"disabled\": self.disabled,\n                \"readonly\": self.read_only,\n            }\n        )\n</code></pre>"},{"location":"api/fields/#starlette_admin.fields.TinyMCEEditorField","title":"<code>TinyMCEEditorField</code>  <code>dataclass</code>","text":"<p>               Bases: <code>TextAreaField</code></p> <p>A field that provides a WYSIWYG editor for long text content using the  TinyMCE library.</p> <p>This field can be used as an alternative to the TextAreaField to provide a more sophisticated editor for user input.</p> <p>Parameters:</p> Name Type Description Default <code>version_tinymce</code> <code>str</code> <p>TinyMCE version</p> <code>'6.4'</code> <code>version_tinymce_jquery</code> <code>str</code> <p>TinyMCE jQuery version</p> <code>'2.0'</code> <code>height</code> <code>int</code> <p>Height of the editor</p> <code>300</code> <code>menubar</code> <code>Union[bool, str]</code> <p>Show/hide the menubar in the editor</p> <code>False</code> <code>statusbar</code> <code>bool</code> <p>Show/hide the statusbar in the editor</p> <code>False</code> <code>toolbar</code> <code>str</code> <p>Toolbar options to show in the editor</p> <code>'undo redo | formatselect | bold italic backcolor | alignleft aligncenter alignright alignjustify | bullist numlist outdent indent | removeformat'</code> <code>content_style</code> <code>str</code> <p>CSS style to apply to the editor content</p> <code>'body { font-family: -apple-system, BlinkMacSystemFont, San Francisco, Segoe UI, Roboto, Helvetica Neue, sans-serif; font-size: 14px; -webkit-font-smoothing: antialiased; }'</code> <code>extra_options</code> <code>Dict[str, Any]</code> <p>Other options to pass to TinyMCE</p> <code>dict()</code> Source code in <code>starlette_admin/fields.py</code> <pre><code>@dataclass\nclass TinyMCEEditorField(TextAreaField):\n    \"\"\"A field that provides a WYSIWYG editor for long text content using the\n     [TinyMCE](https://www.tiny.cloud/) library.\n\n    This field can be used as an alternative to the [TextAreaField][starlette_admin.fields.TextAreaField]\n    to provide a more sophisticated editor for user input.\n\n    Parameters:\n        version_tinymce: TinyMCE version\n        version_tinymce_jquery: TinyMCE jQuery version\n        height: Height of the editor\n        menubar: Show/hide the menubar in the editor\n        statusbar: Show/hide the statusbar in the editor\n        toolbar: Toolbar options to show in the editor\n        content_style: CSS style to apply to the editor content\n        extra_options: Other options to pass to TinyMCE\n    \"\"\"\n\n    class_: str = \"field-tinymce-editor form-control\"\n    display_template: str = \"displays/tinymce.html\"\n    version_tinymce: str = \"6.4\"\n    version_tinymce_jquery: str = \"2.0\"\n    height: int = 300\n    menubar: Union[bool, str] = False\n    statusbar: bool = False\n    toolbar: str = (\n        \"undo redo | formatselect | bold italic backcolor | alignleft aligncenter\"\n        \" alignright alignjustify | bullist numlist outdent indent | removeformat\"\n    )\n    content_style: str = (\n        \"body { font-family: -apple-system, BlinkMacSystemFont, San Francisco, Segoe\"\n        \" UI, Roboto, Helvetica Neue, sans-serif; font-size: 14px;\"\n        \" -webkit-font-smoothing: antialiased; }\"\n    )\n    extra_options: Dict[str, Any] = dc_field(default_factory=dict)\n    \"\"\"For more options, see the [TinyMCE | Documentation](https://www.tiny.cloud/docs/tinymce/6/)\"\"\"\n\n    def additional_js_links(self, request: Request, action: RequestAction) -&gt; List[str]:\n        if action.is_form():\n            return [\n                f\"https://cdn.jsdelivr.net/npm/tinymce@{self.version_tinymce}/tinymce.min.js\",\n                f\"https://cdn.jsdelivr.net/npm/@tinymce/tinymce-jquery@{self.version_tinymce_jquery}/dist/tinymce-jquery.min.js\",\n            ]\n        return []\n\n    def input_params(self) -&gt; str:\n        _options = {\n            \"height\": self.height,\n            \"menubar\": self.menubar,\n            \"statusbar\": self.statusbar,\n            \"toolbar\": self.toolbar,\n            \"content_style\": self.content_style,\n            **self.extra_options,\n        }\n\n        return (\n            super().input_params()\n            + \" \"\n            + html_params({\"data-options\": json.dumps(_options)})\n        )\n</code></pre>"},{"location":"api/fields/#starlette_admin.fields.TinyMCEEditorField.extra_options","title":"<code>extra_options = dc_field(default_factory=dict)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>For more options, see the TinyMCE | Documentation</p>"},{"location":"api/fields/#starlette_admin.fields.TagsField","title":"<code>TagsField</code>  <code>dataclass</code>","text":"<p>               Bases: <code>BaseField</code></p> <p>This field is used to represent the value of properties that store a list of string values. Render as <code>select2</code> tags input.</p> Source code in <code>starlette_admin/fields.py</code> <pre><code>@dataclass\nclass TagsField(BaseField):\n    \"\"\"\n    This field is used to represent the value of properties that store a list of\n    string values. Render as `select2` tags input.\n    \"\"\"\n\n    form_template: str = \"forms/tags.html\"\n    form_js: str = \"js/field/forms/tags.js\"\n    class_: str = \"field-tags form-control form-select\"\n\n    async def parse_form_data(\n        self, request: Request, form_data: FormData, action: RequestAction\n    ) -&gt; List[str]:\n        return form_data.getlist(self.id)  # type: ignore\n\n    def additional_css_links(\n        self, request: Request, action: RequestAction\n    ) -&gt; List[str]:\n        if action.is_form():\n            return [\n                str(\n                    request.url_for(\n                        f\"{request.app.state.ROUTE_NAME}:statics\",\n                        path=\"css/select2.min.css\",\n                    )\n                )\n            ]\n        return []\n\n    def additional_js_links(self, request: Request, action: RequestAction) -&gt; List[str]:\n        if action.is_form():\n            return [\n                str(\n                    request.url_for(\n                        f\"{request.app.state.ROUTE_NAME}:statics\",\n                        path=\"js/vendor/select2.min.js\",\n                    )\n                )\n            ]\n        return []\n</code></pre>"},{"location":"api/fields/#starlette_admin.fields.EmailField","title":"<code>EmailField</code>  <code>dataclass</code>","text":"<p>               Bases: <code>StringField</code></p> <p>This field is used to represent a text content that stores a single email address.</p> Source code in <code>starlette_admin/fields.py</code> <pre><code>@dataclass\nclass EmailField(StringField):\n    \"\"\"This field is used to represent a text content\n    that stores a single email address.\"\"\"\n\n    input_type: str = \"email\"\n    render_function_key: str = \"email\"\n    class_: str = \"field-email form-control\"\n    display_template: str = \"displays/email.html\"\n</code></pre>"},{"location":"api/fields/#starlette_admin.fields.URLField","title":"<code>URLField</code>  <code>dataclass</code>","text":"<p>               Bases: <code>StringField</code></p> <p>This field is used to represent a text content that stores a single URL.</p> Source code in <code>starlette_admin/fields.py</code> <pre><code>@dataclass\nclass URLField(StringField):\n    \"\"\"This field is used to represent a text content that stores a single URL.\"\"\"\n\n    input_type: str = \"url\"\n    render_function_key: str = \"url\"\n    class_: str = \"field-url form-control\"\n    display_template: str = \"displays/url.html\"\n</code></pre>"},{"location":"api/fields/#starlette_admin.fields.PhoneField","title":"<code>PhoneField</code>  <code>dataclass</code>","text":"<p>               Bases: <code>StringField</code></p> <p>A StringField, except renders an <code>&lt;input type=\"phone\"&gt;</code>.</p> Source code in <code>starlette_admin/fields.py</code> <pre><code>@dataclass\nclass PhoneField(StringField):\n    \"\"\"A StringField, except renders an `&lt;input type=\"phone\"&gt;`.\"\"\"\n\n    input_type: str = \"phone\"\n    class_: str = \"field-phone form-control\"\n</code></pre>"},{"location":"api/fields/#starlette_admin.fields.ColorField","title":"<code>ColorField</code>  <code>dataclass</code>","text":"<p>               Bases: <code>StringField</code></p> <p>A StringField, except renders an <code>&lt;input type=\"color\"&gt;</code>.</p> Source code in <code>starlette_admin/fields.py</code> <pre><code>@dataclass\nclass ColorField(StringField):\n    \"\"\"A StringField, except renders an `&lt;input type=\"color\"&gt;`.\"\"\"\n\n    input_type: str = \"color\"\n    class_: str = \"field-color form-control form-control-color\"\n</code></pre>"},{"location":"api/fields/#starlette_admin.fields.PasswordField","title":"<code>PasswordField</code>  <code>dataclass</code>","text":"<p>               Bases: <code>StringField</code></p> <p>A StringField, except renders an <code>&lt;input type=\"password\"&gt;</code>.</p> Source code in <code>starlette_admin/fields.py</code> <pre><code>@dataclass\nclass PasswordField(StringField):\n    \"\"\"A StringField, except renders an `&lt;input type=\"password\"&gt;`.\"\"\"\n\n    input_type: str = \"password\"\n    class_: str = \"field-password form-control\"\n</code></pre>"},{"location":"api/fields/#starlette_admin.fields.EnumField","title":"<code>EnumField</code>  <code>dataclass</code>","text":"<p>               Bases: <code>StringField</code></p> <p>Enumeration Field. It takes a python <code>enum.Enum</code> class or a list of (value, label) pairs. It can also be a list of only values, in which case the value is used as the label. Example:     <pre><code>class Status(str, enum.Enum):\n    NEW = \"new\"\n    ONGOING = \"ongoing\"\n    DONE = \"done\"\n\nclass MyModel:\n    status: Optional[Status] = None\n\nclass MyModelView(ModelView):\n    fields = [EnumField(\"status\", enum=Status)]\n</code></pre></p> <pre><code>```python\nclass MyModel:\n    language: str\n\nclass MyModelView(ModelView):\n    fields = [\n        EnumField(\n            \"language\",\n            choices=[(\"cpp\", \"C++\"), (\"py\", \"Python\"), (\"text\", \"Plain Text\")],\n        )\n    ]\n```\n</code></pre> Source code in <code>starlette_admin/fields.py</code> <pre><code>@dataclass\nclass EnumField(StringField):\n    \"\"\"\n    Enumeration Field.\n    It takes a python `enum.Enum` class or a list of *(value, label)* pairs.\n    It can also be a list of only values, in which case the value is used as the label.\n    Example:\n        ```python\n        class Status(str, enum.Enum):\n            NEW = \"new\"\n            ONGOING = \"ongoing\"\n            DONE = \"done\"\n\n        class MyModel:\n            status: Optional[Status] = None\n\n        class MyModelView(ModelView):\n            fields = [EnumField(\"status\", enum=Status)]\n        ```\n\n        ```python\n        class MyModel:\n            language: str\n\n        class MyModelView(ModelView):\n            fields = [\n                EnumField(\n                    \"language\",\n                    choices=[(\"cpp\", \"C++\"), (\"py\", \"Python\"), (\"text\", \"Plain Text\")],\n                )\n            ]\n        ```\n    \"\"\"\n\n    multiple: bool = False\n    enum: Optional[Type[Enum]] = None\n    choices: Union[Sequence[str], Sequence[Tuple[Any, str]], None] = None\n    choices_loader: Optional[\n        Callable[[Request], Union[Sequence[str], Sequence[Tuple[Any, str]]]]\n    ] = dc_field(default=None, compare=False)\n    form_template: str = \"forms/enum.html\"\n    class_: str = \"field-enum form-control form-select\"\n    coerce: Callable[[Any], Any] = str\n    select2: bool = True\n\n    def __post_init__(self) -&gt; None:\n        if self.choices and not isinstance(self.choices[0], (list, tuple)):\n            self.choices = list(zip(self.choices, self.choices))  # type: ignore\n        elif self.enum:\n            self.choices = [(e.value, e.name.replace(\"_\", \" \")) for e in self.enum]\n            self.coerce = int if issubclass(self.enum, IntEnum) else str\n        elif not self.choices and self.choices_loader is None:\n            raise ValueError(\n                \"EnumField required a list of choices, enum class or a choices_loader for dynamic choices\"\n            )\n        super().__post_init__()\n\n    async def parse_form_data(\n        self, request: Request, form_data: FormData, action: RequestAction\n    ) -&gt; Any:\n        return (\n            list(map(self.coerce, form_data.getlist(self.id)))\n            if self.multiple\n            else (\n                self.coerce(form_data.get(self.id)) if form_data.get(self.id) else None\n            )\n        )\n\n    def _get_choices(self, request: Request) -&gt; Any:\n        return (\n            self.choices\n            if self.choices_loader is None\n            else self.choices_loader(request)\n        )\n\n    def _get_label(self, value: Any, request: Request) -&gt; Any:\n        for v, label in self._get_choices(request):\n            if value == v:\n                return label\n        raise ValueError(f\"Invalid choice value: {value}\")\n\n    async def serialize_value(\n        self, request: Request, value: Any, action: RequestAction\n    ) -&gt; Any:\n        if isinstance(value, Enum):\n            value = value.value\n        labels = [\n            (self._get_label(v, request) if action != RequestAction.EDIT else v)\n            for v in (value if self.multiple else [value])\n        ]\n        return labels if self.multiple else labels[0]\n\n    def additional_css_links(\n        self, request: Request, action: RequestAction\n    ) -&gt; List[str]:\n        if self.select2 and action.is_form():\n            return [\n                str(\n                    request.url_for(\n                        f\"{request.app.state.ROUTE_NAME}:statics\",\n                        path=\"css/select2.min.css\",\n                    )\n                )\n            ]\n        return []\n\n    def additional_js_links(self, request: Request, action: RequestAction) -&gt; List[str]:\n        if self.select2 and action.is_form():\n            return [\n                str(\n                    request.url_for(\n                        f\"{request.app.state.ROUTE_NAME}:statics\",\n                        path=\"js/vendor/select2.min.js\",\n                    )\n                )\n            ]\n        return []\n\n    @classmethod\n    def from_enum(\n        cls,\n        name: str,\n        enum_type: Type[Enum],\n        multiple: bool = False,\n        **kwargs: Dict[str, Any],\n    ) -&gt; \"EnumField\":\n        warnings.warn(\n            f'This method is deprecated. Use EnumField(\"name\", enum={enum_type.__name__}) instead.',\n            DeprecationWarning,\n            stacklevel=1,\n        )\n        return cls(name, enum=enum_type, multiple=multiple, **kwargs)  # type: ignore\n\n    @classmethod\n    def from_choices(\n        cls,\n        name: str,\n        choices: Union[Sequence[str], Sequence[Tuple[str, str]], None],\n        multiple: bool = False,\n        **kwargs: Dict[str, Any],\n    ) -&gt; \"EnumField\":\n        warnings.warn(\n            f'This method is deprecated. Use EnumField(\"name\", choices={choices}) instead.',\n            DeprecationWarning,\n            stacklevel=1,\n        )\n        return cls(name, choices=choices, multiple=multiple, **kwargs)  # type: ignore\n</code></pre>"},{"location":"api/fields/#starlette_admin.fields.TimeZoneField","title":"<code>TimeZoneField</code>  <code>dataclass</code>","text":"<p>               Bases: <code>EnumField</code></p> <p>This field is used to represent the name of a timezone (eg. Africa/Porto-Novo)</p> Source code in <code>starlette_admin/fields.py</code> <pre><code>@dataclass\nclass TimeZoneField(EnumField):\n    \"\"\"This field is used to represent the name of a timezone (eg. Africa/Porto-Novo)\"\"\"\n\n    def __post_init__(self) -&gt; None:\n        if self.choices is None:\n            self.choices = [\n                (self.coerce(x), x.replace(\"_\", \" \")) for x in common_timezones\n            ]\n        super().__post_init__()\n</code></pre>"},{"location":"api/fields/#starlette_admin.fields.CountryField","title":"<code>CountryField</code>  <code>dataclass</code>","text":"<p>               Bases: <code>EnumField</code></p> <p>This field is used to represent the name that corresponds to the country code stored in your database</p> Source code in <code>starlette_admin/fields.py</code> <pre><code>@dataclass\nclass CountryField(EnumField):\n    \"\"\"This field is used to represent the name that corresponds to the country code stored in your database\"\"\"\n\n    def __post_init__(self) -&gt; None:\n        try:\n            import babel  # noqa\n        except ImportError as err:\n            raise ImportError(\n                \"'babel' package is required to use 'CountryField'. Install it with `pip install starlette-admin[i18n]`\"\n            ) from err\n        self.choices_loader = lambda request: get_countries_list()\n        super().__post_init__()\n</code></pre>"},{"location":"api/fields/#starlette_admin.fields.CurrencyField","title":"<code>CurrencyField</code>  <code>dataclass</code>","text":"<p>               Bases: <code>EnumField</code></p> <p>This field is used to represent a value that stores the 3-letter ISO 4217 code of currency</p> Source code in <code>starlette_admin/fields.py</code> <pre><code>@dataclass\nclass CurrencyField(EnumField):\n    \"\"\"\n    This field is used to represent a value that stores the\n    [3-letter ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code of currency\n    \"\"\"\n\n    def __post_init__(self) -&gt; None:\n        try:\n            import babel  # noqa\n        except ImportError as err:\n            raise ImportError(\n                \"'babel' package is required to use 'CurrencyField'. Install it with `pip install starlette-admin[i18n]`\"\n            ) from err\n        self.choices_loader = lambda request: get_currencies_list()\n        super().__post_init__()\n</code></pre>"},{"location":"api/fields/#starlette_admin.fields.DateTimeField","title":"<code>DateTimeField</code>  <code>dataclass</code>","text":"<p>               Bases: <code>NumberField</code></p> <p>This field is used to represent a value that stores a python datetime.datetime object Parameters:     search_format: moment.js format to send for searching. Use None for iso Format     output_format: display output format</p> Source code in <code>starlette_admin/fields.py</code> <pre><code>@dataclass\nclass DateTimeField(NumberField):\n    \"\"\"\n    This field is used to represent a value that stores a python datetime.datetime object\n    Parameters:\n        search_format: moment.js format to send for searching. Use None for iso Format\n        output_format: display output format\n    \"\"\"\n\n    input_type: str = \"datetime-local\"\n    class_: str = \"field-datetime form-control\"\n    search_builder_type: str = \"moment-LL LT\"\n    output_format: Optional[str] = None\n    search_format: Optional[str] = None\n    form_alt_format: Optional[str] = \"F j, Y  H:i:S\"\n\n    def input_params(self) -&gt; str:\n        return html_params(\n            {\n                \"type\": self.input_type,\n                \"min\": self.min,\n                \"max\": self.max,\n                \"step\": self.step,\n                \"data_alt_format\": self.form_alt_format,\n                \"data_locale\": get_locale(),\n                \"placeholder\": self.placeholder,\n                \"required\": self.required,\n                \"disabled\": self.disabled,\n                \"readonly\": self.read_only,\n            }\n        )\n\n    async def parse_form_data(\n        self, request: Request, form_data: FormData, action: RequestAction\n    ) -&gt; Union[datetime, None]:\n        try:\n            dt = datetime.fromisoformat(form_data.get(self.id))  # type: ignore\n        except (TypeError, ValueError):\n            return None\n\n        # Preserve pre-timezone conversion behaviour\n        if not is_timezone_conversion_enabled():\n            return dt\n\n        if dt.tzinfo is not None:\n            database_tz = get_database_tzinfo()\n            return dt.astimezone(database_tz).replace(tzinfo=None)\n\n        # Native datetime, assume it's in the user's timezone\n        user_tz = get_tzinfo()\n        database_tz = get_database_tzinfo()\n\n        return dt.replace(tzinfo=user_tz).astimezone(database_tz).replace(tzinfo=None)\n\n    async def serialize_value(\n        self, request: Request, value: Any, action: RequestAction\n    ) -&gt; str:\n        assert isinstance(value, datetime), f\"Expected datetime, got {type(value)}\"\n\n        # Preserve pre-timezone conversion behaviour\n        if not is_timezone_conversion_enabled():\n            if action != RequestAction.EDIT:\n                return format_datetime(value, self.output_format)\n            return value.isoformat()\n\n        user_tz = get_tzinfo()\n\n        if value.tzinfo is None:\n            # native datetime from db, assume it's in database timezone\n            database_tz = get_database_tzinfo()\n            value = value.replace(tzinfo=database_tz)\n\n        if action != RequestAction.EDIT:\n            return format_datetime(value, self.output_format, user_tz)\n\n        # For EDIT action, convert to user timezone and return as naive datetime for datetime-local input\n        converted_value = value.astimezone(user_tz)\n        return converted_value.replace(tzinfo=None).isoformat()\n\n    def additional_css_links(\n        self, request: Request, action: RequestAction\n    ) -&gt; List[str]:\n        if action.is_form():\n            return [\n                str(\n                    request.url_for(\n                        f\"{request.app.state.ROUTE_NAME}:statics\",\n                        path=\"css/flatpickr.min.css\",\n                    )\n                )\n            ]\n        return []\n\n    def additional_js_links(self, request: Request, action: RequestAction) -&gt; List[str]:\n        _links = [\n            str(\n                request.url_for(\n                    f\"{request.app.state.ROUTE_NAME}:statics\",\n                    path=\"js/vendor/flatpickr.min.js\",\n                )\n            )\n        ]\n        if get_locale() != \"en\":\n            _links.append(\n                str(\n                    request.url_for(\n                        f\"{request.app.state.ROUTE_NAME}:statics\",\n                        path=f\"i18n/flatpickr/{get_locale()}.js\",\n                    )\n                )\n            )\n        if action.is_form():\n            return _links\n        return []\n</code></pre>"},{"location":"api/fields/#starlette_admin.fields.DateField","title":"<code>DateField</code>  <code>dataclass</code>","text":"<p>               Bases: <code>DateTimeField</code></p> <p>This field is used to represent a value that stores a python datetime.date object Parameters:     search_format: moment.js format to send for searching. Use None for iso Format     output_format: Set display output format</p> Source code in <code>starlette_admin/fields.py</code> <pre><code>@dataclass\nclass DateField(DateTimeField):\n    \"\"\"\n    This field is used to represent a value that stores a python datetime.date object\n    Parameters:\n        search_format: moment.js format to send for searching. Use None for iso Format\n        output_format: Set display output format\n    \"\"\"\n\n    input_type: str = \"date\"\n    class_: str = \"field-date form-control\"\n    output_format: Optional[str] = None\n    search_format: str = \"YYYY-MM-DD\"\n    search_builder_type: str = \"moment-LL\"\n    form_alt_format: Optional[str] = \"F j, Y\"\n\n    async def parse_form_data(\n        self, request: Request, form_data: FormData, action: RequestAction\n    ) -&gt; Any:\n        try:\n            return date.fromisoformat(form_data.get(self.id))  # type: ignore\n        except (TypeError, ValueError):\n            return None\n\n    async def serialize_value(\n        self, request: Request, value: Any, action: RequestAction\n    ) -&gt; str:\n        assert isinstance(value, date), f\"Expect date, got  {type(value)}\"\n        if action != RequestAction.EDIT:\n            return format_date(value, self.output_format)\n        return value.isoformat()\n</code></pre>"},{"location":"api/fields/#starlette_admin.fields.TimeField","title":"<code>TimeField</code>  <code>dataclass</code>","text":"<p>               Bases: <code>DateTimeField</code></p> <p>This field is used to represent a value that stores a python datetime.time object Parameters:     search_format: Format to send for search. Use None for iso Format     output_format: Set display output format</p> Source code in <code>starlette_admin/fields.py</code> <pre><code>@dataclass\nclass TimeField(DateTimeField):\n    \"\"\"\n    This field is used to represent a value that stores a python datetime.time object\n    Parameters:\n        search_format: Format to send for search. Use None for iso Format\n        output_format: Set display output format\n    \"\"\"\n\n    input_type: str = \"time\"\n    class_: str = \"field-time form-control\"\n    search_builder_type: str = \"moment-LTS\"\n    output_format: Optional[str] = None\n    search_format: str = \"HH:mm:ss\"\n    form_alt_format: Optional[str] = \"H:i:S\"\n\n    async def parse_form_data(\n        self, request: Request, form_data: FormData, action: RequestAction\n    ) -&gt; Any:\n        try:\n            return time.fromisoformat(form_data.get(self.id))  # type: ignore\n        except (TypeError, ValueError):\n            return None\n\n    async def serialize_value(\n        self, request: Request, value: Any, action: RequestAction\n    ) -&gt; str:\n        assert isinstance(value, time), f\"Expect time, got  {type(value)}\"\n        if action != RequestAction.EDIT:\n            return format_time(value, self.output_format)\n        return value.isoformat()\n</code></pre>"},{"location":"api/fields/#starlette_admin.fields.ArrowField","title":"<code>ArrowField</code>  <code>dataclass</code>","text":"<p>               Bases: <code>DateTimeField</code></p> <p>This field is used to represent sqlalchemy_utils.types.arrow.ArrowType</p> Source code in <code>starlette_admin/fields.py</code> <pre><code>@dataclass\nclass ArrowField(DateTimeField):\n    \"\"\"\n    This field is used to represent sqlalchemy_utils.types.arrow.ArrowType\n    \"\"\"\n\n    def __post_init__(self) -&gt; None:\n        if not arrow:  # pragma: no cover\n            raise ImportError(\"'arrow' package is required to use 'ArrowField'\")\n        super().__post_init__()\n\n    async def parse_form_data(\n        self, request: Request, form_data: FormData, action: RequestAction\n    ) -&gt; Any:\n        # Preserve pre-timezone conversion behaviour\n        if not is_timezone_conversion_enabled():\n            try:\n                return arrow.get(form_data.get(self.id))  # type: ignore\n            except (TypeError, arrow.parser.ParserError):  # pragma: no cover\n                return None\n\n        dt = await super().parse_form_data(request, form_data, action)\n        if dt is None:\n            return None\n\n        return arrow.get(dt)\n\n    async def serialize_value(\n        self, request: Request, value: Any, action: RequestAction\n    ) -&gt; str:\n        assert isinstance(value, arrow.Arrow), f\"Expected Arrow, got  {type(value)}\"\n\n        # Preserve pre-timezone conversion behaviour\n        if not is_timezone_conversion_enabled():\n            if action != RequestAction.EDIT:\n                return value.humanize(locale=get_locale())\n\n            return value.isoformat()\n\n        if action != RequestAction.EDIT:\n            user_tz = get_tzinfo()\n            return value.to(user_tz).humanize(locale=get_locale())\n\n        return await super().serialize_value(request, value.datetime, action)\n</code></pre>"},{"location":"api/fields/#starlette_admin.fields.JSONField","title":"<code>JSONField</code>  <code>dataclass</code>","text":"<p>               Bases: <code>BaseField</code></p> <p>This field render jsoneditor and represent a value that stores python dict object. Erroneous input is ignored and will not be accepted as a value.</p> Source code in <code>starlette_admin/fields.py</code> <pre><code>@dataclass\nclass JSONField(BaseField):\n    \"\"\"\n    This field render jsoneditor and represent a value that stores python dict object.\n    Erroneous input is ignored and will not be accepted as a value.\"\"\"\n\n    height: str = \"20em\"\n    modes: Optional[Sequence[str]] = None\n    render_function_key: str = \"json\"\n    form_template: str = \"forms/json.html\"\n    display_template: str = \"displays/json.html\"\n\n    def __post_init__(self) -&gt; None:\n        if self.modes is None:\n            self.modes = [\"view\"] if self.read_only else [\"tree\", \"code\"]\n        super().__post_init__()\n\n    async def parse_form_data(\n        self, request: Request, form_data: FormData, action: RequestAction\n    ) -&gt; Optional[Dict[str, Any]]:\n        try:\n            value = form_data.get(self.id)\n            return json.loads(value) if value is not None else None  # type: ignore\n        except JSONDecodeError:\n            return None\n\n    def additional_css_links(\n        self, request: Request, action: RequestAction\n    ) -&gt; List[str]:\n        if action.is_form():\n            return [\n                str(\n                    request.url_for(\n                        f\"{request.app.state.ROUTE_NAME}:statics\",\n                        path=\"css/jsoneditor.min.css\",\n                    )\n                )\n            ]\n        return []\n\n    def additional_js_links(self, request: Request, action: RequestAction) -&gt; List[str]:\n        if action.is_form():\n            return [\n                str(\n                    request.url_for(\n                        f\"{request.app.state.ROUTE_NAME}:statics\",\n                        path=\"js/vendor/jsoneditor.min.js\",\n                    )\n                )\n            ]\n        return []\n</code></pre>"},{"location":"api/fields/#starlette_admin.fields.FileField","title":"<code>FileField</code>  <code>dataclass</code>","text":"<p>               Bases: <code>BaseField</code></p> <p>Renders a file upload field. This field is used to represent a value that stores starlette UploadFile object. For displaying value, this field wait for three properties which is <code>filename</code>, <code>content-type</code> and <code>url</code>. Use <code>multiple=True</code> for multiple file upload When user ask for delete on editing page, the second part of the returned tuple is True.</p> Source code in <code>starlette_admin/fields.py</code> <pre><code>@dataclass\nclass FileField(BaseField):\n    \"\"\"\n    Renders a file upload field.\n    This field is used to represent a value that stores starlette UploadFile object.\n    For displaying value, this field wait for three properties which is `filename`,\n    `content-type` and `url`. Use `multiple=True` for multiple file upload\n    When user ask for delete on editing page, the second part of the returned tuple is True.\n    \"\"\"\n\n    accept: Optional[str] = None\n    multiple: bool = False\n    render_function_key: str = \"file\"\n    form_template: str = \"forms/file.html\"\n    display_template: str = \"displays/file.html\"\n\n    async def parse_form_data(\n        self, request: Request, form_data: FormData, action: RequestAction\n    ) -&gt; Tuple[Union[UploadFile, List[UploadFile], None], bool]:\n        should_be_deleted = form_data.get(f\"_{self.id}-delete\") == \"on\"\n        if self.multiple:\n            files = form_data.getlist(self.id)\n            return [f for f in files if not is_empty_file(f.file)], should_be_deleted  # type: ignore\n        file = form_data.get(self.id)\n        return (\n            None if (file and is_empty_file(file.file)) else file  # type: ignore\n        ), should_be_deleted\n\n    def _isvalid_value(self, value: Any) -&gt; bool:\n        return value is not None and all(\n            (\n                hasattr(v, \"url\")\n                or (isinstance(v, dict) and v.get(\"url\", None) is not None)\n            )\n            for v in (value if self.multiple else [value])\n        )\n\n    def input_params(self) -&gt; str:\n        return html_params(\n            {\n                \"accept\": self.accept,\n                \"disabled\": self.disabled,\n                \"readonly\": self.read_only,\n                \"multiple\": self.multiple,\n            }\n        )\n</code></pre>"},{"location":"api/fields/#starlette_admin.fields.ImageField","title":"<code>ImageField</code>  <code>dataclass</code>","text":"<p>               Bases: <code>FileField</code></p> <p>FileField with <code>accept=\"image/*\"</code>.</p> Source code in <code>starlette_admin/fields.py</code> <pre><code>@dataclass\nclass ImageField(FileField):\n    \"\"\"\n    FileField with `accept=\"image/*\"`.\n    \"\"\"\n\n    accept: Optional[str] = \"image/*\"\n    render_function_key: str = \"image\"\n    form_template: str = \"forms/image.html\"\n    display_template: str = \"displays/image.html\"\n</code></pre>"},{"location":"api/fields/#starlette_admin.fields.RelationField","title":"<code>RelationField</code>  <code>dataclass</code>","text":"<p>               Bases: <code>BaseField</code></p> <p>A field representing a relation between two data models.</p> <p>This field should not be used directly; instead, use either the HasOne or HasMany fields to specify a relation between your models.</p> <p>Important</p> <p>It is important to add both models in your admin interface.</p> <p>Parameters:</p> Name Type Description Default <code>identity</code> <code>Optional[str]</code> <p>Foreign ModelView identity</p> <code>None</code> Example <pre><code>class Author:\n    id: Optional[int]\n    name: str\n    books: List[\"Book\"]\n\nclass Book:\n    id: Optional[int]\n    title: str\n    author: Optional[\"Author\"]\n\nclass AuthorView(ModelView):\n    fields = [\n        IntegerField(\"id\"),\n        StringField(\"name\"),\n        HasMany(\"books\", identity=\"book\"),\n    ]\n\nclass BookView(ModelView):\n    fields = [\n        IntegerField(\"id\"),\n        StringField(\"title\"),\n        HasOne(\"author\", identity=\"author\"),\n    ]\n...\nadmin.add_view(AuthorView(Author, identity=\"author\"))\nadmin.add_view(BookView(Book, identity=\"book\"))\n...\n</code></pre> Source code in <code>starlette_admin/fields.py</code> <pre><code>@dataclass\nclass RelationField(BaseField):\n    \"\"\"\n    A field representing a relation between two data models.\n\n    This field should not be used directly; instead, use either the [HasOne][starlette_admin.fields.HasOne]\n    or [HasMany][starlette_admin.fields.HasMany] fields to specify a relation\n    between your models.\n\n    !!! important\n\n        It is important to add both models in your admin interface.\n\n    Parameters:\n        identity: Foreign ModelView identity\n\n\n    ??? Example\n\n        ```py\n        class Author:\n            id: Optional[int]\n            name: str\n            books: List[\"Book\"]\n\n        class Book:\n            id: Optional[int]\n            title: str\n            author: Optional[\"Author\"]\n\n        class AuthorView(ModelView):\n            fields = [\n                IntegerField(\"id\"),\n                StringField(\"name\"),\n                HasMany(\"books\", identity=\"book\"),\n            ]\n\n        class BookView(ModelView):\n            fields = [\n                IntegerField(\"id\"),\n                StringField(\"title\"),\n                HasOne(\"author\", identity=\"author\"),\n            ]\n        ...\n        admin.add_view(AuthorView(Author, identity=\"author\"))\n        admin.add_view(BookView(Book, identity=\"book\"))\n        ...\n        ```\n    \"\"\"\n\n    identity: Optional[str] = None\n    multiple: bool = False\n    render_function_key: str = \"relation\"\n    form_template: str = \"forms/relation.html\"\n    display_template: str = \"displays/relation.html\"\n\n    async def parse_form_data(\n        self, request: Request, form_data: FormData, action: RequestAction\n    ) -&gt; Any:\n        if self.multiple:\n            return form_data.getlist(self.id)\n        return form_data.get(self.id)\n\n    def additional_css_links(\n        self, request: Request, action: RequestAction\n    ) -&gt; List[str]:\n        if action.is_form():\n            return [\n                str(\n                    request.url_for(\n                        f\"{request.app.state.ROUTE_NAME}:statics\",\n                        path=\"css/select2.min.css\",\n                    )\n                )\n            ]\n        return []\n\n    def additional_js_links(self, request: Request, action: RequestAction) -&gt; List[str]:\n        if action.is_form():\n            return [\n                str(\n                    request.url_for(\n                        f\"{request.app.state.ROUTE_NAME}:statics\",\n                        path=\"js/vendor/select2.min.js\",\n                    )\n                )\n            ]\n        return []\n</code></pre>"},{"location":"api/fields/#starlette_admin.fields.HasOne","title":"<code>HasOne</code>  <code>dataclass</code>","text":"<p>               Bases: <code>RelationField</code></p> <p>A field representing a \"has-one\" relation between two models.</p> Source code in <code>starlette_admin/fields.py</code> <pre><code>@dataclass\nclass HasOne(RelationField):\n    \"\"\"\n    A field representing a \"has-one\" relation between two models.\n    \"\"\"\n</code></pre>"},{"location":"api/fields/#starlette_admin.fields.HasMany","title":"<code>HasMany</code>  <code>dataclass</code>","text":"<p>               Bases: <code>RelationField</code></p> <p>A field representing a \"has-many\" relationship between two models.</p> Source code in <code>starlette_admin/fields.py</code> <pre><code>@dataclass\nclass HasMany(RelationField):\n    \"\"\"A field representing a \"has-many\" relationship between two models.\"\"\"\n\n    multiple: bool = True\n    collection_class: Union[Type[Collection[Any]], Callable[[], Collection[Any]]] = list\n</code></pre>"},{"location":"api/fields/#starlette_admin.fields.ListField","title":"<code>ListField</code>  <code>dataclass</code>","text":"<p>               Bases: <code>BaseField</code></p> <p>Encapsulate an ordered list of multiple instances of the same field type, keeping data as a list.</p> <p>Usage</p> <pre><code>class MyModel:\n    id: Optional[int]\n    values: List[str]\n\nclass ModelView(BaseModelView):\n    fields = [IntegerField(\"id\"), ListField(StringField(\"values\")]\n</code></pre> Source code in <code>starlette_admin/fields.py</code> <pre><code>@dataclass(init=False)\nclass ListField(BaseField):\n    \"\"\"\n    Encapsulate an ordered list of multiple instances of the same field type,\n    keeping data as a list.\n\n    !!! usage\n\n        ```python\n        class MyModel:\n            id: Optional[int]\n            values: List[str]\n\n        class ModelView(BaseModelView):\n            fields = [IntegerField(\"id\"), ListField(StringField(\"values\")]\n        ```\n    \"\"\"\n\n    form_template: str = \"forms/list.html\"\n    display_template: str = \"displays/list.html\"\n    search_builder_type: str = \"array\"\n    field: BaseField = dc_field(default_factory=lambda: BaseField(\"\"))\n\n    def __init__(self, field: BaseField, required: bool = False) -&gt; None:\n        self.field = field\n        self.name = field.name\n        self.required = required\n        self.__post_init__()\n\n    def __post_init__(self) -&gt; None:\n        super().__post_init__()\n        self.field.id = \"\"\n        if isinstance(self.field, CollectionField):\n            self.field._propagate_id()\n\n    async def parse_form_data(\n        self, request: Request, form_data: FormData, action: RequestAction\n    ) -&gt; Any:\n        indices = self._extra_indices(form_data)\n        value = []\n        for index in indices:\n            self.field.id = f\"{self.id}.{index}\"\n            if isinstance(self.field, CollectionField):\n                self.field._propagate_id()\n            value.append(await self.field.parse_form_data(request, form_data, action))\n        return value\n\n    async def serialize_value(\n        self, request: Request, value: Any, action: RequestAction\n    ) -&gt; Any:\n        serialized_value = []\n        for item in value:\n            serialized_item_value = None\n            if item is not None:\n                serialized_item_value = await self.field.serialize_value(\n                    request, item, action\n                )\n            serialized_value.append(serialized_item_value)\n        return serialized_value\n\n    def _extra_indices(self, form_data: FormData) -&gt; List[int]:\n        \"\"\"\n        Return list of all indices.  For example, if field id is `foo` and\n        form_data contains following keys ['foo.0.bar', 'foo.1.baz'], then the indices are [0,1].\n        Note that some numbers can be skipped. For example, you may have [0,1,3,8]\n        as indices.\n        \"\"\"\n        indices = set()\n        for name in form_data:\n            if name.startswith(self.id):\n                idx = name[len(self.id) + 1 :].split(\".\", maxsplit=1)[0]\n                if idx.isdigit():\n                    indices.add(int(idx))\n        return sorted(indices)\n\n    def _field_at(self, idx: Optional[int] = None) -&gt; BaseField:\n        if idx is not None:\n            self.field.id = self.id + \".\" + str(idx)\n        else:\n            \"\"\"To generate template string to be used in javascript\"\"\"\n            self.field.id = \"\"\n        if isinstance(self.field, CollectionField):\n            self.field._propagate_id()\n        return self.field\n\n    def additional_css_links(\n        self, request: Request, action: RequestAction\n    ) -&gt; List[str]:\n        return self.field.additional_css_links(request, action)\n\n    def additional_js_links(self, request: Request, action: RequestAction) -&gt; List[str]:\n        return self.field.additional_js_links(request, action)\n</code></pre>"},{"location":"api/fields/#starlette_admin.fields.CollectionField","title":"<code>CollectionField</code>  <code>dataclass</code>","text":"<p>               Bases: <code>BaseField</code></p> <p>This field represents a collection of others fields. Can be used to represent embedded mongodb document.</p> <p>Usage</p> <pre><code> CollectionField(\"config\", fields=[StringField(\"key\"), IntegerField(\"value\", help_text=\"multiple of 5\")]),\n</code></pre> Source code in <code>starlette_admin/fields.py</code> <pre><code>@dataclass(init=False)\nclass CollectionField(BaseField):\n    \"\"\"\n    This field represents a collection of others fields. Can be used to represent embedded mongodb document.\n    !!! usage\n\n    ```python\n     CollectionField(\"config\", fields=[StringField(\"key\"), IntegerField(\"value\", help_text=\"multiple of 5\")]),\n    ```\n    \"\"\"\n\n    fields: Sequence[BaseField] = dc_field(default_factory=list)\n    render_function_key: str = \"json\"\n    form_template: str = \"forms/collection.html\"\n    display_template: str = \"displays/collection.html\"\n\n    def __init__(\n        self, name: str, fields: Sequence[BaseField], required: bool = False\n    ) -&gt; None:\n        self.name = name\n        self.fields = fields\n        self.required = required\n        super().__post_init__()\n        self._propagate_id()\n\n    def get_fields_list(\n        self,\n        request: Request,\n        action: RequestAction = RequestAction.LIST,\n    ) -&gt; Sequence[BaseField]:\n        return extract_fields(self.fields, action)\n\n    def _propagate_id(self) -&gt; None:\n        \"\"\"Will update fields id by adding his id as prefix (ex: category.name)\"\"\"\n        for field in self.fields:\n            field.id = self.id + (\".\" if self.id else \"\") + field.name\n            if isinstance(field, type(self)):\n                field._propagate_id()\n\n    async def parse_form_data(\n        self, request: Request, form_data: FormData, action: RequestAction\n    ) -&gt; Any:\n        value = {}\n        for field in self.get_fields_list(request, action):\n            value[field.name] = await field.parse_form_data(request, form_data, action)\n        return value\n\n    async def serialize_value(\n        self, request: Request, value: Any, action: RequestAction\n    ) -&gt; Any:\n        serialized_value: Dict[str, Any] = {}\n        for field in self.get_fields_list(request, action):\n            name = field.name\n            serialized_value[name] = None\n            if hasattr(value, name) or (isinstance(value, dict) and name in value):\n                field_value = (\n                    getattr(value, name) if hasattr(value, name) else value[name]\n                )\n                if field_value is not None:\n                    serialized_value[name] = await field.serialize_value(\n                        request, field_value, action\n                    )\n        return serialized_value\n\n    def additional_css_links(\n        self, request: Request, action: RequestAction\n    ) -&gt; List[str]:\n        _links = []\n        for f in self.get_fields_list(request, action):\n            _links.extend(f.additional_css_links(request, action))\n        return _links\n\n    def additional_js_links(self, request: Request, action: RequestAction) -&gt; List[str]:\n        _links = []\n        for f in self.get_fields_list(request, action):\n            _links.extend(f.additional_js_links(request, action))\n        return _links\n</code></pre>"},{"location":"api/views/","title":"Views","text":""},{"location":"api/views/#starlette_admin.views","title":"<code>starlette_admin.views</code>","text":""},{"location":"api/views/#starlette_admin.views.BaseView","title":"<code>BaseView</code>","text":"<p>Base class for all views</p> <p>Attributes:</p> Name Type Description <code>label</code> <code>str</code> <p>Label of the view to be displayed.</p> <code>icon</code> <code>Optional[str]</code> <p>Icon to be displayed for this model in the admin. Only FontAwesome names are supported.</p> Source code in <code>starlette_admin/views.py</code> <pre><code>class BaseView:\n    \"\"\"\n    Base class for all views\n\n    Attributes:\n        label: Label of the view to be displayed.\n        icon: Icon to be displayed for this model in the admin. Only FontAwesome names are supported.\n    \"\"\"\n\n    label: str = \"\"\n    icon: Optional[str] = None\n\n    def title(self, request: Request) -&gt; str:\n        \"\"\"Return the title of the view to be displayed in the browser tab\"\"\"\n        return self.label\n\n    def is_active(self, request: Request) -&gt; bool:\n        \"\"\"Return true if the current view is active\"\"\"\n        return False\n\n    def is_accessible(self, request: Request) -&gt; bool:\n        \"\"\"\n        Override this method to add permission checks.\n        Return True if current user can access this view\n        \"\"\"\n        return True\n</code></pre>"},{"location":"api/views/#starlette_admin.views.BaseView.is_accessible","title":"<code>is_accessible(request)</code>","text":"<p>Override this method to add permission checks. Return True if current user can access this view</p> Source code in <code>starlette_admin/views.py</code> <pre><code>def is_accessible(self, request: Request) -&gt; bool:\n    \"\"\"\n    Override this method to add permission checks.\n    Return True if current user can access this view\n    \"\"\"\n    return True\n</code></pre>"},{"location":"api/views/#starlette_admin.views.BaseView.is_active","title":"<code>is_active(request)</code>","text":"<p>Return true if the current view is active</p> Source code in <code>starlette_admin/views.py</code> <pre><code>def is_active(self, request: Request) -&gt; bool:\n    \"\"\"Return true if the current view is active\"\"\"\n    return False\n</code></pre>"},{"location":"api/views/#starlette_admin.views.BaseView.title","title":"<code>title(request)</code>","text":"<p>Return the title of the view to be displayed in the browser tab</p> Source code in <code>starlette_admin/views.py</code> <pre><code>def title(self, request: Request) -&gt; str:\n    \"\"\"Return the title of the view to be displayed in the browser tab\"\"\"\n    return self.label\n</code></pre>"},{"location":"api/views/#starlette_admin.views.DropDown","title":"<code>DropDown</code>","text":"<p>               Bases: <code>BaseView</code></p> <p>Group views inside a dropdown</p> Example <pre><code>admin.add_view(\n    DropDown(\n        \"Resources\",\n        icon=\"fa fa-list\",\n        views=[\n            ModelView(User),\n            Link(label=\"Home Page\", url=\"/\"),\n            CustomView(label=\"Dashboard\", path=\"/dashboard\", template_path=\"dashboard.html\"),\n        ],\n    )\n)\n</code></pre> Source code in <code>starlette_admin/views.py</code> <pre><code>class DropDown(BaseView):\n    \"\"\"\n    Group views inside a dropdown\n\n    Example:\n        ```python\n        admin.add_view(\n            DropDown(\n                \"Resources\",\n                icon=\"fa fa-list\",\n                views=[\n                    ModelView(User),\n                    Link(label=\"Home Page\", url=\"/\"),\n                    CustomView(label=\"Dashboard\", path=\"/dashboard\", template_path=\"dashboard.html\"),\n                ],\n            )\n        )\n        ```\n    \"\"\"\n\n    def __init__(\n        self,\n        label: str,\n        views: List[Union[Type[BaseView], BaseView]],\n        icon: Optional[str] = None,\n        always_open: bool = True,\n    ) -&gt; None:\n        self.label = label\n        self.icon = icon\n        self.always_open = always_open\n        self.views: List[BaseView] = [\n            (v if isinstance(v, BaseView) else v()) for v in views\n        ]\n\n    def is_active(self, request: Request) -&gt; bool:\n        return any(v.is_active(request) for v in self.views)\n\n    def is_accessible(self, request: Request) -&gt; bool:\n        return any(v.is_accessible(request) for v in self.views)\n</code></pre>"},{"location":"api/views/#starlette_admin.views.Link","title":"<code>Link</code>","text":"<p>               Bases: <code>BaseView</code></p> <p>Add arbitrary hyperlinks to the menu</p> Example <pre><code>admin.add_view(Link(label=\"Home Page\", icon=\"fa fa-link\", url=\"/\"))\n</code></pre> Source code in <code>starlette_admin/views.py</code> <pre><code>class Link(BaseView):\n    \"\"\"\n    Add arbitrary hyperlinks to the menu\n\n    Example:\n        ```python\n        admin.add_view(Link(label=\"Home Page\", icon=\"fa fa-link\", url=\"/\"))\n        ```\n    \"\"\"\n\n    def __init__(\n        self,\n        label: str = \"\",\n        icon: Optional[str] = None,\n        url: str = \"/\",\n        target: Optional[str] = \"_self\",\n    ):\n        self.label = label\n        self.icon = icon\n        self.url = url\n        self.target = target\n</code></pre>"},{"location":"api/views/#starlette_admin.views.CustomView","title":"<code>CustomView</code>","text":"<p>               Bases: <code>BaseView</code></p> <p>Add your own views (not tied to any particular model). For example, a custom home page that displays some analytics data.</p> <p>Attributes:</p> Name Type Description <code>path</code> <p>Route path</p> <code>template_path</code> <p>Path to template file</p> <code>methods</code> <p>HTTP methods</p> <code>name</code> <p>Route name</p> <code>add_to_menu</code> <p>Display to menu or not</p> Example <pre><code>admin.add_view(CustomView(label=\"Home\", icon=\"fa fa-home\", path=\"/home\", template_path=\"home.html\"))\n</code></pre> Source code in <code>starlette_admin/views.py</code> <pre><code>class CustomView(BaseView):\n    \"\"\"\n    Add your own views (not tied to any particular model). For example,\n    a custom home page that displays some analytics data.\n\n    Attributes:\n        path: Route path\n        template_path: Path to template file\n        methods: HTTP methods\n        name: Route name\n        add_to_menu: Display to menu or not\n\n    Example:\n        ```python\n        admin.add_view(CustomView(label=\"Home\", icon=\"fa fa-home\", path=\"/home\", template_path=\"home.html\"))\n        ```\n    \"\"\"\n\n    def __init__(\n        self,\n        label: str,\n        icon: Optional[str] = None,\n        path: str = \"/\",\n        template_path: str = \"index.html\",\n        name: Optional[str] = None,\n        methods: Optional[List[str]] = None,\n        add_to_menu: bool = True,\n    ):\n        self.label = label\n        self.icon = icon\n        self.path = path\n        self.template_path = template_path\n        self.name = name\n        self.methods = methods\n        self.add_to_menu = add_to_menu\n\n    async def render(self, request: Request, templates: Jinja2Templates) -&gt; Response:\n        \"\"\"Default methods to render view. Override this methods to add your custom logic.\"\"\"\n        return templates.TemplateResponse(\n            request=request,\n            name=self.template_path,\n            context={\"title\": self.title(request)},\n        )\n\n    def is_active(self, request: Request) -&gt; bool:\n        return request.scope[\"path\"] == self.path\n</code></pre>"},{"location":"api/views/#starlette_admin.views.CustomView.render","title":"<code>render(request, templates)</code>  <code>async</code>","text":"<p>Default methods to render view. Override this methods to add your custom logic.</p> Source code in <code>starlette_admin/views.py</code> <pre><code>async def render(self, request: Request, templates: Jinja2Templates) -&gt; Response:\n    \"\"\"Default methods to render view. Override this methods to add your custom logic.\"\"\"\n    return templates.TemplateResponse(\n        request=request,\n        name=self.template_path,\n        context={\"title\": self.title(request)},\n    )\n</code></pre>"},{"location":"api/views/#starlette_admin.views.BaseModelView","title":"<code>BaseModelView</code>","text":"<p>               Bases: <code>BaseView</code></p> <p>Base administrative view. Derive from this class to implement your administrative interface piece.</p> <p>Attributes:</p> Name Type Description <code>identity</code> <code>Optional[str]</code> <p>Unique identity to identify the model associated to this view. Will be used for URL of the endpoints.</p> <code>name</code> <code>Optional[str]</code> <p>Name of the view to be displayed</p> <code>fields</code> <code>Sequence[BaseField]</code> <p>List of fields</p> <code>pk_attr</code> <code>Optional[str]</code> <p>Primary key field name</p> <code>form_include_pk</code> <code>bool</code> <p>Indicates whether the primary key should be included in create and edit forms. Default to False.</p> <code>exclude_fields_from_list</code> <code>Sequence[str]</code> <p>List of fields to exclude in List page.</p> <code>exclude_fields_from_detail</code> <code>Sequence[str]</code> <p>List of fields to exclude in Detail page.</p> <code>exclude_fields_from_create</code> <code>Sequence[str]</code> <p>List of fields to exclude from creation page.</p> <code>exclude_fields_from_edit</code> <code>Sequence[str]</code> <p>List of fields to exclude from editing page.</p> <code>searchable_fields</code> <code>Optional[Sequence[str]]</code> <p>List of searchable fields.</p> <code>sortable_fields</code> <code>Optional[Sequence[str]]</code> <p>List of sortable fields.</p> <code>export_fields</code> <code>Optional[Sequence[str]]</code> <p>List of fields to include in exports.</p> <code>fields_default_sort</code> <code>Optional[Sequence[Union[Tuple[str, bool], str]]]</code> <p>Initial order (sort) to apply to the table. Should be a sequence of field names or a tuple of (field name, True/False to indicate the sort direction). For example: <code>[\"title\",  (\"created_at\", False), (\"price\", True)]</code> will sort  by <code>title</code> ascending, <code>created_at</code> ascending and <code>price</code> descending.</p> <code>export_types</code> <code>Sequence[ExportType]</code> <p>A list of available export filetypes. Available exports are <code>['csv', 'excel', 'pdf', 'print']</code>. Only <code>pdf</code> is disabled by default.</p> <code>column_visibility</code> <code>bool</code> <p>Enable/Disable column visibility extension</p> <code>search_builder</code> <code>bool</code> <p>Enable/Disable search builder extension</p> <code>page_size</code> <code>int</code> <p>Default number of items to display in List page pagination. Default value is set to <code>10</code>.</p> <code>page_size_options</code> <code>Sequence[int]</code> <p>Pagination choices displayed in List page. Default value is set to <code>[10, 25, 50, 100]</code>. Use <code>-1</code>to display All</p> <code>responsive_table</code> <code>bool</code> <p>Enable/Disable responsive extension</p> <code>save_state</code> <code>bool</code> <p>Enable/Disable state saving</p> <code>datatables_options</code> <code>Dict[str, Any]</code> <p>Dict of Datatables options. These will overwrite any default options set for the datatable.</p> <code>list_template</code> <code>str</code> <p>List view template. Default is <code>list.html</code>.</p> <code>detail_template</code> <code>str</code> <p>Details view template. Default is <code>detail.html</code>.</p> <code>create_template</code> <code>str</code> <p>Edit view template. Default is <code>create.html</code>.</p> <code>edit_template</code> <code>str</code> <p>Edit view template. Default is <code>edit.html</code>.</p> <code>actions</code> <code>Optional[Sequence[str]]</code> <p>List of actions</p> <code>additional_js_links</code> <code>Optional[List[str]]</code> <p>A list of additional JavaScript files to include.</p> <code>additional_css_links</code> <code>Optional[List[str]]</code> <p>A list of additional CSS files to include.</p> Source code in <code>starlette_admin/views.py</code> <pre><code>class BaseModelView(BaseView):\n    \"\"\"\n    Base administrative view.\n    Derive from this class to implement your administrative interface piece.\n\n    Attributes:\n        identity: Unique identity to identify the model associated to this view.\n            Will be used for URL of the endpoints.\n        name: Name of the view to be displayed\n        fields: List of fields\n        pk_attr: Primary key field name\n        form_include_pk (bool): Indicates whether the primary key should be\n            included in create and edit forms. Default to False.\n        exclude_fields_from_list: List of fields to exclude in List page.\n        exclude_fields_from_detail: List of fields to exclude in Detail page.\n        exclude_fields_from_create: List of fields to exclude from creation page.\n        exclude_fields_from_edit: List of fields to exclude from editing page.\n        searchable_fields: List of searchable fields.\n        sortable_fields: List of sortable fields.\n        export_fields: List of fields to include in exports.\n        fields_default_sort: Initial order (sort) to apply to the table.\n            Should be a sequence of field names or a tuple of\n            (field name, True/False to indicate the sort direction).\n            For example:\n            `[\"title\",  (\"created_at\", False), (\"price\", True)]` will sort\n             by `title` ascending, `created_at` ascending and `price` descending.\n        export_types: A list of available export filetypes. Available\n            exports are `['csv', 'excel', 'pdf', 'print']`. Only `pdf` is\n            disabled by default.\n        column_visibility: Enable/Disable\n            [column visibility](https://datatables.net/extensions/buttons/built-in#Column-visibility)\n            extension\n        search_builder: Enable/Disable [search builder](https://datatables.net/extensions/searchbuilder/)\n            extension\n        page_size: Default number of items to display in List page pagination.\n            Default value is set to `10`.\n        page_size_options: Pagination choices displayed in List page.\n            Default value is set to `[10, 25, 50, 100]`. Use `-1`to display All\n        responsive_table: Enable/Disable [responsive](https://datatables.net/extensions/responsive/)\n            extension\n        save_state: Enable/Disable [state saving](https://datatables.net/examples/basic_init/state_save.html)\n        datatables_options: Dict of [Datatables options](https://datatables.net/reference/option/).\n            These will overwrite any default options set for the datatable.\n        list_template: List view template. Default is `list.html`.\n        detail_template: Details view template. Default is `detail.html`.\n        create_template: Edit view template. Default is `create.html`.\n        edit_template: Edit view template. Default is `edit.html`.\n        actions: List of actions\n        additional_js_links: A list of additional JavaScript files to include.\n        additional_css_links: A list of additional CSS files to include.\n\n\n    \"\"\"\n\n    identity: Optional[str] = None\n    name: Optional[str] = None\n    fields: Sequence[BaseField] = []\n    pk_attr: Optional[str] = None\n    form_include_pk: bool = False\n    exclude_fields_from_list: Sequence[str] = []\n    exclude_fields_from_detail: Sequence[str] = []\n    exclude_fields_from_create: Sequence[str] = []\n    exclude_fields_from_edit: Sequence[str] = []\n    searchable_fields: Optional[Sequence[str]] = None\n    sortable_fields: Optional[Sequence[str]] = None\n    fields_default_sort: Optional[Sequence[Union[Tuple[str, bool], str]]] = None\n    export_types: Sequence[ExportType] = [\n        ExportType.CSV,\n        ExportType.EXCEL,\n        ExportType.PRINT,\n    ]\n    export_fields: Optional[Sequence[str]] = None\n    column_visibility: bool = True\n    search_builder: bool = True\n    page_size: int = 10\n    page_size_options: Sequence[int] = [10, 25, 50, 100]\n    responsive_table: bool = False\n    save_state: bool = True\n    datatables_options: ClassVar[Dict[str, Any]] = {}\n    list_template: str = \"list.html\"\n    detail_template: str = \"detail.html\"\n    create_template: str = \"create.html\"\n    edit_template: str = \"edit.html\"\n    actions: Optional[Sequence[str]] = None\n    row_actions: Optional[Sequence[str]] = None\n    additional_js_links: Optional[List[str]] = None\n    additional_css_links: Optional[List[str]] = None\n    row_actions_display_type: RowActionsDisplayType = RowActionsDisplayType.ICON_LIST\n\n    _find_foreign_model: Callable[[str], \"BaseModelView\"]\n\n    def __init__(self) -&gt; None:  # noqa: C901\n        fringe = list(self.fields)\n        all_field_names = []\n        while len(fringe) &gt; 0:\n            field = fringe.pop(0)\n            if not hasattr(field, \"_name\"):\n                field._name = field.name  # type: ignore\n            if isinstance(field, CollectionField):\n                for f in field.fields:\n                    f._name = f\"{field._name}.{f.name}\"  # type: ignore\n                fringe.extend(field.fields)\n            name = field._name  # type: ignore\n            if name == self.pk_attr and not self.form_include_pk:\n                field.exclude_from_create = True\n                field.exclude_from_edit = True\n            if name in self.exclude_fields_from_list:\n                field.exclude_from_list = True\n            if name in self.exclude_fields_from_detail:\n                field.exclude_from_detail = True\n            if name in self.exclude_fields_from_create:\n                field.exclude_from_create = True\n            if name in self.exclude_fields_from_edit:\n                field.exclude_from_edit = True\n            if not isinstance(field, CollectionField):\n                all_field_names.append(name)\n                field.searchable = (self.searchable_fields is None) or (\n                    name in self.searchable_fields\n                )\n                field.orderable = (self.sortable_fields is None) or (\n                    name in self.sortable_fields\n                )\n        if self.searchable_fields is None:\n            self.searchable_fields = all_field_names[:]\n        if self.sortable_fields is None:\n            self.sortable_fields = all_field_names[:]\n        if self.export_fields is None:\n            self.export_fields = all_field_names[:]\n        if self.fields_default_sort is None:\n            self.fields_default_sort = [self.pk_attr]  # type: ignore[list-item]\n\n        # Actions\n        self._actions: Dict[str, Dict[str, str]] = OrderedDict()\n        self._row_actions: Dict[str, Dict[str, str]] = OrderedDict()\n        self._actions_handlers: Dict[\n            str, Callable[[Request, Sequence[Any]], Awaitable]\n        ] = OrderedDict()\n        self._row_actions_handlers: Dict[str, Callable[[Request, Any], Awaitable]] = (\n            OrderedDict()\n        )\n        self._init_actions()\n\n    def is_active(self, request: Request) -&gt; bool:\n        return request.path_params.get(\"identity\", None) == self.identity\n\n    def _init_actions(self) -&gt; None:\n        self._init_batch_actions()\n        self._init_row_actions()\n        self._validate_actions()\n\n    def _init_batch_actions(self) -&gt; None:\n        \"\"\"\n        This method initializes batch and row actions, collects their handlers,\n        and validates that all specified actions exist.\n        \"\"\"\n        for _method_name, method in inspect.getmembers(\n            self, predicate=inspect.ismethod\n        ):\n            if hasattr(method, \"_action\"):\n                name = method._action.get(\"name\")\n                self._actions[name] = method._action\n                self._actions_handlers[name] = method\n\n        if self.actions is None:\n            self.actions = list(self._actions_handlers.keys())\n\n    def _init_row_actions(self) -&gt; None:\n        for _method_name, method in inspect.getmembers(\n            self, predicate=inspect.ismethod\n        ):\n            if hasattr(method, \"_row_action\"):\n                name = method._row_action.get(\"name\")\n                self._row_actions[name] = method._row_action\n                self._row_actions_handlers[name] = method\n\n        if self.row_actions is None:\n            self.row_actions = list(self._row_actions_handlers.keys())\n\n    def _validate_actions(self) -&gt; None:\n        for action_name in not_none(self.actions):\n            if action_name not in self._actions:\n                raise ValueError(f\"Unknown action with name `{action_name}`\")\n        for action_name in not_none(self.row_actions):\n            if action_name not in self._row_actions:\n                raise ValueError(f\"Unknown row action with name `{action_name}`\")\n\n    async def is_action_allowed(self, request: Request, name: str) -&gt; bool:\n        \"\"\"\n        Verify if action with `name` is allowed.\n        Override this method to allow or disallow actions based\n        on some condition.\n\n        Args:\n            name: Action name\n            request: Starlette request\n        \"\"\"\n        if name == \"delete\":\n            return self.can_delete(request)\n        return True\n\n    async def is_row_action_allowed(self, request: Request, name: str) -&gt; bool:\n        \"\"\"\n        Verify if the row action with `name` is allowed.\n        Override this method to allow or disallow row actions based\n        on some condition.\n\n        Args:\n            name: Row action name\n            request: Starlette request\n        \"\"\"\n        if name == \"delete\":\n            return self.can_delete(request)\n        if name == \"edit\":\n            return self.can_edit(request)\n        if name == \"view\":\n            return self.can_view_details(request)\n        return True\n\n    async def get_all_actions(self, request: Request) -&gt; List[Dict[str, Any]]:\n        \"\"\"Return a list of allowed batch actions\"\"\"\n        actions = []\n        for action_name in not_none(self.actions):\n            if await self.is_action_allowed(request, action_name):\n                actions.append(self._actions.get(action_name, {}))\n        return actions\n\n    async def get_all_row_actions(self, request: Request) -&gt; List[Dict[str, Any]]:\n        \"\"\"Return a list of allowed row actions\"\"\"\n        row_actions = []\n        for row_action_name in not_none(self.row_actions):\n            if await self.is_row_action_allowed(request, row_action_name):\n                _row_action = self._row_actions.get(row_action_name, {})\n                if (\n                    request.state.action == RequestAction.LIST\n                    and not _row_action.get(\"exclude_from_list\")\n                ) or (\n                    request.state.action == RequestAction.DETAIL\n                    and not _row_action.get(\"exclude_from_detail\")\n                ):\n                    row_actions.append(_row_action)\n        return row_actions\n\n    async def handle_action(\n        self, request: Request, pks: List[Any], name: str\n    ) -&gt; Union[str, Response]:\n        \"\"\"\n        Handle action with `name`.\n        Raises:\n            ActionFailed: to display meaningfully error\n        \"\"\"\n        handler = self._actions_handlers.get(name, None)\n        if handler is None:\n            raise ActionFailed(\"Invalid action\")\n        if not await self.is_action_allowed(request, name):\n            raise ActionFailed(\"Forbidden\")\n        handler_return = await handler(request, pks)\n        custom_response = self._actions[name][\"custom_response\"]\n        if isinstance(handler_return, Response) and not custom_response:\n            raise ActionFailed(\n                \"Set custom_response to true, to be able to return custom response\"\n            )\n        return handler_return\n\n    async def handle_row_action(\n        self, request: Request, pk: Any, name: str\n    ) -&gt; Union[str, Response]:\n        \"\"\"\n        Handle row action with `name`.\n        Raises:\n            ActionFailed: to display meaningfully error\n        \"\"\"\n        handler = self._row_actions_handlers.get(name, None)\n        if handler is None:\n            raise ActionFailed(\"Invalid row action\")\n        if not await self.is_row_action_allowed(request, name):\n            raise ActionFailed(\"Forbidden\")\n        handler_return = await handler(request, pk)\n        custom_response = self._row_actions[name][\"custom_response\"]\n        if isinstance(handler_return, Response) and not custom_response:\n            raise ActionFailed(\n                \"Set custom_response to true, to be able to return custom response\"\n            )\n        return handler_return\n\n    @action(\n        name=\"delete\",\n        text=_(\"Delete\"),\n        confirmation=_(\"Are you sure you want to delete selected items?\"),\n        submit_btn_text=_(\"Yes, delete all\"),\n        submit_btn_class=\"btn-danger\",\n    )\n    async def delete_action(self, request: Request, pks: List[Any]) -&gt; str:\n        affected_rows = await self.delete(request, pks)\n        return ngettext(\n            \"Item was successfully deleted\",\n            \"%(count)d items were successfully deleted\",\n            affected_rows or 0,\n        ) % {\"count\": affected_rows}\n\n    @link_row_action(\n        name=\"view\",\n        text=_(\"View\"),\n        icon_class=\"fa-solid fa-eye\",\n        exclude_from_detail=True,\n    )\n    def row_action_1_view(self, request: Request, pk: Any) -&gt; str:\n        route_name = request.app.state.ROUTE_NAME\n        return str(\n            request.url_for(route_name + \":detail\", identity=self.identity, pk=pk)\n        )\n\n    @link_row_action(\n        name=\"edit\",\n        text=_(\"Edit\"),\n        icon_class=\"fa-solid fa-edit\",\n        action_btn_class=\"btn-primary\",\n    )\n    def row_action_2_edit(self, request: Request, pk: Any) -&gt; str:\n        route_name = request.app.state.ROUTE_NAME\n        return str(request.url_for(route_name + \":edit\", identity=self.identity, pk=pk))\n\n    @row_action(\n        name=\"delete\",\n        text=_(\"Delete\"),\n        confirmation=_(\"Are you sure you want to delete this item?\"),\n        icon_class=\"fa-solid fa-trash\",\n        submit_btn_text=\"Yes, delete\",\n        submit_btn_class=\"btn-danger\",\n        action_btn_class=\"btn-danger\",\n    )\n    async def row_action_3_delete(self, request: Request, pk: Any) -&gt; str:\n        await self.delete(request, [pk])\n        return gettext(\"Item was successfully deleted\")\n\n    @abstractmethod\n    async def find_all(\n        self,\n        request: Request,\n        skip: int = 0,\n        limit: int = 100,\n        where: Union[Dict[str, Any], str, None] = None,\n        order_by: Optional[List[str]] = None,\n    ) -&gt; Sequence[Any]:\n        \"\"\"\n        Find all items\n        Parameters:\n            request: The request being processed\n            where: Can be dict for complex query\n                ```json\n                 {\"and\":[{\"id\": {\"gt\": 5}},{\"name\": {\"startsWith\": \"ban\"}}]}\n                ```\n                or plain text for full search\n            skip: should return values start from position skip+1\n            limit: number of maximum items to return\n            order_by: order data clauses in form `[\"id asc\", \"name desc\"]`\n        \"\"\"\n        raise NotImplementedError()\n\n    @abstractmethod\n    async def count(\n        self,\n        request: Request,\n        where: Union[Dict[str, Any], str, None] = None,\n    ) -&gt; int:\n        \"\"\"\n        Count items\n        Parameters:\n            request: The request being processed\n            where: Can be dict for complex query\n                ```json\n                 {\"and\":[{\"id\": {\"gt\": 5}},{\"name\": {\"startsWith\": \"ban\"}}]}\n                ```\n                or plain text for full search\n        \"\"\"\n        raise NotImplementedError()\n\n    @abstractmethod\n    async def find_by_pk(self, request: Request, pk: Any) -&gt; Any:\n        \"\"\"\n        Find one item\n        Parameters:\n            request: The request being processed\n            pk: Primary key\n        \"\"\"\n        raise NotImplementedError()\n\n    @abstractmethod\n    async def find_by_pks(self, request: Request, pks: List[Any]) -&gt; Sequence[Any]:\n        \"\"\"\n        Find many items\n        Parameters:\n            request: The request being processed\n            pks: List of Primary key\n        \"\"\"\n        raise NotImplementedError()\n\n    async def before_create(\n        self, request: Request, data: Dict[str, Any], obj: Any\n    ) -&gt; None:\n        \"\"\"\n        This hook is called before a new item is created.\n\n        Args:\n            request: The request being processed.\n            data: Dict values contained converted form data.\n            obj: The object about to be created.\n        \"\"\"\n\n    @abstractmethod\n    async def create(self, request: Request, data: Dict) -&gt; Any:\n        \"\"\"\n        Create item\n        Parameters:\n            request: The request being processed\n            data: Dict values contained converted form data\n        Returns:\n            Any: Created Item\n        \"\"\"\n        raise NotImplementedError()\n\n    async def after_create(self, request: Request, obj: Any) -&gt; None:\n        \"\"\"\n        This hook is called after a new item is successfully created.\n\n        Args:\n            request: The request being processed.\n            obj: The newly created object.\n        \"\"\"\n\n    async def before_edit(\n        self, request: Request, data: Dict[str, Any], obj: Any\n    ) -&gt; None:\n        \"\"\"\n        This hook is called before an item is edited.\n\n        Args:\n            request: The request being processed.\n            data: Dict values contained converted form data\n            obj: The object about to be edited.\n        \"\"\"\n\n    @abstractmethod\n    async def edit(self, request: Request, pk: Any, data: Dict[str, Any]) -&gt; Any:\n        \"\"\"\n        Edit item\n        Parameters:\n            request: The request being processed\n            pk: Primary key\n            data: Dict values contained converted form data\n        Returns:\n            Any: Edited Item\n        \"\"\"\n        raise NotImplementedError()\n\n    async def after_edit(self, request: Request, obj: Any) -&gt; None:\n        \"\"\"\n        This hook is called after an item is successfully edited.\n\n        Args:\n            request: The request being processed.\n            obj: The edited object.\n        \"\"\"\n\n    async def before_delete(self, request: Request, obj: Any) -&gt; None:\n        \"\"\"\n        This hook is called before an item is deleted.\n\n        Args:\n            request: The request being processed.\n            obj: The object about to be deleted.\n        \"\"\"\n\n    @abstractmethod\n    async def delete(self, request: Request, pks: List[Any]) -&gt; Optional[int]:\n        \"\"\"\n        Bulk delete items\n        Parameters:\n            request: The request being processed\n            pks: List of primary keys\n        \"\"\"\n        raise NotImplementedError()\n\n    async def after_delete(self, request: Request, obj: Any) -&gt; None:\n        \"\"\"\n        This hook is called after an item is successfully deleted.\n\n        Args:\n            request: The request being processed.\n            obj: The deleted object.\n        \"\"\"\n\n    def can_view_details(self, request: Request) -&gt; bool:\n        \"\"\"Permission for viewing full details of Item. Return True by default\"\"\"\n        return True\n\n    def can_create(self, request: Request) -&gt; bool:\n        \"\"\"Permission for creating new Items. Return True by default\"\"\"\n        return True\n\n    def can_edit(self, request: Request) -&gt; bool:\n        \"\"\"Permission for editing Items. Return True by default\"\"\"\n        return True\n\n    def can_delete(self, request: Request) -&gt; bool:\n        \"\"\"Permission for deleting Items. Return True by default\"\"\"\n        return True\n\n    async def serialize_field_value(\n        self, value: Any, field: BaseField, action: RequestAction, request: Request\n    ) -&gt; Any:\n        \"\"\"\n        Format output value for each field.\n\n        !!! important\n\n            The returned value should be json serializable\n\n        Parameters:\n            value: attribute of item returned by `find_all` or `find_by_pk`\n            field: Starlette Admin field for this attribute\n            action: Specify where the data will be used. Possible values are\n                `VIEW` for detail page, `EDIT` for editing page and `API`\n                for listing page and select2 data.\n            request: The request being processed\n        \"\"\"\n        if value is None:\n            return await field.serialize_none_value(request, action)\n        return await field.serialize_value(request, value, action)\n\n    async def serialize(\n        self,\n        obj: Any,\n        request: Request,\n        action: RequestAction,\n        include_relationships: bool = True,\n        include_select2: bool = False,\n    ) -&gt; Dict[str, Any]:\n        obj_serialized: Dict[str, Any] = {}\n        obj_meta: Dict[str, Any] = {}\n        for field in self.get_fields_list(request, action):\n            if isinstance(field, RelationField) and include_relationships:\n                value = getattr(obj, field.name, None)\n                foreign_model = self._find_foreign_model(field.identity)  # type: ignore\n                if value is None:\n                    obj_serialized[field.name] = None\n                elif isinstance(field, HasOne):\n                    if action == RequestAction.EDIT:\n                        obj_serialized[field.name] = (\n                            await foreign_model.get_serialized_pk_value(request, value)\n                        )\n                    else:\n                        obj_serialized[field.name] = await foreign_model.serialize(\n                            value, request, action, include_relationships=False\n                        )\n                else:\n                    if action == RequestAction.EDIT:\n                        obj_serialized[field.name] = [\n                            (await foreign_model.get_serialized_pk_value(request, obj))\n                            for obj in value\n                        ]\n                    else:\n                        obj_serialized[field.name] = [\n                            await foreign_model.serialize(\n                                v, request, action, include_relationships=False\n                            )\n                            for v in value\n                        ]\n            elif not isinstance(field, RelationField):\n                value = await field.parse_obj(request, obj)\n                obj_serialized[field.name] = await self.serialize_field_value(\n                    value, field, action, request\n                )\n        if include_select2:\n            obj_meta[\"select2\"] = {\n                \"selection\": await self.select2_selection(obj, request),\n                \"result\": await self.select2_result(obj, request),\n            }\n        obj_meta[\"repr\"] = await self.repr(obj, request)\n\n        # Make sure the primary key is always available\n        pk_attr = not_none(self.pk_attr)\n        if pk_attr not in obj_serialized:\n            pk_value = await self.get_serialized_pk_value(request, obj)\n            obj_serialized[pk_attr] = pk_value\n\n        pk = await self.get_pk_value(request, obj)\n        route_name = request.app.state.ROUTE_NAME\n        obj_meta[\"detailUrl\"] = str(\n            request.url_for(route_name + \":detail\", identity=self.identity, pk=pk)\n        )\n        obj_serialized[\"_meta\"] = obj_meta\n        return obj_serialized\n\n    async def repr(self, obj: Any, request: Request) -&gt; str:\n        \"\"\"Return a string representation of the given object that can be displayed in the admin interface.\n\n        If the object has a custom representation method `__admin_repr__`, it is used to generate the string. Otherwise,\n        the value of the object's primary key attribute is used.\n\n        Args:\n            obj: The object to represent.\n            request: The request being processed\n\n        Example:\n            For example, the following implementation for a `User` model will display\n            the user's full name instead of their primary key in the admin interface:\n\n            ```python\n            class User:\n                id: int\n                first_name: str\n                last_name: str\n\n                def __admin_repr__(self, request: Request):\n                    return f\"{self.last_name} {self.first_name}\"\n            ```\n        \"\"\"\n        repr_method = getattr(obj, \"__admin_repr__\", None)\n        if repr_method is None:\n            return str(await self.get_pk_value(request, obj))\n        if inspect.iscoroutinefunction(repr_method):\n            return await repr_method(request)\n        return repr_method(request)\n\n    async def select2_result(self, obj: Any, request: Request) -&gt; str:\n        \"\"\"Returns an HTML-formatted string that represents the search results for a Select2 search box.\n\n        By default, this method returns a string that contains all the object's attributes in a list except\n        relation and file attributes.\n\n        If the object has a custom representation method `__admin_select2_repr__`, it is used to generate the\n        HTML-formatted string.\n\n        !!! note\n\n            The returned value should be valid HTML.\n\n        !!! danger\n\n            Escape your database value to avoid Cross-Site Scripting (XSS) attack.\n            You can use Jinja2 Template render with `autoescape=True`.\n            For more information [click here](https://owasp.org/www-community/attacks/xss/)\n\n        Parameters:\n            obj: The object returned by the `find_all` or `find_by_pk` method.\n            request: The request being processed\n\n        Example:\n            Here is an example implementation for a `User` model\n            that includes the user's name and photo:\n\n            ```python\n            class User:\n                id: int\n                name: str\n                photo_url: str\n\n                def __admin_select2_repr__(self, request: Request) -&gt; str:\n                    return f'&lt;div&gt;&lt;img src=\"{escape(photo_url)}\"&gt;&lt;span&gt;{escape(self.name)}&lt;/span&gt;&lt;/div&gt;'\n            ```\n\n        \"\"\"\n        template_str = (\n            \"&lt;span&gt;{%for col in fields %}{%if obj[col]%}&lt;strong&gt;{{col}}:\"\n            \" &lt;/strong&gt;{{obj[col]}} {%endif%}{%endfor%}&lt;/span&gt;\"\n        )\n        fields = [\n            field.name\n            for field in self.get_fields_list(request)\n            if (\n                not isinstance(field, (RelationField, FileField))\n                and not field.exclude_from_detail\n            )\n        ]\n        html_repr_method = getattr(\n            obj,\n            \"__admin_select2_repr__\",\n            lambda request: Template(template_str, autoescape=True).render(\n                obj=obj, fields=fields\n            ),\n        )\n        if inspect.iscoroutinefunction(html_repr_method):\n            return await html_repr_method(request)\n        return html_repr_method(request)\n\n    async def select2_selection(self, obj: Any, request: Request) -&gt; str:\n        \"\"\"\n        Returns the HTML representation of an item selected by a user in a Select2 component.\n        By default, it simply calls `select2_result()`.\n\n        !!! note\n\n            The returned value should be valid HTML.\n\n        !!! danger\n\n            Escape your database value to avoid Cross-Site Scripting (XSS) attack.\n            You can use Jinja2 Template render with `autoescape=True`.\n            For more information [click here](https://owasp.org/www-community/attacks/xss/)\n\n        Parameters:\n            obj: item returned by `find_all` or `find_by_pk`\n            request: The request being processed\n\n        \"\"\"\n        return await self.select2_result(obj, request)\n\n    async def get_pk_value(self, request: Request, obj: Any) -&gt; Any:\n        return getattr(obj, not_none(self.pk_attr))\n\n    async def get_serialized_pk_value(self, request: Request, obj: Any) -&gt; Any:\n        \"\"\"\n        Return serialized value of the primary key.\n\n        !!! note\n\n            The returned value should be JSON-serializable.\n\n        Parameters:\n            request: The request being processed\n            obj: object to get primary key of\n\n        Returns:\n            Any: Serialized value of a PK.\n        \"\"\"\n        return await self.get_pk_value(request, obj)\n\n    def _length_menu(self) -&gt; Any:\n        return [\n            self.page_size_options,\n            [(_(\"All\") if i &lt; 0 else i) for i in self.page_size_options],\n        ]\n\n    def _search_columns_selector(self) -&gt; List[str]:\n        return [f\"{name}:name\" for name in self.searchable_fields]  # type: ignore\n\n    def _export_columns_selector(self) -&gt; List[str]:\n        return [f\"{name}:name\" for name in self.export_fields]  # type: ignore\n\n    def get_fields_list(\n        self,\n        request: Request,\n        action: RequestAction = RequestAction.LIST,\n    ) -&gt; Sequence[BaseField]:\n        \"\"\"Return a list of field instances to display in the specified view action.\n        This function excludes fields with corresponding exclude flags, which are\n        determined by the `exclude_fields_from_*` attributes.\n\n        Parameters:\n             request: The request being processed.\n             action: The type of action being performed on the view.\n        \"\"\"\n        return extract_fields(self.fields, action)\n\n    def _additional_css_links(\n        self, request: Request, action: RequestAction\n    ) -&gt; Sequence[str]:\n        links = self.additional_css_links or []\n        for field in self.get_fields_list(request, action):\n            for link in field.additional_css_links(request, action) or []:\n                if link not in links:\n                    links.append(link)\n        return links\n\n    def _additional_js_links(\n        self, request: Request, action: RequestAction\n    ) -&gt; Sequence[str]:\n        links = self.additional_js_links or []\n        for field in self.get_fields_list(request, action):\n            for link in field.additional_js_links(request, action) or []:\n                if link not in links:\n                    links.append(link)\n        return links\n\n    async def _configs(self, request: Request) -&gt; Dict[str, Any]:\n        locale = get_locale()\n        return {\n            \"label\": self.label,\n            \"pageSize\": self.page_size,\n            \"lengthMenu\": self._length_menu(),\n            \"searchColumns\": self._search_columns_selector(),\n            \"exportColumns\": self._export_columns_selector(),\n            \"fieldsDefaultSort\": dict(\n                (it, False) if isinstance(it, str) else it\n                for it in self.fields_default_sort  # type: ignore[union-attr]\n            ),\n            \"exportTypes\": self.export_types,\n            \"columnVisibility\": self.column_visibility,\n            \"searchBuilder\": self.search_builder,\n            \"responsiveTable\": self.responsive_table,\n            \"stateSave\": self.save_state,\n            \"fields\": [f.dict() for f in self.get_fields_list(request)],\n            \"pk\": self.pk_attr,\n            \"locale\": locale,\n            \"apiUrl\": request.url_for(\n                f\"{request.app.state.ROUTE_NAME}:api\", identity=self.identity\n            ),\n            \"actionUrl\": request.url_for(\n                f\"{request.app.state.ROUTE_NAME}:action\", identity=self.identity\n            ),\n            \"rowActionUrl\": request.url_for(\n                f\"{request.app.state.ROUTE_NAME}:row-action\", identity=self.identity\n            ),\n            \"dt_i18n_url\": request.url_for(\n                f\"{request.app.state.ROUTE_NAME}:statics\", path=f\"i18n/dt/{locale}.json\"\n            ),\n            \"datatablesOptions\": self.datatables_options,\n        }\n</code></pre>"},{"location":"api/views/#starlette_admin.views.BaseModelView.after_create","title":"<code>after_create(request, obj)</code>  <code>async</code>","text":"<p>This hook is called after a new item is successfully created.</p> <p>Parameters:</p> Name Type Description Default <code>request</code> <code>Request</code> <p>The request being processed.</p> required <code>obj</code> <code>Any</code> <p>The newly created object.</p> required Source code in <code>starlette_admin/views.py</code> <pre><code>async def after_create(self, request: Request, obj: Any) -&gt; None:\n    \"\"\"\n    This hook is called after a new item is successfully created.\n\n    Args:\n        request: The request being processed.\n        obj: The newly created object.\n    \"\"\"\n</code></pre>"},{"location":"api/views/#starlette_admin.views.BaseModelView.after_delete","title":"<code>after_delete(request, obj)</code>  <code>async</code>","text":"<p>This hook is called after an item is successfully deleted.</p> <p>Parameters:</p> Name Type Description Default <code>request</code> <code>Request</code> <p>The request being processed.</p> required <code>obj</code> <code>Any</code> <p>The deleted object.</p> required Source code in <code>starlette_admin/views.py</code> <pre><code>async def after_delete(self, request: Request, obj: Any) -&gt; None:\n    \"\"\"\n    This hook is called after an item is successfully deleted.\n\n    Args:\n        request: The request being processed.\n        obj: The deleted object.\n    \"\"\"\n</code></pre>"},{"location":"api/views/#starlette_admin.views.BaseModelView.after_edit","title":"<code>after_edit(request, obj)</code>  <code>async</code>","text":"<p>This hook is called after an item is successfully edited.</p> <p>Parameters:</p> Name Type Description Default <code>request</code> <code>Request</code> <p>The request being processed.</p> required <code>obj</code> <code>Any</code> <p>The edited object.</p> required Source code in <code>starlette_admin/views.py</code> <pre><code>async def after_edit(self, request: Request, obj: Any) -&gt; None:\n    \"\"\"\n    This hook is called after an item is successfully edited.\n\n    Args:\n        request: The request being processed.\n        obj: The edited object.\n    \"\"\"\n</code></pre>"},{"location":"api/views/#starlette_admin.views.BaseModelView.before_create","title":"<code>before_create(request, data, obj)</code>  <code>async</code>","text":"<p>This hook is called before a new item is created.</p> <p>Parameters:</p> Name Type Description Default <code>request</code> <code>Request</code> <p>The request being processed.</p> required <code>data</code> <code>Dict[str, Any]</code> <p>Dict values contained converted form data.</p> required <code>obj</code> <code>Any</code> <p>The object about to be created.</p> required Source code in <code>starlette_admin/views.py</code> <pre><code>async def before_create(\n    self, request: Request, data: Dict[str, Any], obj: Any\n) -&gt; None:\n    \"\"\"\n    This hook is called before a new item is created.\n\n    Args:\n        request: The request being processed.\n        data: Dict values contained converted form data.\n        obj: The object about to be created.\n    \"\"\"\n</code></pre>"},{"location":"api/views/#starlette_admin.views.BaseModelView.before_delete","title":"<code>before_delete(request, obj)</code>  <code>async</code>","text":"<p>This hook is called before an item is deleted.</p> <p>Parameters:</p> Name Type Description Default <code>request</code> <code>Request</code> <p>The request being processed.</p> required <code>obj</code> <code>Any</code> <p>The object about to be deleted.</p> required Source code in <code>starlette_admin/views.py</code> <pre><code>async def before_delete(self, request: Request, obj: Any) -&gt; None:\n    \"\"\"\n    This hook is called before an item is deleted.\n\n    Args:\n        request: The request being processed.\n        obj: The object about to be deleted.\n    \"\"\"\n</code></pre>"},{"location":"api/views/#starlette_admin.views.BaseModelView.before_edit","title":"<code>before_edit(request, data, obj)</code>  <code>async</code>","text":"<p>This hook is called before an item is edited.</p> <p>Parameters:</p> Name Type Description Default <code>request</code> <code>Request</code> <p>The request being processed.</p> required <code>data</code> <code>Dict[str, Any]</code> <p>Dict values contained converted form data</p> required <code>obj</code> <code>Any</code> <p>The object about to be edited.</p> required Source code in <code>starlette_admin/views.py</code> <pre><code>async def before_edit(\n    self, request: Request, data: Dict[str, Any], obj: Any\n) -&gt; None:\n    \"\"\"\n    This hook is called before an item is edited.\n\n    Args:\n        request: The request being processed.\n        data: Dict values contained converted form data\n        obj: The object about to be edited.\n    \"\"\"\n</code></pre>"},{"location":"api/views/#starlette_admin.views.BaseModelView.can_create","title":"<code>can_create(request)</code>","text":"<p>Permission for creating new Items. Return True by default</p> Source code in <code>starlette_admin/views.py</code> <pre><code>def can_create(self, request: Request) -&gt; bool:\n    \"\"\"Permission for creating new Items. Return True by default\"\"\"\n    return True\n</code></pre>"},{"location":"api/views/#starlette_admin.views.BaseModelView.can_delete","title":"<code>can_delete(request)</code>","text":"<p>Permission for deleting Items. Return True by default</p> Source code in <code>starlette_admin/views.py</code> <pre><code>def can_delete(self, request: Request) -&gt; bool:\n    \"\"\"Permission for deleting Items. Return True by default\"\"\"\n    return True\n</code></pre>"},{"location":"api/views/#starlette_admin.views.BaseModelView.can_edit","title":"<code>can_edit(request)</code>","text":"<p>Permission for editing Items. Return True by default</p> Source code in <code>starlette_admin/views.py</code> <pre><code>def can_edit(self, request: Request) -&gt; bool:\n    \"\"\"Permission for editing Items. Return True by default\"\"\"\n    return True\n</code></pre>"},{"location":"api/views/#starlette_admin.views.BaseModelView.can_view_details","title":"<code>can_view_details(request)</code>","text":"<p>Permission for viewing full details of Item. Return True by default</p> Source code in <code>starlette_admin/views.py</code> <pre><code>def can_view_details(self, request: Request) -&gt; bool:\n    \"\"\"Permission for viewing full details of Item. Return True by default\"\"\"\n    return True\n</code></pre>"},{"location":"api/views/#starlette_admin.views.BaseModelView.count","title":"<code>count(request, where=None)</code>  <code>abstractmethod</code> <code>async</code>","text":"<p>Count items Parameters:     request: The request being processed     where: Can be dict for complex query         <pre><code> {\"and\":[{\"id\": {\"gt\": 5}},{\"name\": {\"startsWith\": \"ban\"}}]}\n</code></pre>         or plain text for full search</p> Source code in <code>starlette_admin/views.py</code> <pre><code>@abstractmethod\nasync def count(\n    self,\n    request: Request,\n    where: Union[Dict[str, Any], str, None] = None,\n) -&gt; int:\n    \"\"\"\n    Count items\n    Parameters:\n        request: The request being processed\n        where: Can be dict for complex query\n            ```json\n             {\"and\":[{\"id\": {\"gt\": 5}},{\"name\": {\"startsWith\": \"ban\"}}]}\n            ```\n            or plain text for full search\n    \"\"\"\n    raise NotImplementedError()\n</code></pre>"},{"location":"api/views/#starlette_admin.views.BaseModelView.create","title":"<code>create(request, data)</code>  <code>abstractmethod</code> <code>async</code>","text":"<p>Create item Parameters:     request: The request being processed     data: Dict values contained converted form data Returns:     Any: Created Item</p> Source code in <code>starlette_admin/views.py</code> <pre><code>@abstractmethod\nasync def create(self, request: Request, data: Dict) -&gt; Any:\n    \"\"\"\n    Create item\n    Parameters:\n        request: The request being processed\n        data: Dict values contained converted form data\n    Returns:\n        Any: Created Item\n    \"\"\"\n    raise NotImplementedError()\n</code></pre>"},{"location":"api/views/#starlette_admin.views.BaseModelView.delete","title":"<code>delete(request, pks)</code>  <code>abstractmethod</code> <code>async</code>","text":"<p>Bulk delete items Parameters:     request: The request being processed     pks: List of primary keys</p> Source code in <code>starlette_admin/views.py</code> <pre><code>@abstractmethod\nasync def delete(self, request: Request, pks: List[Any]) -&gt; Optional[int]:\n    \"\"\"\n    Bulk delete items\n    Parameters:\n        request: The request being processed\n        pks: List of primary keys\n    \"\"\"\n    raise NotImplementedError()\n</code></pre>"},{"location":"api/views/#starlette_admin.views.BaseModelView.edit","title":"<code>edit(request, pk, data)</code>  <code>abstractmethod</code> <code>async</code>","text":"<p>Edit item Parameters:     request: The request being processed     pk: Primary key     data: Dict values contained converted form data Returns:     Any: Edited Item</p> Source code in <code>starlette_admin/views.py</code> <pre><code>@abstractmethod\nasync def edit(self, request: Request, pk: Any, data: Dict[str, Any]) -&gt; Any:\n    \"\"\"\n    Edit item\n    Parameters:\n        request: The request being processed\n        pk: Primary key\n        data: Dict values contained converted form data\n    Returns:\n        Any: Edited Item\n    \"\"\"\n    raise NotImplementedError()\n</code></pre>"},{"location":"api/views/#starlette_admin.views.BaseModelView.find_all","title":"<code>find_all(request, skip=0, limit=100, where=None, order_by=None)</code>  <code>abstractmethod</code> <code>async</code>","text":"<p>Find all items Parameters:     request: The request being processed     where: Can be dict for complex query         <pre><code> {\"and\":[{\"id\": {\"gt\": 5}},{\"name\": {\"startsWith\": \"ban\"}}]}\n</code></pre>         or plain text for full search     skip: should return values start from position skip+1     limit: number of maximum items to return     order_by: order data clauses in form <code>[\"id asc\", \"name desc\"]</code></p> Source code in <code>starlette_admin/views.py</code> <pre><code>@abstractmethod\nasync def find_all(\n    self,\n    request: Request,\n    skip: int = 0,\n    limit: int = 100,\n    where: Union[Dict[str, Any], str, None] = None,\n    order_by: Optional[List[str]] = None,\n) -&gt; Sequence[Any]:\n    \"\"\"\n    Find all items\n    Parameters:\n        request: The request being processed\n        where: Can be dict for complex query\n            ```json\n             {\"and\":[{\"id\": {\"gt\": 5}},{\"name\": {\"startsWith\": \"ban\"}}]}\n            ```\n            or plain text for full search\n        skip: should return values start from position skip+1\n        limit: number of maximum items to return\n        order_by: order data clauses in form `[\"id asc\", \"name desc\"]`\n    \"\"\"\n    raise NotImplementedError()\n</code></pre>"},{"location":"api/views/#starlette_admin.views.BaseModelView.find_by_pk","title":"<code>find_by_pk(request, pk)</code>  <code>abstractmethod</code> <code>async</code>","text":"<p>Find one item Parameters:     request: The request being processed     pk: Primary key</p> Source code in <code>starlette_admin/views.py</code> <pre><code>@abstractmethod\nasync def find_by_pk(self, request: Request, pk: Any) -&gt; Any:\n    \"\"\"\n    Find one item\n    Parameters:\n        request: The request being processed\n        pk: Primary key\n    \"\"\"\n    raise NotImplementedError()\n</code></pre>"},{"location":"api/views/#starlette_admin.views.BaseModelView.find_by_pks","title":"<code>find_by_pks(request, pks)</code>  <code>abstractmethod</code> <code>async</code>","text":"<p>Find many items Parameters:     request: The request being processed     pks: List of Primary key</p> Source code in <code>starlette_admin/views.py</code> <pre><code>@abstractmethod\nasync def find_by_pks(self, request: Request, pks: List[Any]) -&gt; Sequence[Any]:\n    \"\"\"\n    Find many items\n    Parameters:\n        request: The request being processed\n        pks: List of Primary key\n    \"\"\"\n    raise NotImplementedError()\n</code></pre>"},{"location":"api/views/#starlette_admin.views.BaseModelView.get_all_actions","title":"<code>get_all_actions(request)</code>  <code>async</code>","text":"<p>Return a list of allowed batch actions</p> Source code in <code>starlette_admin/views.py</code> <pre><code>async def get_all_actions(self, request: Request) -&gt; List[Dict[str, Any]]:\n    \"\"\"Return a list of allowed batch actions\"\"\"\n    actions = []\n    for action_name in not_none(self.actions):\n        if await self.is_action_allowed(request, action_name):\n            actions.append(self._actions.get(action_name, {}))\n    return actions\n</code></pre>"},{"location":"api/views/#starlette_admin.views.BaseModelView.get_all_row_actions","title":"<code>get_all_row_actions(request)</code>  <code>async</code>","text":"<p>Return a list of allowed row actions</p> Source code in <code>starlette_admin/views.py</code> <pre><code>async def get_all_row_actions(self, request: Request) -&gt; List[Dict[str, Any]]:\n    \"\"\"Return a list of allowed row actions\"\"\"\n    row_actions = []\n    for row_action_name in not_none(self.row_actions):\n        if await self.is_row_action_allowed(request, row_action_name):\n            _row_action = self._row_actions.get(row_action_name, {})\n            if (\n                request.state.action == RequestAction.LIST\n                and not _row_action.get(\"exclude_from_list\")\n            ) or (\n                request.state.action == RequestAction.DETAIL\n                and not _row_action.get(\"exclude_from_detail\")\n            ):\n                row_actions.append(_row_action)\n    return row_actions\n</code></pre>"},{"location":"api/views/#starlette_admin.views.BaseModelView.get_fields_list","title":"<code>get_fields_list(request, action=RequestAction.LIST)</code>","text":"<p>Return a list of field instances to display in the specified view action. This function excludes fields with corresponding exclude flags, which are determined by the <code>exclude_fields_from_*</code> attributes.</p> <p>Parameters:</p> Name Type Description Default <code>request</code> <code>Request</code> <p>The request being processed.</p> required <code>action</code> <code>RequestAction</code> <p>The type of action being performed on the view.</p> <code>LIST</code> Source code in <code>starlette_admin/views.py</code> <pre><code>def get_fields_list(\n    self,\n    request: Request,\n    action: RequestAction = RequestAction.LIST,\n) -&gt; Sequence[BaseField]:\n    \"\"\"Return a list of field instances to display in the specified view action.\n    This function excludes fields with corresponding exclude flags, which are\n    determined by the `exclude_fields_from_*` attributes.\n\n    Parameters:\n         request: The request being processed.\n         action: The type of action being performed on the view.\n    \"\"\"\n    return extract_fields(self.fields, action)\n</code></pre>"},{"location":"api/views/#starlette_admin.views.BaseModelView.get_serialized_pk_value","title":"<code>get_serialized_pk_value(request, obj)</code>  <code>async</code>","text":"<p>Return serialized value of the primary key.</p> <p>Note</p> <p>The returned value should be JSON-serializable.</p> <p>Parameters:</p> Name Type Description Default <code>request</code> <code>Request</code> <p>The request being processed</p> required <code>obj</code> <code>Any</code> <p>object to get primary key of</p> required <p>Returns:</p> Name Type Description <code>Any</code> <code>Any</code> <p>Serialized value of a PK.</p> Source code in <code>starlette_admin/views.py</code> <pre><code>async def get_serialized_pk_value(self, request: Request, obj: Any) -&gt; Any:\n    \"\"\"\n    Return serialized value of the primary key.\n\n    !!! note\n\n        The returned value should be JSON-serializable.\n\n    Parameters:\n        request: The request being processed\n        obj: object to get primary key of\n\n    Returns:\n        Any: Serialized value of a PK.\n    \"\"\"\n    return await self.get_pk_value(request, obj)\n</code></pre>"},{"location":"api/views/#starlette_admin.views.BaseModelView.handle_action","title":"<code>handle_action(request, pks, name)</code>  <code>async</code>","text":"<p>Handle action with <code>name</code>. Raises:     ActionFailed: to display meaningfully error</p> Source code in <code>starlette_admin/views.py</code> <pre><code>async def handle_action(\n    self, request: Request, pks: List[Any], name: str\n) -&gt; Union[str, Response]:\n    \"\"\"\n    Handle action with `name`.\n    Raises:\n        ActionFailed: to display meaningfully error\n    \"\"\"\n    handler = self._actions_handlers.get(name, None)\n    if handler is None:\n        raise ActionFailed(\"Invalid action\")\n    if not await self.is_action_allowed(request, name):\n        raise ActionFailed(\"Forbidden\")\n    handler_return = await handler(request, pks)\n    custom_response = self._actions[name][\"custom_response\"]\n    if isinstance(handler_return, Response) and not custom_response:\n        raise ActionFailed(\n            \"Set custom_response to true, to be able to return custom response\"\n        )\n    return handler_return\n</code></pre>"},{"location":"api/views/#starlette_admin.views.BaseModelView.handle_row_action","title":"<code>handle_row_action(request, pk, name)</code>  <code>async</code>","text":"<p>Handle row action with <code>name</code>. Raises:     ActionFailed: to display meaningfully error</p> Source code in <code>starlette_admin/views.py</code> <pre><code>async def handle_row_action(\n    self, request: Request, pk: Any, name: str\n) -&gt; Union[str, Response]:\n    \"\"\"\n    Handle row action with `name`.\n    Raises:\n        ActionFailed: to display meaningfully error\n    \"\"\"\n    handler = self._row_actions_handlers.get(name, None)\n    if handler is None:\n        raise ActionFailed(\"Invalid row action\")\n    if not await self.is_row_action_allowed(request, name):\n        raise ActionFailed(\"Forbidden\")\n    handler_return = await handler(request, pk)\n    custom_response = self._row_actions[name][\"custom_response\"]\n    if isinstance(handler_return, Response) and not custom_response:\n        raise ActionFailed(\n            \"Set custom_response to true, to be able to return custom response\"\n        )\n    return handler_return\n</code></pre>"},{"location":"api/views/#starlette_admin.views.BaseModelView.is_action_allowed","title":"<code>is_action_allowed(request, name)</code>  <code>async</code>","text":"<p>Verify if action with <code>name</code> is allowed. Override this method to allow or disallow actions based on some condition.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>Action name</p> required <code>request</code> <code>Request</code> <p>Starlette request</p> required Source code in <code>starlette_admin/views.py</code> <pre><code>async def is_action_allowed(self, request: Request, name: str) -&gt; bool:\n    \"\"\"\n    Verify if action with `name` is allowed.\n    Override this method to allow or disallow actions based\n    on some condition.\n\n    Args:\n        name: Action name\n        request: Starlette request\n    \"\"\"\n    if name == \"delete\":\n        return self.can_delete(request)\n    return True\n</code></pre>"},{"location":"api/views/#starlette_admin.views.BaseModelView.is_row_action_allowed","title":"<code>is_row_action_allowed(request, name)</code>  <code>async</code>","text":"<p>Verify if the row action with <code>name</code> is allowed. Override this method to allow or disallow row actions based on some condition.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>Row action name</p> required <code>request</code> <code>Request</code> <p>Starlette request</p> required Source code in <code>starlette_admin/views.py</code> <pre><code>async def is_row_action_allowed(self, request: Request, name: str) -&gt; bool:\n    \"\"\"\n    Verify if the row action with `name` is allowed.\n    Override this method to allow or disallow row actions based\n    on some condition.\n\n    Args:\n        name: Row action name\n        request: Starlette request\n    \"\"\"\n    if name == \"delete\":\n        return self.can_delete(request)\n    if name == \"edit\":\n        return self.can_edit(request)\n    if name == \"view\":\n        return self.can_view_details(request)\n    return True\n</code></pre>"},{"location":"api/views/#starlette_admin.views.BaseModelView.repr","title":"<code>repr(obj, request)</code>  <code>async</code>","text":"<p>Return a string representation of the given object that can be displayed in the admin interface.</p> <p>If the object has a custom representation method <code>__admin_repr__</code>, it is used to generate the string. Otherwise, the value of the object's primary key attribute is used.</p> <p>Parameters:</p> Name Type Description Default <code>obj</code> <code>Any</code> <p>The object to represent.</p> required <code>request</code> <code>Request</code> <p>The request being processed</p> required Example <p>For example, the following implementation for a <code>User</code> model will display the user's full name instead of their primary key in the admin interface:</p> <pre><code>class User:\n    id: int\n    first_name: str\n    last_name: str\n\n    def __admin_repr__(self, request: Request):\n        return f\"{self.last_name} {self.first_name}\"\n</code></pre> Source code in <code>starlette_admin/views.py</code> <pre><code>async def repr(self, obj: Any, request: Request) -&gt; str:\n    \"\"\"Return a string representation of the given object that can be displayed in the admin interface.\n\n    If the object has a custom representation method `__admin_repr__`, it is used to generate the string. Otherwise,\n    the value of the object's primary key attribute is used.\n\n    Args:\n        obj: The object to represent.\n        request: The request being processed\n\n    Example:\n        For example, the following implementation for a `User` model will display\n        the user's full name instead of their primary key in the admin interface:\n\n        ```python\n        class User:\n            id: int\n            first_name: str\n            last_name: str\n\n            def __admin_repr__(self, request: Request):\n                return f\"{self.last_name} {self.first_name}\"\n        ```\n    \"\"\"\n    repr_method = getattr(obj, \"__admin_repr__\", None)\n    if repr_method is None:\n        return str(await self.get_pk_value(request, obj))\n    if inspect.iscoroutinefunction(repr_method):\n        return await repr_method(request)\n    return repr_method(request)\n</code></pre>"},{"location":"api/views/#starlette_admin.views.BaseModelView.select2_result","title":"<code>select2_result(obj, request)</code>  <code>async</code>","text":"<p>Returns an HTML-formatted string that represents the search results for a Select2 search box.</p> <p>By default, this method returns a string that contains all the object's attributes in a list except relation and file attributes.</p> <p>If the object has a custom representation method <code>__admin_select2_repr__</code>, it is used to generate the HTML-formatted string.</p> <p>Note</p> <p>The returned value should be valid HTML.</p> <p>Danger</p> <p>Escape your database value to avoid Cross-Site Scripting (XSS) attack. You can use Jinja2 Template render with <code>autoescape=True</code>. For more information click here</p> <p>Parameters:</p> Name Type Description Default <code>obj</code> <code>Any</code> <p>The object returned by the <code>find_all</code> or <code>find_by_pk</code> method.</p> required <code>request</code> <code>Request</code> <p>The request being processed</p> required Example <p>Here is an example implementation for a <code>User</code> model that includes the user's name and photo:</p> <pre><code>class User:\n    id: int\n    name: str\n    photo_url: str\n\n    def __admin_select2_repr__(self, request: Request) -&gt; str:\n        return f'&lt;div&gt;&lt;img src=\"{escape(photo_url)}\"&gt;&lt;span&gt;{escape(self.name)}&lt;/span&gt;&lt;/div&gt;'\n</code></pre> Source code in <code>starlette_admin/views.py</code> <pre><code>async def select2_result(self, obj: Any, request: Request) -&gt; str:\n    \"\"\"Returns an HTML-formatted string that represents the search results for a Select2 search box.\n\n    By default, this method returns a string that contains all the object's attributes in a list except\n    relation and file attributes.\n\n    If the object has a custom representation method `__admin_select2_repr__`, it is used to generate the\n    HTML-formatted string.\n\n    !!! note\n\n        The returned value should be valid HTML.\n\n    !!! danger\n\n        Escape your database value to avoid Cross-Site Scripting (XSS) attack.\n        You can use Jinja2 Template render with `autoescape=True`.\n        For more information [click here](https://owasp.org/www-community/attacks/xss/)\n\n    Parameters:\n        obj: The object returned by the `find_all` or `find_by_pk` method.\n        request: The request being processed\n\n    Example:\n        Here is an example implementation for a `User` model\n        that includes the user's name and photo:\n\n        ```python\n        class User:\n            id: int\n            name: str\n            photo_url: str\n\n            def __admin_select2_repr__(self, request: Request) -&gt; str:\n                return f'&lt;div&gt;&lt;img src=\"{escape(photo_url)}\"&gt;&lt;span&gt;{escape(self.name)}&lt;/span&gt;&lt;/div&gt;'\n        ```\n\n    \"\"\"\n    template_str = (\n        \"&lt;span&gt;{%for col in fields %}{%if obj[col]%}&lt;strong&gt;{{col}}:\"\n        \" &lt;/strong&gt;{{obj[col]}} {%endif%}{%endfor%}&lt;/span&gt;\"\n    )\n    fields = [\n        field.name\n        for field in self.get_fields_list(request)\n        if (\n            not isinstance(field, (RelationField, FileField))\n            and not field.exclude_from_detail\n        )\n    ]\n    html_repr_method = getattr(\n        obj,\n        \"__admin_select2_repr__\",\n        lambda request: Template(template_str, autoescape=True).render(\n            obj=obj, fields=fields\n        ),\n    )\n    if inspect.iscoroutinefunction(html_repr_method):\n        return await html_repr_method(request)\n    return html_repr_method(request)\n</code></pre>"},{"location":"api/views/#starlette_admin.views.BaseModelView.select2_selection","title":"<code>select2_selection(obj, request)</code>  <code>async</code>","text":"<p>Returns the HTML representation of an item selected by a user in a Select2 component. By default, it simply calls <code>select2_result()</code>.</p> <p>Note</p> <p>The returned value should be valid HTML.</p> <p>Danger</p> <p>Escape your database value to avoid Cross-Site Scripting (XSS) attack. You can use Jinja2 Template render with <code>autoescape=True</code>. For more information click here</p> <p>Parameters:</p> Name Type Description Default <code>obj</code> <code>Any</code> <p>item returned by <code>find_all</code> or <code>find_by_pk</code></p> required <code>request</code> <code>Request</code> <p>The request being processed</p> required Source code in <code>starlette_admin/views.py</code> <pre><code>async def select2_selection(self, obj: Any, request: Request) -&gt; str:\n    \"\"\"\n    Returns the HTML representation of an item selected by a user in a Select2 component.\n    By default, it simply calls `select2_result()`.\n\n    !!! note\n\n        The returned value should be valid HTML.\n\n    !!! danger\n\n        Escape your database value to avoid Cross-Site Scripting (XSS) attack.\n        You can use Jinja2 Template render with `autoescape=True`.\n        For more information [click here](https://owasp.org/www-community/attacks/xss/)\n\n    Parameters:\n        obj: item returned by `find_all` or `find_by_pk`\n        request: The request being processed\n\n    \"\"\"\n    return await self.select2_result(obj, request)\n</code></pre>"},{"location":"api/views/#starlette_admin.views.BaseModelView.serialize_field_value","title":"<code>serialize_field_value(value, field, action, request)</code>  <code>async</code>","text":"<p>Format output value for each field.</p> <p>Important</p> <p>The returned value should be json serializable</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>Any</code> <p>attribute of item returned by <code>find_all</code> or <code>find_by_pk</code></p> required <code>field</code> <code>BaseField</code> <p>Starlette Admin field for this attribute</p> required <code>action</code> <code>RequestAction</code> <p>Specify where the data will be used. Possible values are <code>VIEW</code> for detail page, <code>EDIT</code> for editing page and <code>API</code> for listing page and select2 data.</p> required <code>request</code> <code>Request</code> <p>The request being processed</p> required Source code in <code>starlette_admin/views.py</code> <pre><code>async def serialize_field_value(\n    self, value: Any, field: BaseField, action: RequestAction, request: Request\n) -&gt; Any:\n    \"\"\"\n    Format output value for each field.\n\n    !!! important\n\n        The returned value should be json serializable\n\n    Parameters:\n        value: attribute of item returned by `find_all` or `find_by_pk`\n        field: Starlette Admin field for this attribute\n        action: Specify where the data will be used. Possible values are\n            `VIEW` for detail page, `EDIT` for editing page and `API`\n            for listing page and select2 data.\n        request: The request being processed\n    \"\"\"\n    if value is None:\n        return await field.serialize_none_value(request, action)\n    return await field.serialize_value(request, value, action)\n</code></pre>"},{"location":"changelog/","title":"Changelog","text":"<p>All notable changes to this project will be documented in this file.</p> <p>The format is based on Keep a Changelog, and this project adheres to Semantic Versioning.</p>"},{"location":"changelog/#0151-2025-05-26","title":"[0.15.1] - 2025-05-26","text":""},{"location":"changelog/#fixed","title":"Fixed","text":"<ul> <li>Reenable autoescaping in template rendering by @jowilf   in #662</li> </ul>"},{"location":"changelog/#0150-2025-05-21","title":"[0.15.0] - 2025-05-21","text":""},{"location":"changelog/#breaking-changes","title":"Breaking Changes","text":""},{"location":"changelog/#updated-method-signatures-in-modelview-class","title":"Updated Method Signatures in <code>ModelView</code> Class","text":"<p>The following methods in the <code>ModelView</code> class now require an additional <code>request</code> parameter:</p> <ol> <li> <p><code>get_list_query</code></p> <ul> <li>Old Signature: <code>def get_list_query(self) -&gt; Select</code></li> <li>New Signature: <code>def get_list_query(self, request: Request) -&gt; Select</code></li> </ul> </li> <li> <p><code>get_count_query</code></p> <ul> <li>Old Signature: <code>def get_count_query(self) -&gt; Select</code></li> <li>New Signature: <code>def get_count_query(self, request: Request) -&gt; Select</code></li> </ul> </li> </ol>"},{"location":"changelog/#impact-on-custom-implementations","title":"Impact on Custom Implementations","text":"<p>If you have extended or overridden the <code>get_list_query</code> or <code>get_count_query</code> methods in your custom views, you must update their definitions to include the <code>request</code> parameter.</p>"},{"location":"changelog/#example-update","title":"Example Update","text":"BeforeAfter <pre><code>def get_list_query(self) -&gt; Select:\n    return super().get_list_query().where(Post.published == true())\n</code></pre> <pre><code>def get_list_query(self, request: Request) -&gt; Select:\n  return super().get_list_query(request).where(Post.published == true())\n</code></pre>"},{"location":"changelog/#added","title":"Added","text":"<ul> <li>Implement Beanie ODM Support by @alexdlukens   in #656</li> <li>Add zh_Hant (Traditional Chinese) translation by @limouren   in #646</li> <li>Add <code>get_details_query</code> to SQLAlchemy ModelView. by @nimaxin   in #643</li> <li>feat(sqla): add support for joined table polymorphic inheritance by @noamsto   in #633</li> <li>Improve JsonField form template by @jowilf   in #639</li> <li>bump httpx test dependency by @pbsds   in #630</li> <li>Allow overriding the default templates by @jowilf   in #636</li> <li>upgrade tabler to 1.1.0 by @jowilf   in #637</li> <li>Add support for sqlalchemy <code>collection_class</code> property by @jowilf   in #625</li> <li>feat(base): add redirect_slashes option to mount_to method by @noamsto   in #618</li> <li>escape row and bulk actions form value in template by @jowilf   in #615</li> <li>upgrade tabler to beta21 by @jowilf   in #599</li> <li>Upgrade Odmantic support to v1.0+ by @jowilf   in #594</li> <li>Add Portuguese translation by @abnerjacobsen   in #480</li> </ul>"},{"location":"changelog/#fixed_1","title":"Fixed","text":"<ul> <li>Fix dictionary size change exception when using SQLAlchemy <code>association_proxy</code> by @jowilf   in #624</li> <li>Update enum rendering to ensure 'selected' state is applied for data value of 0   by @tomopy03 in #621</li> <li>escape json value in relation template by @jowilf   in #598</li> <li>Fix Deprecation Warnings for TemplateResponse and Jinja2Templates by @ptrstn   in #575</li> </ul>"},{"location":"changelog/#0141-2024-07-12","title":"[0.14.1] - 2024-07-12","text":""},{"location":"changelog/#fixed_2","title":"Fixed","text":"<ul> <li>Fix JSON serialization error for UUID primary keys when excluded from list by @alg   in #553</li> </ul>"},{"location":"changelog/#0140-2024-05-28","title":"[0.14.0] - 2024-05-28","text":""},{"location":"changelog/#added_1","title":"Added","text":"<ul> <li>Add German translation   by @disrupted   in #523</li> <li>Add Support for favicon customization   by @omarmoo5   in #520</li> </ul>"},{"location":"changelog/#0132-2024-02-04","title":"[0.13.2] - 2024-02-04","text":""},{"location":"changelog/#fixed_3","title":"Fixed","text":"<ul> <li>Remove extra whitespaces from TextAreaField form template (0.13.0 regression) by @jowilf   in #494</li> </ul>"},{"location":"changelog/#0131-2024-01-21","title":"[0.13.1] - 2024-01-21","text":""},{"location":"changelog/#fixed_4","title":"Fixed","text":"<ul> <li>Fixed the StopIteration exception raised in Sqlalchemy ModelView when the primary key is not included in the field   list by @jowilf in #482</li> </ul>"},{"location":"changelog/#0130-2024-01-16","title":"[0.13.0] - 2024-01-16","text":""},{"location":"changelog/#added_2","title":"Added","text":"<ul> <li>Enhance AuthMiddleware, introduce <code>@login_not_required</code> decorator and <code>allow_routes</code>, deprecate <code>allow_paths</code>   by @jowilf   in #474</li> <li>Add a search bar on detail page to search by attributes or values   by @hasansezertasan   in #461</li> <li>Refactor TinyMCEEditorField: support custom TinyMCE configuration   by @hasansezertasan   in #380</li> <li>Add support for SQLAlchemy <code>column_property</code> by @jowilf   in #408</li> <li>Add support for SQLAlchemy Models with Multiple Primary Keys by @jowilf   in #402</li> <li>Adds <code>AdminConfig</code> to override <code>app_title</code> and <code>logo_url</code> in the templates   by @hasansezertasan   in #374</li> </ul>"},{"location":"changelog/#fixed_5","title":"Fixed","text":"<ul> <li>Support translation for login form placeholders by @hasansezertasan   in #425</li> <li>Fixes actions docstrings   by @mrharpo   in #401</li> </ul>"},{"location":"changelog/#0122-2023-11-13","title":"[0.12.2] - 2023-11-13","text":"<ul> <li>Fixed issue where \"Empty\" and \"Not Empty\" filters raised NotImplementedError on SQLAlchemy relationship attributes   by @whchi in #394</li> </ul>"},{"location":"changelog/#0121-2023-11-07","title":"[0.12.1] - 2023-11-07","text":"<ul> <li>Fixed a regression caused by #361 where SQLAlchemy models with   Mixin Classes raises AttributeError by @hasansezertasan   in #385</li> </ul>"},{"location":"changelog/#0120-2023-11-07","title":"[0.12.0] - 2023-11-07","text":""},{"location":"changelog/#added_3","title":"Added","text":"<ul> <li>Add Before and After Hooks for Create, Edit, and Delete Operations by @jowilf   in #327</li> <li>Feature: Row actions by @jowilf &amp; @mrharpo   in #348   and #302</li> <li>Add Support for Custom Sortable Field Mapping in SQLAlchemy ModelView by @jowilf   in #328</li> </ul> Usage <pre><code>class Post(Base):\n    __tablename__ = \"post\"\n\n    id: Mapped[int] = mapped_column(primary_key=True)\n    title: Mapped[str] = mapped_column()\n    user_id: Mapped[int] = mapped_column(ForeignKey(\"user.id\"))\n    user: Mapped[User] = relationship(back_populates=\"posts\")\n\nclass PostView(ModelView):\n    sortable_field = [\"id\", \"title\", \"user\"]\n    sortable_field_mapping = {\n        \"user\": User.age,  # Sort by the age of the related user\n    }\n</code></pre> <ul> <li>Add support for Turkish language by @hasansezertasan   in #330 &amp; #377.</li> <li>Allow the page title customization from the ModelView by @mrharpo   in #311</li> <li>Add support for custom DataTables options by @mrharpo   in #308</li> <li>Add support for datatables state saving</li> </ul> Usage <pre><code>class MyModelView(ModelView):\n    save_state = True\n</code></pre>"},{"location":"changelog/#fixed_6","title":"Fixed","text":"<ul> <li> <p>Fix #347: Detect SQLAlchemy primary key with custom column   name by @jowilf   in #361</p> </li> <li> <p>Fixed a bug with field access authorization where restricted users could not modify a partial list of fields in an   entity by @jowilf in #360</p> </li> </ul>"},{"location":"changelog/#internals","title":"Internals","text":"<ul> <li>Explicitly export all public functions and classes by @jowilf   in #362</li> </ul>"},{"location":"changelog/#0112-2023-08-31","title":"[0.11.2] - 2023-08-31","text":""},{"location":"changelog/#fixed_7","title":"Fixed","text":"<ul> <li>Bug Fix: Current Enum Value Not Pre-Selected on Edit by @jowilf   in #273</li> </ul>"},{"location":"changelog/#0111-2023-07-29","title":"[0.11.1] - 2023-07-29","text":""},{"location":"changelog/#fixed_8","title":"Fixed","text":"<ul> <li>Bug Fix: Ensure Excluded fields from a RequestAction are not treated by @jowilf   in #251</li> </ul>"},{"location":"changelog/#0110-2023-07-26","title":"[0.11.0] - 2023-07-26","text":""},{"location":"changelog/#added_4","title":"Added","text":"<ul> <li>Improve the Authentication Provider to support custom flow such as oauth2/OIDC by @jowilf   in #221.</li> </ul>"},{"location":"changelog/#internals_1","title":"Internals","text":"<ul> <li>Drop python 3.7 support by @jowilf   in #248</li> </ul>"},{"location":"changelog/#0101-2023-07-22","title":"[0.10.1] - 2023-07-22","text":""},{"location":"changelog/#fixed_9","title":"Fixed","text":"<ul> <li>Fix #224 by @jowilf   in #227</li> <li>Fix #239: Order Select2 data by primary key during fetching by   @jowilf in #241</li> </ul>"},{"location":"changelog/#0100-2023-06-26","title":"[0.10.0] - 2023-06-26","text":""},{"location":"changelog/#added_5","title":"Added","text":"<ul> <li>Added support for Russian language in the web interface by @nessshon   in #201</li> <li>i18n: Update message catalogs by @jowilf   in #202</li> <li>Support custom response for batch actions by @jowilf   in #212</li> </ul>"},{"location":"changelog/#fixed_10","title":"Fixed","text":"<ul> <li>Fixed #206: Setting <code>add_to_menu=False</code> in CustomView still   results in the view being displayed in the menu</li> </ul>"},{"location":"changelog/#090-2023-05-25","title":"[0.9.0] - 2023-05-25","text":""},{"location":"changelog/#added_6","title":"Added","text":"<ul> <li>Enhance fields conversion logic to support custom converters   by @jowilf in #191</li> <li>Add deployment section to documentation by @jowilf   in #195</li> </ul>"},{"location":"changelog/#fixed_11","title":"Fixed","text":"<ul> <li>Blank Edit Form Displayed for IntegerField with Value 0 by @jowilf   in #194</li> </ul>"},{"location":"changelog/#082-2023-05-12","title":"[0.8.2] - 2023-05-12","text":""},{"location":"changelog/#added_7","title":"Added","text":"<ul> <li>Add <code>allow_paths</code> parameter to AuthProvider to allow unauthenticated access to specific paths   by @jowilf   in #187</li> <li>Allow Unauthenticated Access to <code>js.cookie.min.js</code> by @mixartemev   in #183</li> </ul>"},{"location":"changelog/#081-2023-04-30","title":"[0.8.1] - 2023-04-30","text":""},{"location":"changelog/#added_8","title":"Added","text":"<ul> <li>Update fontawesome to 6.4.0 &amp; add missings webfonts by @jowilf   in #176</li> <li>Allow class level configuration for ModelView identity, name &amp; label by @jowilf   in #178</li> </ul>"},{"location":"changelog/#080-2023-04-09","title":"[0.8.0] - 2023-04-09","text":""},{"location":"changelog/#added_9","title":"Added","text":"<ul> <li>Add extension to autovalidate SQLAlchemy data with pydantic by @jowilf   in #144</li> <li>Make <code>_extract_fields()</code> method in BaseModelView public and renamed   to get_fields_list() by @jowilf   in #148</li> <li>Add support for custom object representations in the admin interface with <code>__admin_repr__</code>   and <code>__admin_select2_repr__</code>  by @jowilf   in #152. The documentation can be   found here</li> </ul>"},{"location":"changelog/#internals_2","title":"Internals","text":"<ul> <li>Enhance code quality with additional ruff rules by @jowilf   in #159</li> </ul>"},{"location":"changelog/#070-2023-03-24","title":"[0.7.0] - 2023-03-24","text":""},{"location":"changelog/#added_10","title":"Added","text":"<ul> <li>Allow custom form for batch actions by @giaptx and @jowilf   in #61</li> <li>Add TinyMCEEditorField by @sinisaos   and @jowilf   in #131</li> </ul>"},{"location":"changelog/#internals_3","title":"Internals","text":"<ul> <li>Add SQLAlchemy model with Pydantic validation example @jowilf   in #125</li> <li>Refactor and format HTML files for better readability by @jowilf   in #136</li> </ul>"},{"location":"changelog/#060-2023-03-12","title":"[0.6.0] - 2023-03-12","text":""},{"location":"changelog/#added_11","title":"Added","text":"<ul> <li>Setup i18n and Add French translations by @jowilf   in #74 *</li> </ul> <p>Add TimeZoneField, CountryField, CurrencyField &amp; ArrowField</p> <ul> <li>Add support for sqlalchemy_utils data types</li> <li>Add SQLAlchemy 2 support by  @jowilf   in #113</li> <li>Add support for initial order (sort) to apply to the table by @jowilf   in #115</li> </ul> <p>Usage</p> <pre><code>class User:\n    id: int\n    last_name: str\n    first_name: str\n\n\nclass UserView(ModelView):\n    fields_default_sort = [\"last_name\", (\"first_name\", True)]\n\nadmin.add_view(UserView(User))\n</code></pre>"},{"location":"changelog/#fixed_12","title":"Fixed","text":"<ul> <li>Fix #69 : Return <code>HTTP_422_UNPROCESSABLE_ENTITY</code> when form data   is not valid</li> </ul>"},{"location":"changelog/#deprecated","title":"Deprecated","text":"<ul> <li><code>EnumField.from_enum(\"status\", Status)</code> is deprecated. Use <code>EnumField(\"status\", enum=Status)</code> instead.</li> <li><code>EnumField.from_choices(\"language\", [('cpp', 'C++'), ('py', 'Python')])</code> is deprecated.   Use <code>EnumField(\"name\", choices=[('cpp', 'C++'), ('py', 'Python')])</code> instead.</li> </ul>"},{"location":"changelog/#055-2023-03-06","title":"[0.5.5] - 2023-03-06","text":""},{"location":"changelog/#fixed_13","title":"Fixed","text":"<ul> <li>Fix #116 : Internal Server Error when login credentials are   wrong by @jowilf in #117</li> </ul>"},{"location":"changelog/#054-2023-03-03","title":"[0.5.4] - 2023-03-03","text":""},{"location":"changelog/#fixed_14","title":"Fixed","text":"<ul> <li>Fix #99 : Show error message when an error occur on <code>delete</code>   action (detail view).</li> </ul>"},{"location":"changelog/#added_12","title":"Added","text":"<ul> <li>Display meaningfully error message when SQLAlchemyError occur during action execution   by @jowilf and @dolamroth   in #105</li> </ul>"},{"location":"changelog/#053-2023-02-25","title":"[0.5.3] - 2023-02-25","text":""},{"location":"changelog/#fixed_15","title":"Fixed","text":"<ul> <li>Fix Bug with SQLAlchemy column converters by @jowilf   in #103</li> </ul>"},{"location":"changelog/#052-2022-12-29","title":"[0.5.2] - 2022-12-29","text":""},{"location":"changelog/#fixed_16","title":"Fixed","text":"<ul> <li>Fix Bug with <code>search_format</code> params for DateField   and TimeField   by @jowilf &amp; @ihuro   in #68 &amp; #71</li> </ul>"},{"location":"changelog/#051-2022-12-27","title":"[0.5.1] - 2022-12-27","text":""},{"location":"changelog/#fixed_17","title":"Fixed","text":"<ul> <li>Fix Bug with <code>sqlalchemy.dialects.postgresql.base.UUID</code> column by @jowilf   in #65</li> </ul>"},{"location":"changelog/#050-2022-12-17","title":"[0.5.0] - 2022-12-17","text":""},{"location":"changelog/#added_13","title":"Added","text":"<ul> <li>Introduce <code>AdminUser</code> and add navbar to show the   current <code>AdminUser</code> information (<code>username</code> and <code>photo</code>)   by @jowilf in #49</li> </ul>"},{"location":"changelog/#internals_4","title":"Internals","text":"<ul> <li>Add auth example by @jowilf in #51</li> </ul>"},{"location":"changelog/#040-2022-12-07","title":"[0.4.0] - 2022-12-07","text":""},{"location":"changelog/#added_14","title":"Added","text":"<ul> <li>Custom batch actions by @jowilf   in #44</li> <li>Add <code>get_list_query</code>, <code>get_count_query</code> and <code>get_search_query</code> methods to SQLAlchemy backend that can be inherited for   customization by @jowilf in #47</li> </ul>"},{"location":"changelog/#internals_5","title":"Internals","text":"<ul> <li>Update datatables to <code>1.13.1</code></li> <li>Update Search builder UI to fit tabler design</li> </ul>"},{"location":"changelog/#032-2022-12-02","title":"[0.3.2] - 2022-12-02","text":""},{"location":"changelog/#fixed_18","title":"Fixed","text":"<ul> <li>Fix Datatables warning when primary key is not included in <code>fields</code> by @jowilf   in #23</li> </ul>"},{"location":"changelog/#docs","title":"Docs","text":"<ul> <li>Add spanish translation for <code>docs/index.md</code> by @rafnixg   in #35</li> </ul>"},{"location":"changelog/#internals_6","title":"Internals","text":"<ul> <li>Use Ruff for linting by @jowilf   in #29</li> <li>Migrate to Hatch by @jowilf in #30</li> <li>Setup pre-commit by @jowilf in #33</li> <li>Add support for Python 3.11 in test suite by @jowilf   in #34</li> </ul>"},{"location":"changelog/#031-2022-11-22","title":"[0.3.1] - 2022-11-22","text":""},{"location":"changelog/#fixed_19","title":"Fixed","text":"<ul> <li>Fix Regression on SQLModel backend: Duplicate instances when creating or updating a model with relationships   in #23</li> </ul>"},{"location":"changelog/#030-2022-11-21","title":"[0.3.0] - 2022-11-21","text":""},{"location":"changelog/#breaking-changes_1","title":"Breaking Changes","text":"<ul> <li>Changes in <code>ModelView</code> definition</li> </ul> NowBefore <pre><code>class Post:\n    id: int\n    title: str\n\nadmin.add_view(ModelView(Post, icon=\"fa fa-blog\", label = \"Blog Posts\"))\n</code></pre> <pre><code>class Post:\n    id: int\n    title: str\n\n\nclass PostView(ModelView, model=Post):\n    icon = \"fa fa-blog\"\n    label = \"Blog Posts\"\n\nadmin.add_view(PostView)\n</code></pre> <ul> <li>Changes in <code>CustomView</code> definition</li> </ul> NowBefore <pre><code>admin.add_view(CustomView(label=\"Home\", icon=\"fa fa-home\", path=\"/home\", template_path=\"home.html\"))\n</code></pre> <pre><code>class HomeView(CustomView):\n    label = \"Home\"\n    icon = \"fa fa-home\"\n    path = \"/home\"\n    template_path = \"home.html\"\n\nadmin.add_view(HomeView)\n</code></pre> <ul> <li>Changes in <code>Link</code> definition</li> </ul> NowBefore <pre><code>admin.add_view(Link(label=\"Back to Home\", icon=\"fa fa-home\", url=\"/\", target = \"_blank\"))\n</code></pre> <pre><code>class BackToHome(Link):\n    label = \"Back to Home\"\n    icon = \"fa fa-home\"\n    url = \"/\"\n    target = \"_blank\"\n</code></pre> <p>These changes are inspired from Flask-admin and are introduced to help reduce code size and keep it simple.</p>"},{"location":"changelog/#added_15","title":"Added","text":"<ul> <li>Add <code>CollectionField</code></li> <li>Add <code>ListField</code></li> <li>Add support for Odmantic</li> <li>Add support for datatables responsive extensions</li> </ul> <p>Usage</p> <pre><code>class MyModelView(ModelView):\n    responsive_table = True\n</code></pre>"},{"location":"changelog/#changed","title":"Changed","text":"<ul> <li>Move <code>SQLModel</code> to it own contrib package</li> <li>MongoEngine <code>EmbeddedDocumentField</code> is now converted into <code>CollectionField</code></li> </ul>"},{"location":"changelog/#removed","title":"Removed","text":"<ul> <li>Remove PDF from default <code>export_types</code></li> </ul>"},{"location":"changelog/#022-2022-09-20","title":"[0.2.2] - 2022-09-20","text":""},{"location":"changelog/#fixed_20","title":"Fixed","text":"<ul> <li>Null support for EnumField in #17</li> </ul>"},{"location":"changelog/#021-2022-09-19","title":"[0.2.1] - 2022-09-19","text":""},{"location":"changelog/#fixed_21","title":"Fixed","text":"<ul> <li>Fix SearchBuilder not working with dates (SQLAlchemy) in #15</li> </ul>"},{"location":"changelog/#020-2022-09-14","title":"[0.2.0] - 2022-09-14","text":""},{"location":"changelog/#changed_1","title":"Changed","text":"<ul> <li>Date &amp; Time input now use Flatpickr in #10</li> </ul>"},{"location":"changelog/#011-2022-09-09","title":"[0.1.1] - 2022-09-09","text":""},{"location":"changelog/#added_16","title":"Added","text":"<ul> <li>Add <code>ColorField</code> in #7</li> <li>AsyncEngine support for SQLAlchemy in #8</li> </ul>"},{"location":"deployment/","title":"Deployment","text":"<p>Whether you're using Starlette-Admin with FastAPI or Starlette, there are already well-documented resources to guide you through the deployment process. It is strongly recommended to refer to these resources as they offer detailed information and best practices:</p> <ul> <li>FastAPI Deployment Documentation</li> <li>Uvicorn Deployment Documentation</li> </ul> <p>However, When running your application behind a proxy server such as Traefik or Nginx, you may encounter an issue where static files are not rendered as HTTPS links. To address this issue, follow the steps below:</p> <ol> <li>Ensure that your proxy server is properly configured to handle HTTPS traffic.</li> <li>When starting your application with Uvicorn, include the <code>--forwarded-allow-ips</code> and <code>--proxy-headers</code> options.    These options enable Uvicorn to correctly handle forwarded headers from the proxy server.</li> </ol> Example<pre><code>uvicorn app.main:app --forwarded-allow-ips='*' --proxy-headers\n</code></pre>"},{"location":"tutorials/","title":"Introduction","text":"<p>The tutorials will introduce you to a series of hands-on exercises designed to help you master the various features of Starlette-Admin. Each tutorial guides you through practical steps, allowing you to learn by doing.</p>"},{"location":"tutorials/#prerequisites","title":"Prerequisites","text":"<p>Before diving into the tutorials, ensure you meet the following prerequisites:</p> <ul> <li>Understand the basics of FastAPI or Starlette</li> <li>Familiarize yourself with at least one of the following ORM/ODMs:<ul> <li>SQLAlchemy</li> <li>SQLModel</li> <li>MongoEngine</li> <li>ODMantic</li> </ul> </li> </ul>"},{"location":"tutorials/basic/","title":"Building your first admin panel","text":"<p>The goal of this tutorial is to guide you through the process of creating an admin panel to manage a simple Todo model using Starlette-Admin.</p> <p>By the end of this tutorial, you will have a user-friendly admin interface to perform CRUD (Create, Read, Update, Delete) operations on Todo items without the need for writing any front-end code or complex database queries.</p> <p>What you will learn</p> <ul> <li>How to generate a basic admin panel for your models</li> <li>Familiarize yourself with the generated admin panel</li> <li>Basic concepts of Starlette-Admin</li> </ul>"},{"location":"tutorials/basic/#project-setup","title":"Project Setup","text":""},{"location":"tutorials/basic/#installation","title":"Installation","text":"<ul> <li>Create a virtual environment and activate it</li> </ul> macOS/LinuxWindows <pre><code>python -m venv env\nsource env/bin/activate\n</code></pre> <pre><code>python -m venv env\nenv\\Scripts\\activate\n</code></pre> <ul> <li>Create a <code>requirements.txt</code> file with the following content</li> </ul> SQLAlchemySQLModelMongoEngineODMantic <pre><code>starlette-admin\nsqlalchemy\nuvicorn\n</code></pre> <pre><code>starlette-admin\nsqlmodel\nuvicorn\n</code></pre> <pre><code>starlette-admin\nmongoengine\nuvicorn\n</code></pre> <pre><code>starlette-admin\nodmantic\nuvicorn\n</code></pre> Note <p>If you prefer to setup a FastAPI project, add <code>fastapi</code> in your requirements file. For example,</p> <pre><code>fastapi\nstarlette-admin\nsqlalchemy\nuvicorn\n</code></pre> <ul> <li>Install the dependencies</li> </ul> <pre><code>pip install -r requirements.txt\n</code></pre>"},{"location":"tutorials/basic/#project-structure","title":"Project structure","text":"<pre><code>.\n\u2502\n\u251c\u2500\u2500 env/                # Virtual environment directory\n\u251c\u2500\u2500 main.py             # Main tutorial file\n\u2514\u2500\u2500 requirements.txt    # File specifying tutorial dependencies\n</code></pre> <p>In this tutorial, all code will be contained within the <code>main.py</code> file for simplicity. As you progress to real-world applications, consider organizing your code into modular structures.</p>"},{"location":"tutorials/basic/#define-the-model","title":"Define the model","text":"<p>Now that our project is ready, let's write the Todo model, on which we will perform the CRUD Operations</p> SQLAlchemySQLModelMongoEngineODMantic <pre><code>from sqlalchemy.orm import DeclarativeBase, Mapped, mapped_column\n\n\nclass Base(DeclarativeBase):\n    pass\n\n\nclass Todo(Base):\n    __tablename__ = \"todo\"\n\n    id: Mapped[int] = mapped_column(primary_key=True)\n    title: Mapped[str]\n    done: Mapped[bool]\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, SQLModel\n\n\nclass Todo(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    title: str\n    done: bool\n</code></pre> <pre><code>import mongoengine as db\n\n\nclass Todo(db.Document):\n    title = db.StringField()\n    done = db.BooleanField()\n</code></pre> <pre><code>from odmantic import Model\n\n\nclass Todo(Model):\n    title: str\n    done: bool\n</code></pre> <p>Let's take a closer look at the attributes:</p> <ul> <li><code>id (int)</code>: A unique identifier for each Todo item.</li> <li><code>title (str)</code>: The title or description of the Todo item.</li> <li><code>done (bool)</code>: A boolean value indicating whether the Todo item is marked as done.</li> </ul> Note <p>For MongoEngine and ODMantic, the <code>id</code> field is added automatically and serves as the unique identifier. You don't need to explicitly define it in the model.</p>"},{"location":"tutorials/basic/#configure-the-admin-panel","title":"Configure the admin panel","text":""},{"location":"tutorials/basic/#initialization","title":"Initialization","text":"<p>To begin, we'll set up an empty admin interface:</p> SQLAlchemySQLModelMongoEngineODMantic <pre><code>from sqlalchemy import create_engine\nfrom sqlalchemy.orm import DeclarativeBase, Mapped, mapped_column\nfrom starlette_admin.contrib.sqla import Admin\n\nengine = create_engine(\"sqlite:///basic.db\", connect_args={\"check_same_thread\": False})\n\n\nclass Base(DeclarativeBase):\n    pass\n\n\nclass Todo(Base):\n    __tablename__ = \"todo\"\n\n    id: Mapped[int] = mapped_column(primary_key=True)\n    title: Mapped[str]\n    done: Mapped[bool]\n\n\n# Create an empty admin interface\nadmin = Admin(engine, title=\"Tutorials: Basic\")\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlalchemy import create_engine\nfrom sqlmodel import Field, SQLModel\nfrom starlette_admin.contrib.sqlmodel import Admin\n\nengine = create_engine(\"sqlite:///basic.db\", connect_args={\"check_same_thread\": False})\n\n\nclass Todo(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    title: str\n    done: bool\n\n\n# Create an empty admin interface\nadmin = Admin(engine, title=\"Tutorials: Basic\")\n</code></pre> <pre><code>import mongoengine as db\nfrom starlette_admin.contrib.mongoengine import Admin\n\n\nclass Todo(db.Document):\n    title = db.StringField()\n    done = db.BooleanField()\n\n\n# Create an empty admin interface\nadmin = Admin(title=\"Tutorials: Basic\")\n</code></pre> <pre><code>from odmantic import AIOEngine, Model\nfrom starlette_admin.contrib.odmantic import Admin\n\nengine = AIOEngine()\n\n\nclass Todo(Model):\n    title: str\n    done: bool\n\n\n# Create an empty admin interface\nadmin = Admin(engine, title=\"Tutorials: Basic\")\n</code></pre>"},{"location":"tutorials/basic/#adding-a-view-for-the-todo-model","title":"Adding a view for the Todo model","text":"<p>Now that the admin interface is initialized, the next step is to add a view for managing the <code>Todo</code> model.</p> <pre><code>admin.add_view(ModelView(Todo))\n</code></pre> <p>In the code above, we use the function add_view of the Admin class to include a view for the <code>Todo</code> model within the admin interface.</p> <p>The ModelView class allow you to add a dedicated set of admin pages for managing any model.</p> <p>Important</p> <p>Ensure to import <code>ModelView</code> from the same package as the <code>Admin</code> class, which varies based on the ORM/ODM you are using. For instance, if you are using SQLAlchemy, the import statement is as follows:</p> <pre><code>from starlette_admin.contrib.sqla import Admin, ModelView\n</code></pre>"},{"location":"tutorials/basic/#mount-admin-to-your-application","title":"Mount <code>admin</code> to your application","text":"<p>We can mount the <code>admin</code> on a Starlette or FastAPI application by using the [mount_to][starlette_admin.base.BaseAdmin.mount_to] function and passing the app instance:</p> StarletteFastAPI <pre><code>from starlette.applications import Starlette\n\napp = Startette()\n\n# Mount admin to your app\nadmin.mount_to(app)\n</code></pre> <pre><code>from fastapi import FastAPI\n\napp = FastAPI()\n\n# Mount admin to your app\nadmin.mount_to(app)\n</code></pre>"},{"location":"tutorials/basic/#full-code","title":"Full Code","text":"<p>Below is the complete code for the tutorial:</p> SQLAlchemySQLModelMongoEngineODMantic <pre><code>from sqlalchemy import create_engine\nfrom sqlalchemy.orm import DeclarativeBase, Mapped, mapped_column\nfrom starlette.applications import Starlette\nfrom starlette_admin.contrib.sqla import Admin, ModelView\n\nengine = create_engine(\"sqlite:///basic.db\", connect_args={\"check_same_thread\": False})\n\n\nclass Base(DeclarativeBase):\n    pass\n\n\nclass Todo(Base):\n    __tablename__ = \"todo\"\n\n    id: Mapped[int] = mapped_column(primary_key=True)\n    title: Mapped[str]\n    done: Mapped[bool]\n\n\nBase.metadata.create_all(engine)\n\napp = Starlette()  # or app = FastAPI()\n\n# Create an empty admin interface\nadmin = Admin(engine, title=\"Tutorials: Basic\")\n\n# Add view\nadmin.add_view(ModelView(Todo, icon=\"fas fa-list\"))\n\n# Mount admin to your app\nadmin.mount_to(app)\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlalchemy import create_engine\nfrom sqlmodel import Field, SQLModel\nfrom starlette.applications import Starlette\nfrom starlette_admin.contrib.sqlmodel import Admin, ModelView\n\nengine = create_engine(\"sqlite:///basic.db\", connect_args={\"check_same_thread\": False})\n\n\nclass Todo(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    title: str\n    done: bool\n\n\nSQLModel.metadata.create_all(engine)\n\napp = Starlette()  # or app = FastAPI()\n\n# Create an empty admin interface\nadmin = Admin(engine, title=\"Tutorials: Basic\")\n\n# Add view\nadmin.add_view(ModelView(Todo, icon=\"fas fa-list\"))\n\n# Mount admin to your app\nadmin.mount_to(app)\n</code></pre> <pre><code>import mongoengine as db\nfrom mongoengine import connect, disconnect\nfrom starlette.applications import Starlette\n\nfrom starlette_admin.contrib.mongoengine import Admin, ModelView\n\n\nclass Todo(db.Document):\n    title = db.StringField()\n    done = db.BooleanField()\n\n\napp = Starlette(\n    on_startup=[lambda: connect(\"basic\")],\n    on_shutdown=[disconnect],\n)\n\n# Create an empty admin interface\nadmin = Admin(title=\"Tutorials: Basic\")\n\n# Add view\nadmin.add_view(ModelView(Todo, icon=\"fas fa-list\"))\n\n# Mount admin to your app\nadmin.mount_to(app)\n</code></pre> <pre><code>from odmantic import AIOEngine, Model\nfrom starlette.applications import Starlette\nfrom starlette_admin.contrib.odmantic import Admin, ModelView\n\nengine = AIOEngine()\n\n\nclass Todo(Model):\n    title: str\n    done: bool\n\n\napp = Starlette()\n\n# Create an empty admin interface\nadmin = Admin(engine, title=\"Tutorials: Basic\")\n\n# Add views\nadmin.add_view(ModelView(Todo, icon=\"fas fa-list\"))\n\n# Mount app\nadmin.mount_to(app)\n</code></pre>"},{"location":"tutorials/basic/#run-the-server","title":"Run the server","text":"<p>We can now launch the server to make the admin interface available. This is done using the <code>uvicorn</code> command:</p> <pre><code>uvicorn main:app\n</code></pre> <p>The admin dashboard will be available at http://127.0.0.1:8000/admin.</p>"},{"location":"tutorials/basic/#exploring-the-admin-interface","title":"Exploring the Admin interface","text":"<p>Let's take a tour of the admin interface autogenerated by Starlette-Admin and see it in action.</p>"},{"location":"tutorials/basic/#home-page","title":"Home Page","text":"<p>Navigate to the admin home page at http://127.0.0.1:8000/admin. It should look something like this:</p> <p></p> <p>The home page is empty right now except for the menu on the left. The menu has a single item called \"Todos\" that links to the CRUD pages we generated for the Todo model.</p> <p>Note</p> <p>We'll learn how to customize and add content to the home page later on.</p>"},{"location":"tutorials/basic/#crud-pages","title":"CRUD Pages","text":"<p>If you click on \"Todos\" in the menu, you'll be taken to the auto-generated CRUD pages for managing todo records.</p>"},{"location":"tutorials/basic/#listing-page","title":"Listing Page","text":"<p>This page lists the todo records</p> <p></p> <p>Let's go through some of the built-in functionality:</p> <ul> <li>Search</li> </ul> <p>Type into the search box to filter records.</p> <p></p> <ul> <li>Filter</li> </ul> <p>Click the button to filter by column values.</p> <p></p> <p>Warning</p> <p>Make sure to reset the filters when you are done</p> <ul> <li>Show/Hide Columns</li> </ul> <p>Customize visible columns</p> <p></p> <ul> <li>Delete</li> </ul> <p>Click the trash icon to delete a record.</p> <p></p> <ul> <li>Export</li> </ul> <p>Click Export and choose CSV or Excel.</p> <p></p>"},{"location":"tutorials/basic/#create-a-new-todo-item","title":"Create a new todo item","text":"<p>From the listing page click on the button New Todo to navigate to the creation page</p> <p>Fill the form and click Save. You'll be back on the list with the new Todo added.</p> <p></p>"},{"location":"tutorials/basic/#edit-an-item","title":"Edit an item","text":"<p>From the listing page click on the Edit (pencil) icon on an existing Todo. Change the title and save. You'll see the updated title in the list.</p> <p></p>"},{"location":"tutorials/basic/#next-steps","title":"Next Steps","text":"<p>You now have a basic admin interface for your Todo app.</p> <p>Some next tutorials to continue learning:</p> <ul> <li>To be continued...</li> </ul> <p>The final source code is available on GitHub</p>"},{"location":"user-guide/actions/","title":"Actions","text":"<p>In starlette-admin, actions provide an easy way to interact with your database records and perform various operations such as mass delete, special mass updates, sending emails, etc.</p>"},{"location":"user-guide/actions/#batch-actions","title":"Batch Actions","text":"<p>By default, to update an object, you must select it in the list page and update it. This works well for a majority of use cases. However, if you need to make the same change to many objects at once, this workflow can be quite tedious.</p> <p>In these cases, you can write a custom batch action to bulk update many objects at once.</p> <p>Note</p> <p>starlette-admin add by default an action named <code>delete</code> to delete many object at once</p> <p>To add other batch actions to your ModelView, besides the default delete action, you can define a function that implements the desired logic and wrap it with the @action decorator ( Heavily inspired by Flask-Admin).</p> <p>Warning</p> <p>The batch action name should be unique within a ModelView.</p>"},{"location":"user-guide/actions/#example","title":"Example","text":"<pre><code>from typing import List, Any\n\nfrom starlette.datastructures import FormData\nfrom starlette.requests import Request\nfrom starlette.responses import RedirectResponse, Response\n\nfrom starlette_admin import action\nfrom starlette_admin.contrib.sqla import ModelView\nfrom starlette_admin.exceptions import ActionFailed\n\n\nclass ArticleView(ModelView):\n    actions = [\"make_published\", \"redirect\", \"delete\"]  # `delete` function is added by default\n\n    @action(\n        name=\"make_published\",\n        text=\"Mark selected articles as published\",\n        confirmation=\"Are you sure you want to mark selected articles as published ?\",\n        submit_btn_text=\"Yes, proceed\",\n        submit_btn_class=\"btn-success\",\n        form=\"\"\"\n        &lt;form&gt;\n            &lt;div class=\"mt-3\"&gt;\n                &lt;input type=\"text\" class=\"form-control\" name=\"example-text-input\" placeholder=\"Enter value\"&gt;\n            &lt;/div&gt;\n        &lt;/form&gt;\n        \"\"\",\n    )\n    async def make_published_action(self, request: Request, pks: List[Any]) -&gt; str:\n        # Write your logic here\n\n        data: FormData = await request.form()\n        user_input = data.get(\"example-text-input\")\n\n        if ...:\n            # Display meaningfully error\n            raise ActionFailed(\"Sorry, We can't proceed this action now.\")\n        # Display successfully message\n        return \"{} articles were successfully marked as published\".format(len(pks))\n\n    # For custom response\n    @action(\n        name=\"redirect\",\n        text=\"Redirect\",\n        custom_response=True,\n        confirmation=\"Fill the form\",\n        form='''\n        &lt;form&gt;\n            &lt;div class=\"mt-3\"&gt;\n                &lt;input type=\"text\" class=\"form-control\" name=\"value\" placeholder=\"Enter value\"&gt;\n            &lt;/div&gt;\n        &lt;/form&gt;\n        '''\n    )\n    async def redirect_action(self, request: Request, pks: List[Any]) -&gt; Response:\n        data = await request.form()\n        return RedirectResponse(f\"https://example.com/?value={data['value']}\")\n</code></pre>"},{"location":"user-guide/actions/#row-actions","title":"Row actions","text":"<p>Row actions allow you to perform actions on individual items within a list view.</p> <p>Note</p> <p>By default, starlette-admin includes three (03) row actions</p> <ul> <li><code>view</code>: redirects to the item's detail page</li> <li><code>edit</code>: redirects to the item's edit page</li> <li><code>delete</code>: deletes the selected item</li> </ul> <p>To add other row actions to your ModelView, besides the default ones, you can define a function that implements the desired logic and wrap it with the @row_action decorator</p> <p>For cases where a row action should simply navigate users to a website or internal page, it is preferable to use the @link_row_action decorator. The key difference is that <code>link_row_action</code> eliminates the need to call the action API. Instead, the link is included directly in the href attribute of the generated html element (e.g. <code>&lt;a href='https://example.com/?pk=4' ...&gt;</code>).</p> <p>Warning</p> <p>The row actions (both @row_action and @link_row_action) name should be unique within a ModelView.</p>"},{"location":"user-guide/actions/#example_1","title":"Example","text":"<pre><code>from typing import Any\n\nfrom starlette.datastructures import FormData\nfrom starlette.requests import Request\n\nfrom starlette_admin._types import RowActionsDisplayType\nfrom starlette_admin.actions import link_row_action, row_action\nfrom starlette_admin.contrib.sqla import ModelView\nfrom starlette_admin.exceptions import ActionFailed\n\n\nclass ArticleView(ModelView):\n    ...\n    row_actions = [\"view\", \"edit\", \"go_to_example\", \"make_published\",\n                   \"delete\"]  # edit, view and delete are provided by default\n    row_actions_display_type = RowActionsDisplayType.ICON_LIST  # RowActionsDisplayType.DROPDOWN\n\n    @row_action(\n        name=\"make_published\",\n        text=\"Mark as published\",\n        confirmation=\"Are you sure you want to mark this article as published ?\",\n        icon_class=\"fas fa-check-circle\",\n        submit_btn_text=\"Yes, proceed\",\n        submit_btn_class=\"btn-success\",\n        action_btn_class=\"btn-info\",\n        form=\"\"\"\n        &lt;form&gt;\n            &lt;div class=\"mt-3\"&gt;\n                &lt;input type=\"text\" class=\"form-control\" name=\"example-text-input\" placeholder=\"Enter value\"&gt;\n            &lt;/div&gt;\n        &lt;/form&gt;\n        \"\"\",\n    )\n    async def make_published_row_action(self, request: Request, pk: Any) -&gt; str:\n        # Write your logic here\n\n        data: FormData = await request.form()\n        user_input = data.get(\"example-text-input\")\n\n        if ...:\n            # Display meaningfully error\n            raise ActionFailed(\"Sorry, We can't proceed this action now.\")\n        # Display successfully message\n        return \"The article was successfully marked as published\"\n\n    @link_row_action(\n        name=\"go_to_example\",\n        text=\"Go to example.com\",\n        icon_class=\"fas fa-arrow-up-right-from-square\",\n    )\n    def go_to_example_row_action(self, request: Request, pk: Any) -&gt; str:\n        return f\"https://example.com/?pk={pk}\"\n</code></pre>"},{"location":"user-guide/actions/#list-rendering","title":"List rendering","text":"<p>The <code>RowActionsDisplayType</code> enum provides options for customizing how row actions are displayed in the list view.</p>"},{"location":"user-guide/actions/#rowactionsdisplaytypeicon_list","title":"RowActionsDisplayType.ICON_LIST","text":"<pre><code>from starlette_admin._types import RowActionsDisplayType\n\n\nclass ArticleView(ModelView):\n    row_actions_display_type = RowActionsDisplayType.ICON_LIST\n</code></pre>"},{"location":"user-guide/actions/#rowactionsdisplaytypedropdown","title":"RowActionsDisplayType.DROPDOWN","text":"<pre><code>from starlette_admin._types import RowActionsDisplayType\n\n\nclass ArticleView(ModelView):\n    row_actions_display_type = RowActionsDisplayType.DROPDOWN\n</code></pre>"},{"location":"user-guide/authentication/","title":"Authentication &amp; Authorization","text":"<p>To protect your admin interface from unwanted users, you can create an Authentication Provider by extending the AuthProvider class and set <code>auth_provider</code> when declaring your admin app</p>"},{"location":"user-guide/authentication/#username-and-password-authentication","title":"Username and Password Authentication","text":"<p>By default, AuthProvider provides a login form with <code>username</code> and <code>password</code> fields for basic username and password authentication. To fully support this authentication method, you need to implement the following methods in your custom Authentication Provider:</p> <ul> <li>is_authenticated: This method will be called to validate   each incoming request.</li> <li>get_admin_user: Return connected user <code>name</code> and/or <code>avatar</code></li> <li>get_admin_config: Return <code>logo_url</code> or <code>app_title</code> according to connected user or any other condition.</li> <li>login: will be called to validate user credentials.</li> <li>logout: Will be called to logout (clear sessions, cookies, ...)</li> </ul> <pre><code>from starlette.requests import Request\nfrom starlette.responses import Response\nfrom starlette_admin.auth import AdminConfig, AdminUser, AuthProvider\nfrom starlette_admin.exceptions import FormValidationError, LoginFailed\n\nusers = {\n    \"admin\": {\n        \"name\": \"Admin\",\n        \"avatar\": \"admin.png\",\n        \"company_logo_url\": \"admin.png\",\n        \"roles\": [\"read\", \"create\", \"edit\", \"delete\", \"action_make_published\"],\n    },\n    \"johndoe\": {\n        \"name\": \"John Doe\",\n        \"avatar\": None, # user avatar is optional\n        \"roles\": [\"read\", \"create\", \"edit\", \"action_make_published\"],\n    },\n    \"viewer\": {\"name\": \"Viewer\", \"avatar\": \"guest.png\", \"roles\": [\"read\"]},\n}\n\n\nclass UsernameAndPasswordProvider(AuthProvider):\n    \"\"\"\n    This is only for demo purpose, it's not a better\n    way to save and validate user credentials\n    \"\"\"\n\n    async def login(\n        self,\n        username: str,\n        password: str,\n        remember_me: bool,\n        request: Request,\n        response: Response,\n    ) -&gt; Response:\n        if len(username) &lt; 3:\n            \"\"\"Form data validation\"\"\"\n            raise FormValidationError(\n                {\"username\": \"Ensure username has at least 03 characters\"}\n            )\n\n        if username in users and password == \"password\":\n            \"\"\"Save `username` in session\"\"\"\n            request.session.update({\"username\": username})\n            return response\n\n        raise LoginFailed(\"Invalid username or password\")\n\n    async def is_authenticated(self, request) -&gt; bool:\n        if request.session.get(\"username\", None) in users:\n            \"\"\"\n            Save current `user` object in the request state. Can be used later\n            to restrict access to connected user.\n            \"\"\"\n            request.state.user = users.get(request.session[\"username\"])\n            return True\n\n        return False\n\n    def get_admin_config(self, request: Request) -&gt; AdminConfig:\n        user = request.state.user  # Retrieve current user\n        # Update app title according to current_user\n        custom_app_title = \"Hello, \" + user[\"name\"] + \"!\"\n        # Update logo url according to current_user\n        custom_logo_url = None\n        if user.get(\"company_logo_url\", None):\n            custom_logo_url = request.url_for(\"static\", path=user[\"company_logo_url\"])\n        return AdminConfig(\n            app_title=custom_app_title,\n            logo_url=custom_logo_url,\n        )\n\n    def get_admin_user(self, request: Request) -&gt; AdminUser:\n        user = request.state.user  # Retrieve current user\n        photo_url = None\n        if user[\"avatar\"] is not None:\n            photo_url = request.url_for(\"static\", path=user[\"avatar\"])\n        return AdminUser(username=user[\"name\"], photo_url=photo_url)\n\n    async def logout(self, request: Request, response: Response) -&gt; Response:\n        request.session.clear()\n        return response\n</code></pre> <p>For a working example, have a look at <code>https://github.com/jowilf/starlette-admin/tree/main/examples/auth</code></p>"},{"location":"user-guide/authentication/#custom-authentication-flow-oauth2oidc","title":"Custom Authentication flow (OAuth2/OIDC, ...)","text":"<p>If you prefer to use a custom authentication flow, such as OAuth2 or OIDC, you can implement the following methods in your custom Authentication Provider:</p> <ul> <li>is_authenticated: This method will be called to validate each incoming request.</li> <li>get_admin_user: Return connected user <code>name</code> and/or <code>profile</code></li> <li>render_login: Override the default behavior to render a custom login page.</li> <li>render_logout: Implement the custom logout logic.</li> </ul> <p>Additionally, you can override these methods depending on your needs:</p> <ul> <li>get_middleware: To provide a custom authentication middleware   for the admin interface</li> <li>setup_admin: This method is called during the setup process of   the admin interface and allows for custom configuration and setup.</li> </ul> <pre><code>from typing import Optional\n\nfrom starlette.datastructures import URL\nfrom starlette.requests import Request\nfrom starlette.responses import RedirectResponse, Response\nfrom starlette.routing import Route\nfrom starlette_admin import BaseAdmin\nfrom starlette_admin.auth import (\n    AdminUser,\n    AuthProvider,\n    login_not_required,\n)\n\nfrom authlib.integrations.starlette_client import OAuth\n\nfrom .config import AUTH0_CLIENT_ID, AUTH0_CLIENT_SECRET, AUTH0_DOMAIN\n\noauth = OAuth()\noauth.register(\n    \"auth0\",\n    client_id=AUTH0_CLIENT_ID,\n    client_secret=AUTH0_CLIENT_SECRET,\n    client_kwargs={\n        \"scope\": \"openid profile email\",\n    },\n    server_metadata_url=f\"https://{AUTH0_DOMAIN}/.well-known/openid-configuration\",\n)\n\n\nclass MyAuthProvider(AuthProvider):\n    async def is_authenticated(self, request: Request) -&gt; bool:\n        if request.session.get(\"user\", None) is not None:\n            request.state.user = request.session.get(\"user\")\n            return True\n        return False\n\n    def get_admin_user(self, request: Request) -&gt; Optional[AdminUser]:\n        user = request.state.user\n        return AdminUser(\n            username=user[\"name\"],\n            photo_url=user[\"picture\"],\n        )\n\n    async def render_login(self, request: Request, admin: BaseAdmin):\n        \"\"\"Override the default login behavior to implement custom logic.\"\"\"\n        auth0 = oauth.create_client(\"auth0\")\n        redirect_uri = request.url_for(\n            admin.route_name + \":authorize_auth0\"\n        ).include_query_params(next=request.query_params.get(\"next\"))\n        return await auth0.authorize_redirect(request, str(redirect_uri))\n\n    async def render_logout(self, request: Request, admin: BaseAdmin) -&gt; Response:\n        \"\"\"Override the default logout to implement custom logic\"\"\"\n        request.session.clear()\n        return RedirectResponse(\n            url=URL(f\"https://{AUTH0_DOMAIN}/v2/logout\").include_query_params(\n                returnTo=request.url_for(admin.route_name + \":index\"),\n                client_id=AUTH0_CLIENT_ID,\n            )\n        )\n\n    @login_not_required\n    async def handle_auth_callback(self, request: Request):\n        auth0 = oauth.create_client(\"auth0\")\n        token = await auth0.authorize_access_token(request)\n        request.session.update({\"user\": token[\"userinfo\"]})\n        return RedirectResponse(request.query_params.get(\"next\"))\n\n    def setup_admin(self, admin: \"BaseAdmin\"):\n        super().setup_admin(admin)\n        \"\"\"add custom authentication callback route\"\"\"\n        admin.routes.append(\n            Route(\n                \"/auth0/authorize\",\n                self.handle_auth_callback,\n                methods=[\"GET\"],\n                name=\"authorize_auth0\",\n            )\n        )\n</code></pre> <p>For a working example, have a look at <code>https://github.com/jowilf/starlette-admin/tree/main/examples/authlib</code></p> <p>The AuthProvider can be added at your admin interface as follows:</p> <pre><code>admin = Admin(\n    engine,\n    title=\"Example: Authentication\",\n    auth_provider=MyAuthProvider(),\n    middlewares=[Middleware(SessionMiddleware, secret_key=SECRET)],\n)\n</code></pre>"},{"location":"user-guide/authentication/#authorization","title":"Authorization","text":""},{"location":"user-guide/authentication/#for-all-views","title":"For all views","text":"<p>Each view implement is_accessible method which can be used to restrict access to current user.</p> <pre><code>from starlette_admin import CustomView\nfrom starlette.requests import Request\n\nclass ReportView(CustomView):\n\n    def is_accessible(self, request: Request) -&gt; bool:\n        return \"admin\" in request.state.user[\"roles\"]\n</code></pre> <p>Important</p> <p>When view is inaccessible, it does not appear in menu structure</p>"},{"location":"user-guide/authentication/#for-modelview","title":"For ModelView","text":"<p>In ModelView, you can override the following methods to restrict access to the current connected user.</p> <ul> <li><code>can_view_details</code>: Permission for viewing full details of Items</li> <li><code>can_create</code>: Permission for creating new Items</li> <li><code>can_edit</code>: Permission for editing Items</li> <li><code>can_delete</code>: Permission for deleting Items</li> <li><code>is_action_allowed</code>:  verify if the action with <code>name</code> is allowed.</li> <li><code>is_row_action_allowed</code>:  verify if the row action with <code>name</code> is allowed.</li> </ul> <pre><code>from starlette_admin.contrib.sqla import ModelView\nfrom starlette.requests import Request\nfrom starlette_admin import action, row_action\n\nclass ArticleView(ModelView):\n    exclude_fields_from_list = [Article.body]\n\n    def can_view_details(self, request: Request) -&gt; bool:\n        return \"read\" in request.state.user[\"roles\"]\n\n    def can_create(self, request: Request) -&gt; bool:\n        return \"create\" in request.state.user[\"roles\"]\n\n    def can_edit(self, request: Request) -&gt; bool:\n        return \"edit\" in request.state.user[\"roles\"]\n\n    def can_delete(self, request: Request) -&gt; bool:\n        return \"delete\" in request.state.user[\"roles\"]\n\n    async def is_action_allowed(self, request: Request, name: str) -&gt; bool:\n        if name == \"make_published\":\n            return \"action_make_published\" in request.state.user[\"roles\"]\n        return await super().is_action_allowed(request, name)\n\n    async def is_row_action_allowed(self, request: Request, name: str) -&gt; bool:\n        if name == \"make_published\":\n            return \"row_action_make_published\" in request.state.user[\"roles\"]\n        return await super().is_row_action_allowed(request, name)\n\n    @action(\n        name=\"make_published\",\n        text=\"Mark selected articles as published\",\n        confirmation=\"Are you sure you want to mark selected articles as published ?\",\n        submit_btn_text=\"Yes, proceed\",\n        submit_btn_class=\"btn-success\",\n    )\n    async def make_published_action(self, request: Request, pks: List[Any]) -&gt; str:\n        ...\n        return \"{} articles were successfully marked as published\".format(len(pks))\n\n\n    @row_action(\n        name=\"make_published\",\n        text=\"Mark as published\",\n        confirmation=\"Are you sure you want to mark this article as published ?\",\n        icon_class=\"fas fa-check-circle\",\n        submit_btn_text=\"Yes, proceed\",\n        submit_btn_class=\"btn-success\",\n        action_btn_class=\"btn-info\",\n    )\n    async def make_published_row_action(self, request: Request, pk: Any) -&gt; str:\n        ...\n        return \"The article was successfully marked as published\"\n</code></pre>"},{"location":"user-guide/configurations/admin/","title":"Admin Configurations","text":"<p>Multiple options are available to customize your admin interface</p> <pre><code>admin = Admin(\n    title=\"SQLModel Admin\",\n    base_url=\"/admin\",\n    route_name=\"admin\",\n    statics_dir=\"statics/admin\",\n    templates_dir=\"templates/admin\",\n    logo_url=\"`https`://preview.tabler.io/static/logo-white.svg\",\n    login_logo_url=\"`https`://preview.tabler.io/static/logo.svg\",\n    index_view=CustomView(label=\"Home\", icon=\"fa fa-home\", path=\"/home\", template_path=\"home.html\"),\n    auth_provider=MyAuthProvider(login_path=\"/sign-in\", logout_path=\"/sign-out\"),\n    middlewares=[],\n    debug=False,\n    i18n_config = I18nConfig(default_locale=\"en\")\n)\n</code></pre>"},{"location":"user-guide/configurations/admin/#parameters","title":"Parameters","text":"<ul> <li><code>title</code>: Admin title.</li> <li><code>base_url</code>: Base URL for Admin interface.</li> <li><code>route_name</code>: Mounted Admin name</li> <li><code>logo_url</code>: URL of logo to be displayed instead of title.</li> <li><code>login_logo_url</code>: If set, it will be used for login interface instead of logo_url.</li> <li><code>statics_dir</code>: Templates dir for static files customisation</li> <li><code>templates_dir</code>: Templates dir for customisation</li> <li><code>index_view</code>: CustomView to use for index page.</li> <li><code>auth_provider</code>: Authentication Provider</li> <li><code>middlewares</code>: Starlette middlewares</li> <li><code>i18n_config</code>: i18n config for your admin interface</li> </ul>"},{"location":"user-guide/configurations/modelview/","title":"ModelView Configurations","text":"<p>There are multiple options available to customize your ModelView. For a complete list, please refer to the API documentation for BaseModelView().</p> <p>Here are some of the most commonly used options:</p>"},{"location":"user-guide/configurations/modelview/#fields","title":"Fields","text":"<p>You can use the <code>fields</code> property of the ModelView class to customize which fields are included in the admin view.</p> <pre><code>from sqlalchemy import JSON, Column, Integer, String, Text, create_engine\nfrom sqlalchemy.ext.declarative import declarative_base\nfrom starlette.applications import Starlette\nfrom starlette_admin import TagsField\nfrom starlette_admin.contrib.sqla import Admin, ModelView\n\nBase = declarative_base()\nengine = create_engine(\"sqlite:///test.db\", connect_args={\"check_same_thread\": False})\n\n\nclass Post(Base):\n    __tablename__ = \"posts\"\n\n    id = Column(Integer, primary_key=True)\n    title = Column(String)\n    tags = Column(JSON)\n    content = Column(Text)\n\n\nclass PostView(ModelView):\n    fields = [\"id\", \"title\", Post.content, TagsField(\"tags\", label=\"Tags\")]\n\n\napp = Starlette()\n\nadmin = Admin(engine)\nadmin.add_view(PostView(Post, icon=\"fa fa-blog\"))\nadmin.mount_to(app)\n</code></pre>"},{"location":"user-guide/configurations/modelview/#exclusions","title":"Exclusions","text":"<p>There are several options available for customizing which fields are displayed in different parts of the admin view. These options include:</p> <ul> <li><code>exclude_fields_from_list</code>: List of fields to exclude from the List page.</li> <li><code>exclude_fields_from_detail</code>: List of fields to exclude from the Detail page.</li> <li><code>exclude_fields_from_create</code>: List of fields to exclude from the creation page.</li> <li><code>exclude_fields_from_edit</code>: List of fields to exclude from the editing page.\\</li> </ul> <pre><code>class PostView(ModelView):\n    exclude_fields_from_list = [Post.content, Post.tags]\n</code></pre> <p>Note</p> <p>For more advanced use cases, you can override the ModelView.get_fields_list() function.</p>"},{"location":"user-guide/configurations/modelview/#searching-sorting","title":"Searching &amp; Sorting","text":"<p>Several options are available to specify which fields can be sorted or searched.</p> <ul> <li><code>searchable_fields</code> for list of searchable fields</li> <li><code>sortable_fields</code> for list of orderable fields</li> <li><code>fields_default_sort</code> for initial order (sort) to apply to the table</li> </ul> <p>Usage</p> <pre><code>class PostView(ModelView):\n    sortable_fields = [Post.id, \"title\"]\n    searchable_fields = [Post.id, Post.title, \"tags\"]\n    fields_default_sort = [\"title\", (\"price\", True)]\n</code></pre>"},{"location":"user-guide/configurations/modelview/#exporting","title":"Exporting","text":"<p>One of the powerful features of Starlette-admin is the ability to export data from the list page.</p> <p>You can specify the export options for each ModelView using the following attributes:</p> <ul> <li><code>export_fields</code>:  List of fields to include in the export.</li> <li><code>export_types</code>: A list of available export filetypes. Available   exports are <code>['csv', 'excel', 'pdf', 'print']</code>. By default, only <code>pdf</code> is disabled.</li> </ul> <p>Example</p> <pre><code>from starlette_admin import ExportType\n\nclass PostView(ModelView):\n    export_fields = [Post.id, Post.content, Post.tags]\n    export_types = [ExportType.CSV, ExportType.EXCEL]\n</code></pre>"},{"location":"user-guide/configurations/modelview/#pagination","title":"Pagination","text":"<p>The pagination options in the list page can be configured. The available options are:</p> <ul> <li><code>page_size</code>: Default number of items to display in List page pagination.             Default value is set to <code>10</code>.</li> <li><code>page_size_options</code>: Pagination choices displayed in List page.  Default value is set to <code>[10, 25, 50, 100]</code>.      Use <code>-1</code>to display All</li> </ul> <p>Example</p> <pre><code>class PostView(ModelView):\n    page_size = 5\n    page_size_options = [5, 10, 25, 50, -1]\n</code></pre>"},{"location":"user-guide/configurations/modelview/#templates","title":"Templates","text":"<p>The template files are built using Jinja2 and can be completely overridden in the configurations. The pages available are:</p> <ul> <li><code>list_template</code>: List view template. Default is <code>list.html</code>.</li> <li><code>detail_template</code>: Details view template. Default is <code>detail.html</code>.</li> <li><code>create_template</code>: Edit view template. Default is <code>create.html</code>.</li> <li><code>edit_template</code>: Edit view template. Default is <code>edit.html</code>.</li> </ul> <p>Example</p> <pre><code>class PostView(ModelView):\n    detail_template = \"post_detail.html\"\n</code></pre>"},{"location":"user-guide/configurations/modelview/#datatables-extensions","title":"Datatables Extensions","text":"<p>starlette-admin includes some datatable extensions by default. You can disable any of these extensions in your <code>ModelView</code> by overridden following options:</p> <ul> <li><code>column_visibility</code>: Enable/Disable column visibility extension</li> <li><code>search_builder</code>: Enable/Disable search builder extension</li> <li><code>responsive_table</code>: Enable/Disable responsive extension</li> <li><code>save_state</code>: Enable/Disable state saving</li> </ul> <p>Example</p> <pre><code>class PostView(ModelView):\n    column_visibility = False\n    search_builder = False\n    responsive_table = True\n    save_state = True\n</code></pre>"},{"location":"user-guide/configurations/modelview/#object-representation","title":"Object Representation","text":"<p>starlette-admin provides two methods for customizing how objects are represented in the admin interface:</p>"},{"location":"user-guide/configurations/modelview/#__admin_repr__","title":"<code>__admin_repr__</code>","text":"<p>It is a special method that can be defined in a model class to customize the object representation in the admin interface. By default, only the value of the object's primary key attribute is displayed. However, by implementing <code>__admin_repr__</code>, you can return a string that better represents the object in the admin interface.</p> <p>Example</p> <p>For example, the following implementation for a <code>User</code> model will display the user's full name instead of their primary key in the admin interface:</p> <pre><code>class User:\n    id: int\n    first_name: str\n    last_name: str\n\n    async def __admin_repr__(self, request: Request):\n        return f\"{self.last_name} {self.first_name}\"\n</code></pre> <p></p>"},{"location":"user-guide/configurations/modelview/#__admin_select2_repr__","title":"<code>__admin_select2_repr__</code>","text":"<p>This method is similar to <code>__admin_repr__</code>, but it returns an HTML string that is used to display the object in a <code>select2</code> widget. By default, all the object's attributes allowed for detail page are used except relation and file fields.</p> <p>Note</p> <p>The returned value should be valid HTML.</p> <p>Danger</p> <p>Escape your database value to avoid Cross-Site Scripting (XSS) attack. You can use Jinja2 Template render with <code>autoescape=True</code>. For more information, visit OWASP website <pre><code>from jinja2 import Template\nTemplate(\"Hello {{name}}\", autoescape=True).render(name=name)\n</code></pre></p> <p>Example</p> <p>Here is an example implementation for a <code>User</code> model that includes the user's name and photo:</p> <pre><code>class User:\n    id: int\n    name: str\n    photo_url: str\n\n    async def __admin_select2_repr__(self, request: Request) -&gt; str:\n        return f'&lt;div&gt;&lt;img src=\"{escape(photo_url)}\"&gt;&lt;span&gt;{escape(self.name)}&lt;/span&gt;&lt;/div&gt;'\n</code></pre> <p></p>"},{"location":"user-guide/configurations/modelview/#hooks","title":"Hooks","text":"<p>Hooks are callback functions that give you an easy way to customize and extend the default CRUD functions. You can use hooks to perform actions before or after specific operations such as item creation, editing, or deletion.</p> <p>The following hooks are available:</p> <ul> <li> <p>before_create(request, data, obj): Called before a new object is   created</p> </li> <li> <p>after_create(request, obj): Called after a new object is created</p> </li> <li> <p>before_edit(request, data, obj): Called before an existing object is   updated</p> </li> <li> <p>after_edit(request, obj): Called after an existing object is updated</p> </li> <li> <p>before_delete(request, obj):  Called before an object is deleted</p> </li> <li> <p>after_delete(request, obj): Called after an object is deleted</p> </li> </ul>"},{"location":"user-guide/configurations/modelview/#example","title":"Example","text":"<pre><code>class OrderView(ModelView):\n    async def after_create(self, request: Request, order: Order):\n        analytics.track_order_created(order)\n</code></pre>"},{"location":"user-guide/files/","title":"Managing files","text":"<p>Starlette-Admin has out-of-the-box support for SQLAlchemy-file and Gridfs through Mongoengine FileField &amp; ImageField</p>"},{"location":"user-guide/files/#sqlalchemy-sqlmodel","title":"SQLAlchemy &amp; SQLModel","text":"<p>All you need is to add ImageField or FileField from SQLAlchemy-file to your model</p> <pre><code>from sqlalchemy import Column, Integer, String\nfrom sqlalchemy.orm import declarative_base\nfrom sqlalchemy_file import FileField, ImageField\nfrom starlette_admin.contrib.sqla import ModelView\n\nBase = declarative_base()\n\n\nclass Book(Base):\n    __tablename__ = \"book\"\n\n    id = Column(Integer, autoincrement=True, primary_key=True)\n    title = Column(String(50), unique=True)\n    cover = Column(ImageField(thumbnail_size=(128, 128)))\n    content = Column(FileField)\n\n\nclass BookView(ModelView):\n    pass\n\nadmin.add_view(BookView(Book))\n</code></pre> <p>Note</p> <p>You can also use <code>multiple=True</code> to save multiple files.</p>"},{"location":"user-guide/files/#mongoengine","title":"MongoEngine","text":"<p>Starlette-Admin support ImageField and FileField</p> <pre><code>from mongoengine import Document, FileField, ImageField, StringField\nfrom starlette_admin.contrib.mongoengine import ModelView\n\n\nclass Book(Document):\n    title = StringField(max_length=50)\n    cover = ImageField(thumbnail_size=(128, 128))\n    content = FileField()\n\n\nclass BookView(ModelView):\n    pass\n\nadmin.add_view(BookView(Book))\n</code></pre>"},{"location":"user-guide/getting-started/","title":"Getting started","text":""},{"location":"user-guide/getting-started/#initialization","title":"Initialization","text":"<p>The first step is to initialize an empty admin interface for your app:</p> SQLAlchemySQLModelMongoEngineODMantic <pre><code>from sqlalchemy import create_engine\nfrom starlette_admin.contrib.sqla import Admin\n\nengine = create_engine(\"sqlite:///test.db\", connect_args={\"check_same_thread\": False})\n\nadmin = Admin(engine)\n</code></pre> <pre><code>from sqlalchemy import create_engine\nfrom starlette_admin.contrib.sqlmodel import Admin\n\nengine = create_engine(\"sqlite:///test.db\", connect_args={\"check_same_thread\": False})\n\nadmin = Admin(engine)\n</code></pre> <pre><code>from starlette_admin.contrib.mongoengine import Admin\n\nadmin = Admin()\n</code></pre> <pre><code>from odmantic import AIOEngine\nfrom starlette_admin.contrib.odmantic import Admin\n\nengine = AIOEngine()\n\nadmin = Admin(engine)\n</code></pre>"},{"location":"user-guide/getting-started/#adding-views","title":"Adding Views","text":""},{"location":"user-guide/getting-started/#modelview","title":"ModelView","text":"<p>Model views allow you to add a dedicated set of admin pages for managing any model.</p> SQLAlchemySQLModelMongoEngineODMantic <pre><code>from sqlalchemy import create_engine\nfrom starlette_admin.contrib.sqla import Admin, ModelView\n\nfrom .models import User, Post\n\nengine = create_engine(\"sqlite:///test.db\", connect_args={\"check_same_thread\": False})\n\nadmin = Admin(engine)\n\nadmin.add_view(ModelView(User))\nadmin.add_view(ModelView(Post))\n</code></pre> <pre><code>from sqlalchemy import create_engine\nfrom starlette_admin.contrib.sqlmodel import Admin, ModelView\n\nfrom .models import User, Post\n\nengine = create_engine(\"sqlite:///test.db\", connect_args={\"check_same_thread\": False})\n\nadmin = Admin(engine)\n\nadmin.add_view(ModelView(User))\nadmin.add_view(ModelView(Post))\n</code></pre> <pre><code>from starlette_admin.contrib.mongoengine import Admin, ModelView\n\nfrom .models import Post, User\n\nadmin = Admin()\n\nadmin.add_view(ModelView(User))\nadmin.add_view(ModelView(Post))\n</code></pre> <pre><code>from odmantic import AIOEngine\nfrom starlette_admin.contrib.odmantic import Admin, ModelView\n\nfrom .models import Post, User\n\nengine = AIOEngine()\n\nadmin = Admin(engine)\n\nadmin.add_view(ModelView(User))\nadmin.add_view(ModelView(Post))\n</code></pre> <p>This gives you a set of fully featured CRUD views for your model:</p> <ul> <li>A list view, with support for searching, sorting, filtering, and deleting records.</li> <li>A create view for adding new records.</li> <li>An edit view for updating existing records.</li> <li>A read-only details view.</li> </ul>"},{"location":"user-guide/getting-started/#customview","title":"CustomView","text":"<p>With CustomView you can add your own views (not tied to any particular model). For example, a custom home page that displays some analytics data.</p> <pre><code>from starlette_admin import CustomView\n\nadmin.add_view(CustomView(label=\"Home\", icon=\"fa fa-home\", path=\"/home\", template_path=\"home.html\"))\n</code></pre> <p>To have a full control of the rendering, override the <code>render</code> methods</p> <pre><code>from starlette.requests import Request\nfrom starlette.responses import Response\nfrom starlette.templating import Jinja2Templates\nfrom starlette_admin import CustomView\n\n\nclass HomeView(CustomView):\n    async def render(self, request: Request, templates: Jinja2Templates) -&gt; Response:\n        return templates.TemplateResponse(\n            request,\n            name=\"home.html\",\n            context={\"latest_posts\": ..., \"top_users\": ...},\n        )\n\n\nadmin.add_view(HomeView(label=\"Home\", icon=\"fa fa-home\", path=\"/home\"))\n</code></pre>"},{"location":"user-guide/getting-started/#link","title":"Link","text":"<p>Use Link to add arbitrary hyperlinks to the menu</p> <pre><code>from starlette_admin.views import Link\n\nadmin.add_view(Link(label=\"Home Page\", icon=\"fa fa-link\", url=\"/\"))\n</code></pre>"},{"location":"user-guide/getting-started/#dropdown","title":"DropDown","text":"<p>Use DropDown to group views together in menu structure</p> <pre><code>from starlette_admin import CustomView, DropDown\nfrom starlette_admin.contrib.sqla import ModelView\nfrom starlette_admin.views import Link\n\nfrom .models import User\n\nadmin.add_view(\n    DropDown(\n        \"Resources\",\n        icon=\"fa fa-list\",\n        views=[\n            ModelView(User),\n            Link(label=\"Home Page\", url=\"/\"),\n            CustomView(label=\"Dashboard\", path=\"/dashboard\", template_path=\"dashboard.html\"),\n        ],\n    )\n)\n</code></pre>"},{"location":"user-guide/getting-started/#mount-admin-to-your-app","title":"Mount admin to your app","text":"<p>The last step is to mount the admin interfaces to your app</p> SQLAlchemySQLModelMongoEngineODMantic <pre><code>from sqlalchemy import create_engine\nfrom starlette.applications import Starlette\nfrom starlette_admin.contrib.sqla import Admin, ModelView\n\nfrom .models import Post, User\n\nengine = create_engine(\"sqlite:///test.db\", connect_args={\"check_same_thread\": False})\n\napp = Starlette() # FastAPI()\n\nadmin = Admin(engine)\n\nadmin.add_view(ModelView(User))\nadmin.add_view(ModelView(Post))\n\nadmin.mount_to(app)\n</code></pre> <pre><code>from sqlalchemy import create_engine\nfrom starlette.applications import Starlette\nfrom starlette_admin.contrib.sqlmodel import Admin, ModelView\n\nfrom .models import Post, User\n\nengine = create_engine(\"sqlite:///test.db\", connect_args={\"check_same_thread\": False})\n\napp = Starlette()  # FastAPI()\n\nadmin = Admin(engine)\n\nadmin.add_view(ModelView(User))\nadmin.add_view(ModelView(Post))\n\nadmin.mount_to(app)\n</code></pre> <pre><code>from starlette.applications import Starlette\nfrom starlette_admin.contrib.mongoengine import Admin, ModelView\n\nfrom .models import Post, User\n\napp = Starlette()  # FastAPI()\n\nadmin = Admin()\n\nadmin.add_view(ModelView(User))\nadmin.add_view(ModelView(Post))\n\nadmin.mount_to(app)\n</code></pre> <pre><code>from odmantic import AIOEngine\nfrom starlette.applications import Starlette\nfrom starlette_admin.contrib.odmantic import Admin, ModelView\n\nfrom .models import Post, User\n\nengine = AIOEngine()\n\napp = Starlette()  # FastAPI()\n\nadmin = Admin(engine)\n\nadmin.add_view(ModelView(User))\nadmin.add_view(ModelView(Post))\n\nadmin.mount_to(app)\n</code></pre> <p>You can now access your admin interfaces in your browser at http://localhost:8000/admin</p>"},{"location":"user-guide/multiple-admin/","title":"Multiple Admin","text":"<p>You can add multiple admin to your app with different or same views. To manage this, simply use different <code>base_url</code> and <code>route_name</code></p> <pre><code>from starlette.applications import Starlette\nfrom starlette_admin import BaseAdmin as Admin\nfrom starlette_admin.contrib.sqla import ModelView\n\napp = Starlette()\n\nadmin1 = Admin(\n    \"Admin1\", base_url=\"/admin1\", route_name=\"admin1\", templates_dir=\"templates/admin1\"\n)\nadmin1.add_view(ModelView(Report))\nadmin1.add_view(ModelView(Post))\nadmin1.mount_to(app)\n\nadmin2 = Admin(\n    \"Admin2\", base_url=\"/admin2\", route_name=\"admin2\", templates_dir=\"templates/admin2\"\n)\nadmin2.add_view(ModelView(Post))\nadmin2.add_view(ModelView(User))\nadmin2.mount_to(app)\n\nassert app.url_path_for(\"admin1:index\") == \"/admin1/\"\nassert app.url_path_for(\"admin2:index\") == \"/admin2/\"\n</code></pre>"},{"location":"user-guide/validations/","title":"Forms Validations","text":"<p>Starlette-admin is designed to be flexible and agnostic to your specific database backend. Therefore, it doesn't include built-in data validation capabilities. Instead, data validation will depend on the validation mechanisms provided by your chosen database backend.</p>"},{"location":"user-guide/validations/#sqlalchemy","title":"SQLAlchemy","text":"<p>There are several options available for validating your data:</p>"},{"location":"user-guide/validations/#pydantic","title":"Pydantic","text":"<p>Pydantic is a widely used Python library that provides data validation capabilities using Python's type hints.</p> <p>To automatically validate submitted data with Pydantic, you only need to define a Pydantic model and use <code>starlette_admin.contrib.sqla.ext.pydantic.ModelView</code></p> <p>Example</p> <pre><code>from starlette_admin.contrib.sqla.ext.pydantic import ModelView\n\n\nclass Post(Base):\n    __tablename__ = \"posts\"\n\n    id = Column(Integer, primary_key=True)\n    title = Column(String)\n    content = Column(Text)\n    views = Column(Integer)\n\n\nclass PostIn(BaseModel):\n    id: Optional[int] = Field(primary_key=True)\n    title: str = Field(min_length=3)\n    content: str = Field(min_length=10)\n    views: int = Field(multiple_of=4)\n\n    @validator(\"title\")\n    def title_must_contain_space(cls, v):\n        if \" \" not in v.strip():\n            raise ValueError(\"title must contain a space\")\n        return v.title()\n\n\n# Add view\nadmin.add_view(ModelView(Post, pydantic_model=PostIn))\n</code></pre>"},{"location":"user-guide/validations/#custom-validation","title":"Custom Validation","text":"<p>You can also create your own validation functions to enforce specific data requirements.</p> <p>Example</p> <pre><code>from starlette_admin.contrib.sqla import ModelView\nfrom starlette_admin.exceptions import FormValidationError\n\n\nclass PostView(ModelView):\n\n    async def validate(self, request: Request, data: Dict[str, Any]) -&gt; None:\n        \"\"\"Raise FormValidationError to display error in forms\"\"\"\n        errors: Dict[str, str] = dict()\n        _2day_from_today = date.today() + timedelta(days=2)\n        if data[\"title\"] is None or len(data[\"title\"]) &lt; 3:\n            errors[\"title\"] = \"Ensure this value has at least 03 characters\"\n        if data[\"text\"] is None or len(data[\"text\"]) &lt; 10:\n            errors[\"text\"] = \"Ensure this value has at least 10 characters\"\n        if data[\"date\"] is None or data[\"date\"] &lt; _2day_from_today:\n            errors[\"date\"] = \"We need at least one day to verify your post\"\n        if data[\"publisher\"] is None:\n            errors[\"publisher\"] = \"Publisher is required\"\n        if data[\"tags\"] is None or len(data[\"tags\"]) &lt; 1:\n            errors[\"tags\"] = \"At least one tag is required\"\n        if len(errors) &gt; 0:\n            raise FormValidationError(errors)\n        return await super().validate(request, data)\n</code></pre> <p></p> Info <p>Full example available here</p>"},{"location":"user-guide/validations/#sqlmodel","title":"SQLModel","text":"<p>With SQLModel, validating your data is made easy. Once you've defined your model, any data submitted to it will be automatically validated.</p> <p>Example</p> <pre><code>from sqlmodel import SQLModel, Field\nfrom pydantic import validator\n\n\nclass Post(SQLModel, table=True):\n    id: Optional[int] = Field(primary_key=True)\n    title: str = Field()\n    content: str = Field(min_length=10)\n    views: int = Field(multiple_of=4)\n\n    @validator('title')\n    def title_must_contain_space(cls, v):\n        if ' ' not in v:\n            raise ValueError('title must contain a space')\n        return v.title()\n</code></pre> <p></p> Info <p>Full example available here</p>"},{"location":"user-guide/validations/#odmantic","title":"Odmantic","text":"<p>Validation of submitted data is handled seamlessly by Odmantic. Any data that you submit to your defined model will be validated automatically.</p> <p>Example</p> <pre><code>from typing import List, Optional\n\nfrom odmantic import EmbeddedModel, Field, Model\nfrom pydantic import EmailStr\n\n\nclass Address(EmbeddedModel):\n    street: str = Field(min_length=3)\n    city: str = Field(min_length=3)\n    state: Optional[str]\n    zipcode: Optional[str]\n\n\nclass Author(Model):\n    first_name: str = Field(min_length=3)\n    last_name: str = Field(min_length=3)\n    email: Optional[EmailStr]\n    addresses: List[Address] = Field(default_factory=list)\n</code></pre> <p></p> Info <p>Full example available here</p>"},{"location":"user-guide/validations/#mongoengine","title":"MongoEngine","text":"<p>The submitted data will be automatically validated according to your model definition.</p> <p>Example</p> <pre><code>import mongoengine as db\n\nclass Comment(db.EmbeddedDocument):\n    name = db.StringField(min_length=3, max_length=20, required=True)\n    value = db.StringField(max_length=20)\n\n\nclass Post(db.Document):\n    name = db.StringField(max_length=20, required=True)\n    value = db.StringField(max_length=20)\n    inner = db.ListField(db.EmbeddedDocumentField(Comment))\n    lols = db.ListField(db.StringField(max_length=20))\n</code></pre> <p></p> Info <p>Full example available here</p>"},{"location":"es/","title":"Visi\u00f3n General","text":"<p>Starlette-Admin es un r\u00e1pido, hermoso y extensible framework de interfaz administrativa para aplicaciones Starlette/FastAPI.</p> <p> </p>"},{"location":"es/#empezando","title":"Empezando","text":"<ul> <li>Revisa la documentaci\u00f3n.</li> <li>Prueba la demostraci\u00f3n en vivo. (C\u00f3digo fuente)</li> <li>Pruebe los varios ejemplos de uso incluidos en la carpeta /examples</li> </ul>"},{"location":"es/#caracteristicas","title":"Caracter\u00edsticas","text":"<ul> <li>CRUD de cualquier dato con facilidad</li> <li>Validaci\u00f3n autom\u00e1tica de formularios</li> <li>Widget de tabla avanzado con Datatables</li> <li>B\u00fasqueda y filtrado</li> <li>Resaltado de b\u00fasqueda</li> <li>Ordenamiento multi columna</li> <li>Exportaci\u00f3n de datos a CSV/EXCEL/PDF e impresi\u00f3n con navegador</li> <li>Autenticaci\u00f3n</li> <li>Autorizaci\u00f3n</li> <li>Administrar archivos</li> <li>Vistas personalizadas</li> <li>ORMs compatibles<ul> <li>SQLAlchemy</li> <li>SQLModel</li> <li>MongoEngine</li> <li>ODMantic</li> </ul> </li> <li>Backend personalizado (doc, example)</li> </ul>"},{"location":"es/#instalacion","title":"Instalaci\u00f3n","text":""},{"location":"es/#ejemplo","title":"Ejemplo","text":"<p>Este es un ejemplo simple con el modelo SQLAlchemy</p> <pre><code>from sqlalchemy import Column, Integer, String, create_engine\nfrom sqlalchemy.ext.declarative import declarative_base\nfrom starlette.applications import Starlette\nfrom starlette_admin.contrib.sqla import Admin, ModelView\n\nBase = declarative_base()\nengine = create_engine(\"sqlite:///test.db\", connect_args={\"check_same_thread\": False})\n\n\n# Define tu modelo\nclass Post(Base):\n    __tablename__ = \"posts\"\n\n    id = Column(Integer, primary_key=True)\n    title = Column(String)\n\n\nBase.metadata.create_all(engine)\n\napp = Starlette()  # FastAPI()\n\n# Crear instancia de admin\nadmin = Admin(engine, title=\"Ejemplo: SQLAlchemy\")\n\n# Agregar vista\nadmin.add_view(ModelView(Post))\n\n# Montar admin a tu app\nadmin.mount_to(app)\n</code></pre> <p>Acceda a su interfaz de administrador en su navegador en http://localhost:8000/admin</p>"},{"location":"es/#terceros","title":"Terceros","text":"<p>starlette-admin est\u00e1 construido con otros proyectos de c\u00f3digo abierto:</p> <ul> <li>Tabler</li> <li>Datatables</li> <li>jquery</li> <li>Select2</li> <li>flatpickr</li> <li>moment</li> <li>jsoneditor</li> <li>fontawesome</li> </ul>"}]}